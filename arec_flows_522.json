[
    {
        "id": "697d1a9fadff8923",
        "type": "tab",
        "label": "Inputs",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "fd9893a00d3f6cdf",
        "type": "tab",
        "label": "Algorithm",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "540329ef3817f6bd",
        "type": "tab",
        "label": "Dashboard",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "84397578eef371ef",
        "type": "tab",
        "label": "LEDs",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "526f8a6d78a6c67f",
        "type": "tab",
        "label": "Scratch Work",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "33b0151b3bde76ac",
        "type": "tab",
        "label": "OLD FLOWS",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bf1930d814d07423",
        "type": "mqtt-broker",
        "name": "MQTT Broker",
        "broker": "192.168.2.101",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "bc2ca31505293e84",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "motion_sensors",
        "name": "Motion Sensors",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "cfe68d916a9a6da8",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "current_weather",
        "name": "Current Weather",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "1a57ca2cbb644fba",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "devices",
        "name": "Devices",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "fc2d99b8dba8ab78",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "door_sensors",
        "name": "Door1",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "1cbfd82388df1f9c",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "light_sensors",
        "name": "Light Sensor",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "8181f6d9dc076d46",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "temp_sensors",
        "name": "Temp Sensors",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "56e8016bbfd59dd7",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "forecast_weather",
        "name": "Forecast Weather",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "dfd865d50087ae91",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "command_doors",
        "name": "command_doors",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "41a13a14d732951f",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "command_windows",
        "name": "command_windows",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "07299e0d42195927",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "command_curtains",
        "name": "command_curtains",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "0f055c5f74a251a8",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "sunrise",
        "name": "Sunrise",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "213fc452357b6b1d",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "sunset",
        "name": "Sunset",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "c1e0178122997209",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "curtain_sensors",
        "name": "curtain_sensors",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "a679213909ea0180",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "window_sensors",
        "name": "window_sensors",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "9fd4708b46e43559",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "points",
        "name": "Points",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "293bbb4decc23217",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "power",
        "name": "power",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "0a60479bc10a638e",
        "type": "ui_group",
        "name": "My Home",
        "tab": "e82bafcff6c3fc66",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e82bafcff6c3fc66",
        "type": "ui_tab",
        "name": "Controls",
        "icon": "Dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "4b853056d14384b5",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "8297f2bf333173ab",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "volume",
        "name": "Volume",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "256bb7967422ce34",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "notifications",
        "name": "Notifications",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "abee372780b2aa3d",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "indicators",
        "name": "Indicators",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "180a534c8ba67fba",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "UI",
        "name": "UI",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "bb393ca0b6419b06",
        "type": "google-home-conf",
        "username": "arec_assistant"
    },
    {
        "id": "a38649a98a51bff4",
        "type": "dialog-flow-listener-config",
        "name": "Cera",
        "port": "1089"
    },
    {
        "id": "d977751fd05ecde2",
        "type": "google-cloud-text-to-speech-credentials",
        "name": ""
    },
    {
        "id": "00b6cae7c1f11c16",
        "type": "googlehome-config-node",
        "ipaddress": "192.168.2.121",
        "name": "Google Home Mini",
        "language": "en"
    },
    {
        "id": "264e6541467bab0e",
        "type": "google-notify-config",
        "ipaddress": "192.168.2.121",
        "name": "Google Home Mini",
        "language": "en",
        "playVolumeLevel": "20",
        "speakSlow": false,
        "mediaServerUrl": "",
        "mediaServerPort": "8098",
        "cacheFolder": "/tmp"
    },
    {
        "id": "989ed5dd8733dd49",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "air",
        "name": "Air",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "3a288b3904aa5cb9",
        "type": "tradfri-config",
        "name": "IKEA Gateway",
        "gatewayHost": "192.168.2.122",
        "identity": "tradfri_1653078194878",
        "preSharedKey": "omLky34covbenaCL"
    },
    {
        "id": "a99e1f0cbc6fe605",
        "type": "ikea-connection",
        "address": "192.168.2.122",
        "name": ""
    },
    {
        "id": "dd727cb5a16b6a6a",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "people",
        "name": "People",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "70548fc8f24ae455",
        "type": "mqtt in",
        "z": "697d1a9fadff8923",
        "name": "TEMP1",
        "topic": "tele/9c3b5e/TEMP1",
        "qos": "2",
        "datatype": "json",
        "broker": "bf1930d814d07423",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 120,
        "wires": [
            [
                "3fb18816a4240537"
            ]
        ]
    },
    {
        "id": "f864deefcac23309",
        "type": "openweathermap in",
        "z": "697d1a9fadff8923",
        "name": "Palo Alto Current Weather",
        "wtype": "current",
        "lon": "",
        "lat": "",
        "city": "Palo Alto",
        "country": "United States",
        "language": "en",
        "x": 210,
        "y": 740,
        "wires": [
            [
                "d3dbe0258331be49",
                "12af6e3febd2ec75",
                "3c2daa4da6829e3c"
            ]
        ]
    },
    {
        "id": "974cf71d1cf26804",
        "type": "openweathermap in",
        "z": "697d1a9fadff8923",
        "name": "Palo Alto Forecast",
        "wtype": "forecast",
        "lon": "",
        "lat": "",
        "city": "Palo Alto",
        "country": "United States",
        "language": "en",
        "x": 190,
        "y": 940,
        "wires": [
            [
                "ec000df9c077a75c",
                "71a71b0f05829ada",
                "cd35b2c280285dfa",
                "a042e9e1352db2e6",
                "f4ee622b2690ed07",
                "db5437f523ea8656",
                "521ac3ac4c743d10",
                "081919c4d33cba2d",
                "8e1bca83be2a35ae",
                "84b55487fb715495",
                "72274739cbcd4e2c"
            ]
        ]
    },
    {
        "id": "4baa090f4dcbfcfb",
        "type": "influxdb out",
        "z": "697d1a9fadff8923",
        "influxdb": "8181f6d9dc076d46",
        "name": "Temp1",
        "measurement": "tele/9c3b5e/TEMP1",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 430,
        "y": 120,
        "wires": []
    },
    {
        "id": "9d5769b0f1436093",
        "type": "influxdb out",
        "z": "697d1a9fadff8923",
        "influxdb": "cfe68d916a9a6da8",
        "name": "Current Weather",
        "measurement": "current_weather",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 640,
        "y": 740,
        "wires": []
    },
    {
        "id": "956b5f30a624c14f",
        "type": "influxdb out",
        "z": "697d1a9fadff8923",
        "influxdb": "56e8016bbfd59dd7",
        "name": "Forecast Weather",
        "measurement": "forecast_weather",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 610,
        "y": 940,
        "wires": []
    },
    {
        "id": "ec000df9c077a75c",
        "type": "change",
        "z": "697d1a9fadff8923",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[0].main.temp_max",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 940,
        "wires": [
            [
                "956b5f30a624c14f"
            ]
        ]
    },
    {
        "id": "d3dbe0258331be49",
        "type": "change",
        "z": "697d1a9fadff8923",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.tempc",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 740,
        "wires": [
            [
                "9d5769b0f1436093"
            ]
        ]
    },
    {
        "id": "3fb18816a4240537",
        "type": "json",
        "z": "697d1a9fadff8923",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 290,
        "y": 120,
        "wires": [
            [
                "4baa090f4dcbfcfb"
            ]
        ]
    },
    {
        "id": "54a3626d09bbf1ac",
        "type": "mqtt in",
        "z": "697d1a9fadff8923",
        "name": "DOOR1",
        "topic": "tele/35298f/DOOR1",
        "qos": "2",
        "datatype": "json",
        "broker": "bf1930d814d07423",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 180,
        "wires": [
            [
                "d3c86867659318d0"
            ]
        ]
    },
    {
        "id": "a61288442a8d8767",
        "type": "influxdb out",
        "z": "697d1a9fadff8923",
        "influxdb": "fc2d99b8dba8ab78",
        "name": "Door1",
        "measurement": "tele/35298f/DOOR1",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 430,
        "y": 180,
        "wires": []
    },
    {
        "id": "d3c86867659318d0",
        "type": "json",
        "z": "697d1a9fadff8923",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 290,
        "y": 180,
        "wires": [
            [
                "a61288442a8d8767"
            ]
        ]
    },
    {
        "id": "a60dfc9d71342945",
        "type": "ping",
        "z": "697d1a9fadff8923",
        "protocol": "Automatic",
        "mode": "timed",
        "name": "Ping Temp1",
        "host": "192.168.2.102",
        "timer": "10",
        "inputs": 0,
        "x": 730,
        "y": 120,
        "wires": [
            [
                "acdc7d7475761d3f"
            ]
        ]
    },
    {
        "id": "acdc7d7475761d3f",
        "type": "function",
        "z": "697d1a9fadff8923",
        "name": "isPresent",
        "func": "context.gotping = context.gotping || 1;\ncontext.pingfail = context.pingfail || 0;\n\nif (msg.payload){\n    context.gotping = 1;\n    context.pingfail = 0;\n}\nelse {\n    context.pingfail += 1;\n    if (context.pingfail > 1){\n        context.gotping = 0;\n    }\n}\n\nmsg.payload = context.gotping;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 120,
        "wires": [
            [
                "4e168cabbcd36da6"
            ]
        ]
    },
    {
        "id": "4e168cabbcd36da6",
        "type": "influxdb out",
        "z": "697d1a9fadff8923",
        "influxdb": "1a57ca2cbb644fba",
        "name": "Devices_Temp1",
        "measurement": "device_temp1",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1080,
        "y": 120,
        "wires": []
    },
    {
        "id": "97f8d4f6b998b832",
        "type": "ping",
        "z": "697d1a9fadff8923",
        "protocol": "Automatic",
        "mode": "timed",
        "name": "Ping Door1",
        "host": "192.168.2.103",
        "timer": "10",
        "inputs": 0,
        "x": 720,
        "y": 160,
        "wires": [
            [
                "719c2329d7a3fb32"
            ]
        ]
    },
    {
        "id": "719c2329d7a3fb32",
        "type": "function",
        "z": "697d1a9fadff8923",
        "name": "isPresent",
        "func": "context.gotping = context.gotping || 1;\ncontext.pingfail = context.pingfail || 0;\n\nif (msg.payload){\n    context.gotping = 1;\n    context.pingfail = 0;\n}\nelse {\n    context.pingfail += 1;\n    if (context.pingfail > 1){\n        context.gotping = 0;\n    }\n}\n\nmsg.payload = context.gotping;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 160,
        "wires": [
            [
                "0a611b4d900811aa"
            ]
        ]
    },
    {
        "id": "0a611b4d900811aa",
        "type": "influxdb out",
        "z": "697d1a9fadff8923",
        "influxdb": "1a57ca2cbb644fba",
        "name": "Devices_Door1",
        "measurement": "device_door1",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1080,
        "y": 160,
        "wires": []
    },
    {
        "id": "b39b777e0cb20766",
        "type": "mqtt in",
        "z": "697d1a9fadff8923",
        "name": "LIGHT1",
        "topic": "tele/4fd36e/LIGHT1",
        "qos": "2",
        "datatype": "json",
        "broker": "bf1930d814d07423",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 240,
        "wires": [
            [
                "a66276cad1b06b41"
            ]
        ]
    },
    {
        "id": "a66276cad1b06b41",
        "type": "json",
        "z": "697d1a9fadff8923",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 290,
        "y": 240,
        "wires": [
            [
                "d2fc7e7c0635eed7"
            ]
        ]
    },
    {
        "id": "d2fc7e7c0635eed7",
        "type": "influxdb out",
        "z": "697d1a9fadff8923",
        "influxdb": "1cbfd82388df1f9c",
        "name": "Light1",
        "measurement": "tele/4fd36e/LIGHT1",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 430,
        "y": 240,
        "wires": []
    },
    {
        "id": "d4c9ac8922c0f94d",
        "type": "json",
        "z": "697d1a9fadff8923",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 290,
        "y": 300,
        "wires": [
            [
                "314dc5415d3194c6"
            ]
        ]
    },
    {
        "id": "80f3c789b99b2f02",
        "type": "mqtt in",
        "z": "697d1a9fadff8923",
        "name": "MOTION1",
        "topic": "tele/9c3b5e/MOTION1",
        "qos": "2",
        "datatype": "json",
        "broker": "bf1930d814d07423",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 300,
        "wires": [
            [
                "d4c9ac8922c0f94d"
            ]
        ]
    },
    {
        "id": "314dc5415d3194c6",
        "type": "influxdb out",
        "z": "697d1a9fadff8923",
        "influxdb": "bc2ca31505293e84",
        "name": "Motion1",
        "measurement": "tele/9c3b5e/MOTION1",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 440,
        "y": 300,
        "wires": []
    },
    {
        "id": "17f5c687762660d0",
        "type": "ping",
        "z": "697d1a9fadff8923",
        "protocol": "Automatic",
        "mode": "timed",
        "name": "Ping Light1",
        "host": "192.168.2.106",
        "timer": "10",
        "inputs": 0,
        "x": 720,
        "y": 200,
        "wires": [
            [
                "27434b56b3b75aed"
            ]
        ]
    },
    {
        "id": "27434b56b3b75aed",
        "type": "function",
        "z": "697d1a9fadff8923",
        "name": "isPresent",
        "func": "context.gotping = context.gotping || 1;\ncontext.pingfail = context.pingfail || 0;\n\nif (msg.payload){\n    context.gotping = 1;\n    context.pingfail = 0;\n}\nelse {\n    context.pingfail += 1;\n    if (context.pingfail > 1){\n        context.gotping = 0;\n    }\n}\n\nmsg.payload = context.gotping;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 200,
        "wires": [
            [
                "7ceed7f6c0b9e8eb"
            ]
        ]
    },
    {
        "id": "7ceed7f6c0b9e8eb",
        "type": "influxdb out",
        "z": "697d1a9fadff8923",
        "influxdb": "1a57ca2cbb644fba",
        "name": "Devices_Light1",
        "measurement": "device_light1",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1080,
        "y": 200,
        "wires": []
    },
    {
        "id": "c27c652baf173e02",
        "type": "ping",
        "z": "697d1a9fadff8923",
        "protocol": "Automatic",
        "mode": "timed",
        "name": "Ping Motion1",
        "host": "192.168.2.102",
        "timer": "10",
        "inputs": 0,
        "x": 730,
        "y": 240,
        "wires": [
            [
                "47d29f4222e1b422"
            ]
        ]
    },
    {
        "id": "47d29f4222e1b422",
        "type": "function",
        "z": "697d1a9fadff8923",
        "name": "isPresent",
        "func": "context.gotping = context.gotping || 1;\ncontext.pingfail = context.pingfail || 0;\n\nif (msg.payload){\n    context.gotping = 1;\n    context.pingfail = 0;\n}\nelse {\n    context.pingfail += 1;\n    if (context.pingfail > 1){\n        context.gotping = 0;\n    }\n}\n\nmsg.payload = context.gotping;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 240,
        "wires": [
            [
                "b540cbf23c73c5bc"
            ]
        ]
    },
    {
        "id": "b540cbf23c73c5bc",
        "type": "influxdb out",
        "z": "697d1a9fadff8923",
        "influxdb": "1a57ca2cbb644fba",
        "name": "Devices_Motion1",
        "measurement": "device_motion1",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1090,
        "y": 240,
        "wires": []
    },
    {
        "id": "12af6e3febd2ec75",
        "type": "change",
        "z": "697d1a9fadff8923",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.sunrise",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 780,
        "wires": [
            [
                "a6851ad26fdecade"
            ]
        ]
    },
    {
        "id": "a6851ad26fdecade",
        "type": "influxdb out",
        "z": "697d1a9fadff8923",
        "influxdb": "0f055c5f74a251a8",
        "name": "Sunrise",
        "measurement": "sunrise",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 620,
        "y": 780,
        "wires": []
    },
    {
        "id": "3c2daa4da6829e3c",
        "type": "change",
        "z": "697d1a9fadff8923",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.sunset",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 820,
        "wires": [
            [
                "346b3d4abe7d0081"
            ]
        ]
    },
    {
        "id": "346b3d4abe7d0081",
        "type": "influxdb out",
        "z": "697d1a9fadff8923",
        "influxdb": "213fc452357b6b1d",
        "name": "Sunset",
        "measurement": "sunset",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 620,
        "y": 820,
        "wires": []
    },
    {
        "id": "e726132857fc852d",
        "type": "influxdb out",
        "z": "697d1a9fadff8923",
        "influxdb": "c1e0178122997209",
        "name": "Curtain1",
        "measurement": "tele/298512/CURTAIN1",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 580,
        "y": 360,
        "wires": []
    },
    {
        "id": "64bbd273876add44",
        "type": "json",
        "z": "697d1a9fadff8923",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 450,
        "y": 360,
        "wires": [
            [
                "e726132857fc852d"
            ]
        ]
    },
    {
        "id": "ee0cf568e662a169",
        "type": "mqtt in",
        "z": "697d1a9fadff8923",
        "name": "WINDOW1",
        "topic": "tele/4fd36e/WINDOW1",
        "qos": "2",
        "datatype": "json",
        "broker": "bf1930d814d07423",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 420,
        "wires": [
            [
                "1dc781601531e277"
            ]
        ]
    },
    {
        "id": "1087bbd433827f7a",
        "type": "influxdb out",
        "z": "697d1a9fadff8923",
        "influxdb": "a679213909ea0180",
        "name": "Window1",
        "measurement": "tele/4fd36e/WINDOW1",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 440,
        "y": 420,
        "wires": []
    },
    {
        "id": "1dc781601531e277",
        "type": "json",
        "z": "697d1a9fadff8923",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 290,
        "y": 420,
        "wires": [
            [
                "1087bbd433827f7a"
            ]
        ]
    },
    {
        "id": "71a71b0f05829ada",
        "type": "function",
        "z": "697d1a9fadff8923",
        "name": "Find Tmax Today",
        "func": "var return_maxtoday = 1;\nvar return_mintonight = 0;\nvar return_maxtomorrow = 0;\nvar return_mintomorrownight = 0;\n\ncontext.fore_bool = context.fore_bool || false;\ncontext.temp = context.temp || [];\ncontext.time = context.time || [];\ncontext.sunrise_bool = context.sunrise_bool || false;\ncontext.sunrise = context.sunrise || 0;\ncontext.sunset_bool = context.sunset_bool || false;\ncontext.sunset = context.sunset || 0;\n\nvar tempstore = []\nvar timestore = []\ncontext.temp_maxtoday = context.temp_maxtoday;\ncontext.time_maxtoday = context.time_maxtoday;\ncontext.temp_mintonight = context.temp_mintonight;\ncontext.time_mintonight = context.time_mintonight;\ncontext.temp_maxtomorrow = context.temp_maxtomorrow;\ncontext.time_maxtomorrow = context.time_maxtomorrow;\ncontext.temp_mintomorrownight = context.temp_mintomorrownight;\ncontext.time_mintomorrownight = context.time_mintomorrownight;\n\nvar temp_maxtoday\nvar time_maxtoday\nvar temp_mintonight\nvar time_mintonight\nvar temp_maxtomorrow\nvar time_maxtomorrow\nvar temp_mintomorrownight\nvar time_mintomorrownight\n\nif (msg.sunrise){\n    context.sunrise = msg.sunrise * 1000;\n    context.sunrise_bool = true;\n} else if (msg.sunset){\n    context.sunset = msg.sunset * 1000;\n    context.sunset_bool = true;\n} else if (msg.payload){\n    for(var i = 0;  i<40; i++) {\n        tempstore[i] = msg.payload[i].main.temp\n        timestore[i] = msg.payload[i].dt * 1000;\n    }\n    context.temp = tempstore;\n    context.time = timestore;\n    context.fore_bool = true;\n}\n\n\nif (context.fore_bool && context.sunrise_bool && context.sunset_bool){\n    \n    if (return_maxtoday){\n        \n        temp_maxtoday = -100;\n        var ischanged = false;\n        \n        for(var i = 0;  i<40; i++){\n            if (context.time[i] > context.sunrise && context.time[i] < context.sunset){\n                if (context.temp[i] > temp_maxtoday){\n                    temp_maxtoday = context.temp[i];\n                    time_maxtoday = context.time[i];\n                    ischanged = true;\n                }\n            }\n        }\n        \n        if (ischanged){\n            context.temp_maxtoday = temp_maxtoday;\n        }\n        \n        msg.payload = context.temp_maxtoday;\n        \n        \n    } else if (return_mintonight){\n\n        temp_mintonight = 100;\n        var ischanged = false;\n        \n        for(var i = 0;  i<40; i++){\n            if (context.time[i] > context.sunset && context.time[i] < context.sunset + 4.32e+7){ // sunset + 12hrs\n                if (context.temp[i] < temp_mintonight){\n                    temp_mintonight = context.temp[i];\n                    time_mintonight = context.time[i];\n                    ischanged = true;\n                }\n            }\n        }\n        \n        if (ischanged){\n            context.temp_mintonight = temp_mintonight;\n        } \n        \n        msg.payload = context.temp_mintonight;\n        \n    } else if (return_maxtomorrow){\n        \n        temp_maxtomorrow = -100;\n        var ischanged = false;\n        \n        for(var i = 0;  i<40; i++){\n            if (context.time[i] > context.sunset + 4.32e+7 && context.time[i] < context.sunset + 8.64e+7){ // sunset+12hrs --> sunset+24hrs\n                if (context.temp[i] > temp_maxtomorrow){\n                    temp_maxtomorrow = context.temp[i];\n                    time_maxtomorrow = context.time[i];\n                    ischanged = true;\n                }\n            }\n        }\n        \n        if (ischanged){\n            context.temp_maxtomorrow = temp_maxtomorrow;\n        } \n        \n        msg.payload = context.temp_maxtomorrow;\n        \n        \n    } else if (return_mintomorrownight){\n        \n        temp_mintomorrownight = 100;\n        var ischanged = false;\n        \n        for(var i = 0;  i<40; i++){\n            if (context.time[i] > context.sunset + 8.64e+7 && context.time[i] < context.sunset + 1.296e+8){ // sunset+24hrs --> sunset+36hrs\n                if (context.temp[i] < temp_mintomorrownight){\n                    temp_mintomorrownight = context.temp[i];\n                    time_mintomorrownight = context.time[i];\n                    ischanged = true;\n                }\n            }\n        }\n        \n        if (ischanged){\n            context.temp_mintomorrownight = temp_mintomorrownight;\n        } \n        \n        msg.payload = context.temp_mintomorrownight;\n        \n        \n    }\n    \n    context.fore_bool = false;\n    context.sunrise_bool = false;\n    context.sunset_bool = false;\n\n    return msg;\n    \n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\ncontext.sentcommand = context.sentcommand || 0;\ncontext.pending = context.pending || 0;\n\ncontext.sentcommand = 0;\ncontext.pending = 0;",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 1000,
        "wires": [
            [
                "1ddc5be951d242cb"
            ]
        ]
    },
    {
        "id": "6e704eab66c1aa95",
        "type": "influxdb in",
        "z": "697d1a9fadff8923",
        "influxdb": "0f055c5f74a251a8",
        "name": "Read sunrise",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 570,
        "y": 1000,
        "wires": [
            [
                "15dfa2b542d6dc0d"
            ]
        ]
    },
    {
        "id": "04a20b1b0e2b896b",
        "type": "function",
        "z": "697d1a9fadff8923",
        "name": "Query sunrise",
        "func": "\nmsg.query = 'select * from \"sunrise\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1000,
        "wires": [
            [
                "6e704eab66c1aa95"
            ]
        ]
    },
    {
        "id": "15dfa2b542d6dc0d",
        "type": "change",
        "z": "697d1a9fadff8923",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "sunrise",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 1000,
        "wires": [
            [
                "71a71b0f05829ada",
                "db5437f523ea8656",
                "cd35b2c280285dfa",
                "521ac3ac4c743d10",
                "a042e9e1352db2e6",
                "081919c4d33cba2d",
                "f4ee622b2690ed07",
                "8e1bca83be2a35ae",
                "84b55487fb715495",
                "72274739cbcd4e2c"
            ]
        ]
    },
    {
        "id": "e379ca67742a2567",
        "type": "influxdb in",
        "z": "697d1a9fadff8923",
        "influxdb": "213fc452357b6b1d",
        "name": "Read sunset",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 550,
        "y": 1040,
        "wires": [
            [
                "03746c6e9feacd37"
            ]
        ]
    },
    {
        "id": "b380a964b804e68b",
        "type": "function",
        "z": "697d1a9fadff8923",
        "name": "Query sunset",
        "func": "\nmsg.query = 'select * from \"sunset\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1040,
        "wires": [
            [
                "e379ca67742a2567"
            ]
        ]
    },
    {
        "id": "03746c6e9feacd37",
        "type": "change",
        "z": "697d1a9fadff8923",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "sunset",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 1040,
        "wires": [
            [
                "71a71b0f05829ada",
                "db5437f523ea8656",
                "cd35b2c280285dfa",
                "521ac3ac4c743d10",
                "a042e9e1352db2e6",
                "081919c4d33cba2d",
                "f4ee622b2690ed07",
                "8e1bca83be2a35ae",
                "84b55487fb715495",
                "72274739cbcd4e2c"
            ]
        ]
    },
    {
        "id": "7dad74e2f9906750",
        "type": "inject",
        "z": "697d1a9fadff8923",
        "name": "Fetch",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": "60",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 250,
        "y": 1000,
        "wires": [
            [
                "04a20b1b0e2b896b"
            ]
        ]
    },
    {
        "id": "7faa933eaf6d4ff6",
        "type": "inject",
        "z": "697d1a9fadff8923",
        "name": "Fetch",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": "60",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 250,
        "y": 1040,
        "wires": [
            [
                "b380a964b804e68b"
            ]
        ]
    },
    {
        "id": "cd35b2c280285dfa",
        "type": "function",
        "z": "697d1a9fadff8923",
        "name": "Find Tmin Tonight",
        "func": "var return_maxtoday = 0;\nvar return_mintonight = 1;\nvar return_maxtomorrow = 0;\nvar return_mintomorrownight = 0;\n\ncontext.fore_bool = context.fore_bool || false;\ncontext.temp = context.temp || [];\ncontext.time = context.time || [];\ncontext.sunrise_bool = context.sunrise_bool || false;\ncontext.sunrise = context.sunrise || 0;\ncontext.sunset_bool = context.sunset_bool || false;\ncontext.sunset = context.sunset || 0;\n\nvar tempstore = []\nvar timestore = []\ncontext.temp_maxtoday = context.temp_maxtoday;\ncontext.time_maxtoday = context.time_maxtoday;\ncontext.temp_mintonight = context.temp_mintonight;\ncontext.time_mintonight = context.time_mintonight;\ncontext.temp_maxtomorrow = context.temp_maxtomorrow;\ncontext.time_maxtomorrow = context.time_maxtomorrow;\ncontext.temp_mintomorrownight = context.temp_mintomorrownight;\ncontext.time_mintomorrownight = context.time_mintomorrownight;\n\nvar temp_maxtoday\nvar time_maxtoday\nvar temp_mintonight\nvar time_mintonight\nvar temp_maxtomorrow\nvar time_maxtomorrow\nvar temp_mintomorrownight\nvar time_mintomorrownight\n\nif (msg.sunrise){\n    context.sunrise = msg.sunrise * 1000;\n    context.sunrise_bool = true;\n} else if (msg.sunset){\n    context.sunset = msg.sunset * 1000;\n    context.sunset_bool = true;\n} else if (msg.payload){\n    for(var i = 0;  i<40; i++) {\n        tempstore[i] = msg.payload[i].main.temp\n        timestore[i] = msg.payload[i].dt * 1000;\n    }\n    context.temp = tempstore;\n    context.time = timestore;\n    context.fore_bool = true;\n}\n\n\nif (context.fore_bool && context.sunrise_bool && context.sunset_bool){\n    \n    if (return_maxtoday){\n        \n        temp_maxtoday = -100;\n        time_maxtoday = -100;\n        var ischanged = false;\n        \n        for(var i = 0;  i<40; i++){\n            if (context.time[i] > context.sunrise && context.time[i] < context.sunset){\n                if (context.temp[i] > temp_maxtoday){\n                    temp_maxtoday = context.temp[i];\n                    time_maxtoday = context.time[i];\n                    ischanged = true;\n                }\n            }\n        }\n        \n        if (ischanged){\n            context.temp_maxtoday = temp_maxtoday;\n        }\n        \n        msg.payload = context.temp_maxtoday;\n        \n        \n    } else if (return_mintonight){\n\n        temp_mintonight = 100;\n        time_mintonight = 100;\n        var ischanged = false;\n        \n        for(var i = 0;  i<40; i++){\n            if (context.time[i] > context.sunset && context.time[i] < context.sunset + 4.32e+7){ // sunset + 12hrs\n                if (context.temp[i] < temp_mintonight){\n                    temp_mintonight = context.temp[i];\n                    time_mintonight = context.time[i];\n                    ischanged = true;\n                }\n            }\n        }\n        \n        if (ischanged){\n            context.temp_mintonight = temp_mintonight;\n        } \n        \n        msg.payload = context.temp_mintonight;\n        \n    } else if (return_maxtomorrow){\n        \n        temp_maxtomorrow = -100;\n        time_maxtomorrow = -100;\n        var ischanged = false;\n        \n        for(var i = 0;  i<40; i++){\n            if (context.time[i] > context.sunset + 4.32e+7 && context.time[i] < context.sunset + 8.64e+7){ // sunset+12hrs --> sunset+24hrs\n                if (context.temp[i] > temp_maxtomorrow){\n                    temp_maxtomorrow = context.temp[i];\n                    time_maxtomorrow = context.time[i];\n                    ischanged = true;\n                }\n            }\n        }\n        \n        if (ischanged){\n            context.temp_maxtomorrow = temp_maxtomorrow;\n        } \n        \n        msg.payload = context.temp_maxtomorrow;\n        \n        \n    } else if (return_mintomorrownight){\n        \n        temp_mintomorrownight = 100;\n        time_mintomorrownight = 100;\n        var ischanged = false;\n        \n        for(var i = 0;  i<40; i++){\n            if (context.time[i] > context.sunset + 8.64e+7 && context.time[i] < context.sunset + 1.296e+8){ // sunset+24hrs --> sunset+36hrs\n                if (context.temp[i] < temp_mintomorrownight){\n                    temp_mintomorrownight = context.temp[i];\n                    time_mintomorrownight = context.time[i];\n                    ischanged = true;\n                }\n            }\n        }\n        \n        if (ischanged){\n            context.temp_mintomorrownight = temp_mintomorrownight;\n        } \n        \n        msg.payload = context.temp_mintomorrownight;\n        \n        \n    }\n    \n    context.fore_bool = false;\n    context.sunrise_bool = false;\n    context.sunset_bool = false;\n\n    return msg;\n    \n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\ncontext.sentcommand = context.sentcommand || 0;\ncontext.pending = context.pending || 0;\n\ncontext.sentcommand = 0;\ncontext.pending = 0;",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 1100,
        "wires": [
            [
                "d9603d69b0bd94f0"
            ]
        ]
    },
    {
        "id": "a042e9e1352db2e6",
        "type": "function",
        "z": "697d1a9fadff8923",
        "name": "Find Tmax Tomorrow",
        "func": "var return_maxtoday = 0;\nvar return_mintonight = 0;\nvar return_maxtomorrow = 1;\nvar return_mintomorrownight = 0;\n\ncontext.fore_bool = context.fore_bool || false;\ncontext.temp = context.temp || [];\ncontext.time = context.time || [];\ncontext.sunrise_bool = context.sunrise_bool || false;\ncontext.sunrise = context.sunrise || 0;\ncontext.sunset_bool = context.sunset_bool || false;\ncontext.sunset = context.sunset || 0;\n\nvar tempstore = []\nvar timestore = []\ncontext.temp_maxtoday = context.temp_maxtoday;\ncontext.time_maxtoday = context.time_maxtoday;\ncontext.temp_mintonight = context.temp_mintonight;\ncontext.time_mintonight = context.time_mintonight;\ncontext.temp_maxtomorrow = context.temp_maxtomorrow;\ncontext.time_maxtomorrow = context.time_maxtomorrow;\ncontext.temp_mintomorrownight = context.temp_mintomorrownight;\ncontext.time_mintomorrownight = context.time_mintomorrownight;\n\nvar temp_maxtoday\nvar time_maxtoday\nvar temp_mintonight\nvar time_mintonight\nvar temp_maxtomorrow\nvar time_maxtomorrow\nvar temp_mintomorrownight\nvar time_mintomorrownight\n\nif (msg.sunrise){\n    context.sunrise = msg.sunrise * 1000;\n    context.sunrise_bool = true;\n} else if (msg.sunset){\n    context.sunset = msg.sunset * 1000;\n    context.sunset_bool = true;\n} else if (msg.payload){\n    for(var i = 0;  i<40; i++) {\n        tempstore[i] = msg.payload[i].main.temp\n        timestore[i] = msg.payload[i].dt * 1000;\n    }\n    context.temp = tempstore;\n    context.time = timestore;\n    context.fore_bool = true;\n}\n\n\nif (context.fore_bool && context.sunrise_bool && context.sunset_bool){\n    \n    if (return_maxtoday){\n        \n        temp_maxtoday = -100;\n        time_maxtoday = -100;\n        var ischanged = false;\n        \n        for(var i = 0;  i<40; i++){\n            if (context.time[i] > context.sunrise && context.time[i] < context.sunset){\n                if (context.temp[i] > temp_maxtoday){\n                    temp_maxtoday = context.temp[i];\n                    time_maxtoday = context.time[i];\n                    ischanged = true;\n                }\n            }\n        }\n        \n        if (ischanged){\n            context.temp_maxtoday = temp_maxtoday;\n        }\n        \n        msg.payload = context.temp_maxtoday;\n        \n        \n    } else if (return_mintonight){\n\n        temp_mintonight = 100;\n        time_mintonight = 100;\n        var ischanged = false;\n        \n        for(var i = 0;  i<40; i++){\n            if (context.time[i] > context.sunset && context.time[i] < context.sunset + 4.32e+7){ // sunset + 12hrs\n                if (context.temp[i] < temp_mintonight){\n                    temp_mintonight = context.temp[i];\n                    time_mintonight = context.time[i];\n                    ischanged = true;\n                }\n            }\n        }\n        \n        if (ischanged){\n            context.temp_mintonight = temp_mintonight;\n        } \n        \n        msg.payload = context.temp_mintonight;\n        \n    } else if (return_maxtomorrow){\n        \n        temp_maxtomorrow = -100;\n        time_maxtomorrow = -100;\n        var ischanged = false;\n        \n        for(var i = 0;  i<40; i++){\n            if (context.time[i] > context.sunset + 4.32e+7 && context.time[i] < context.sunset + 8.64e+7){ // sunset+12hrs --> sunset+24hrs\n                if (context.temp[i] > temp_maxtomorrow){\n                    temp_maxtomorrow = context.temp[i];\n                    time_maxtomorrow = context.time[i];\n                    ischanged = true;\n                }\n            }\n        }\n        \n        if (ischanged){\n            context.temp_maxtomorrow = temp_maxtomorrow;\n        } \n        \n        msg.payload = context.temp_maxtomorrow;\n        \n        \n    } else if (return_mintomorrownight){\n        \n        temp_mintomorrownight = 100;\n        time_mintomorrownight = 100;\n        var ischanged = false;\n        \n        for(var i = 0;  i<40; i++){\n            if (context.time[i] > context.sunset + 8.64e+7 && context.time[i] < context.sunset + 1.296e+8){ // sunset+24hrs --> sunset+36hrs\n                if (context.temp[i] < temp_mintomorrownight){\n                    temp_mintomorrownight = context.temp[i];\n                    time_mintomorrownight = context.time[i];\n                    ischanged = true;\n                }\n            }\n        }\n        \n        if (ischanged){\n            context.temp_mintomorrownight = temp_mintomorrownight;\n        } \n        \n        msg.payload = context.temp_mintomorrownight;\n        \n        \n    }\n    \n    context.fore_bool = false;\n    context.sunrise_bool = false;\n    context.sunset_bool = false;\n\n    return msg;\n    \n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\ncontext.sentcommand = context.sentcommand || 0;\ncontext.pending = context.pending || 0;\n\ncontext.sentcommand = 0;\ncontext.pending = 0;",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1200,
        "wires": [
            [
                "1686e3cadd9b30f9"
            ]
        ]
    },
    {
        "id": "f4ee622b2690ed07",
        "type": "function",
        "z": "697d1a9fadff8923",
        "name": "Find Tmin Tomorrow Night",
        "func": "var return_maxtoday = 0;\nvar return_mintonight = 0;\nvar return_maxtomorrow = 0;\nvar return_mintomorrownight = 1;\n\ncontext.fore_bool = context.fore_bool || false;\ncontext.temp = context.temp || [];\ncontext.time = context.time || [];\ncontext.sunrise_bool = context.sunrise_bool || false;\ncontext.sunrise = context.sunrise || 0;\ncontext.sunset_bool = context.sunset_bool || false;\ncontext.sunset = context.sunset || 0;\n\nvar tempstore = []\nvar timestore = []\ncontext.temp_maxtoday = context.temp_maxtoday;\ncontext.time_maxtoday = context.time_maxtoday;\ncontext.temp_mintonight = context.temp_mintonight;\ncontext.time_mintonight = context.time_mintonight;\ncontext.temp_maxtomorrow = context.temp_maxtomorrow;\ncontext.time_maxtomorrow = context.time_maxtomorrow;\ncontext.temp_mintomorrownight = context.temp_mintomorrownight;\ncontext.time_mintomorrownight = context.time_mintomorrownight;\n\nvar temp_maxtoday\nvar time_maxtoday\nvar temp_mintonight\nvar time_mintonight\nvar temp_maxtomorrow\nvar time_maxtomorrow\nvar temp_mintomorrownight\nvar time_mintomorrownight\n\nif (msg.sunrise){\n    context.sunrise = msg.sunrise * 1000;\n    context.sunrise_bool = true;\n} else if (msg.sunset){\n    context.sunset = msg.sunset * 1000;\n    context.sunset_bool = true;\n} else if (msg.payload){\n    for(var i = 0;  i<40; i++) {\n        tempstore[i] = msg.payload[i].main.temp\n        timestore[i] = msg.payload[i].dt * 1000;\n    }\n    context.temp = tempstore;\n    context.time = timestore;\n    context.fore_bool = true;\n}\n\n\nif (context.fore_bool && context.sunrise_bool && context.sunset_bool){\n    \n    if (return_maxtoday){\n        \n        temp_maxtoday = -100;\n        time_maxtoday = -100;\n        var ischanged = false;\n        \n        for(var i = 0;  i<40; i++){\n            if (context.time[i] > context.sunrise && context.time[i] < context.sunset){\n                if (context.temp[i] > temp_maxtoday){\n                    temp_maxtoday = context.temp[i];\n                    time_maxtoday = context.time[i];\n                    ischanged = true;\n                }\n            }\n        }\n        \n        if (ischanged){\n            context.temp_maxtoday = temp_maxtoday;\n        }\n        \n        msg.payload = context.temp_maxtoday;\n        \n        \n    } else if (return_mintonight){\n\n        temp_mintonight = 100;\n        time_mintonight = 100;\n        var ischanged = false;\n        \n        for(var i = 0;  i<40; i++){\n            if (context.time[i] > context.sunset && context.time[i] < context.sunset + 4.32e+7){ // sunset + 12hrs\n                if (context.temp[i] < temp_mintonight){\n                    temp_mintonight = context.temp[i];\n                    time_mintonight = context.time[i];\n                    ischanged = true;\n                }\n            }\n        }\n        \n        if (ischanged){\n            context.temp_mintonight = temp_mintonight;\n        } \n        \n        msg.payload = context.temp_mintonight;\n        \n    } else if (return_maxtomorrow){\n        \n        temp_maxtomorrow = -100;\n        time_maxtomorrow = -100;\n        var ischanged = false;\n        \n        for(var i = 0;  i<40; i++){\n            if (context.time[i] > context.sunset + 4.32e+7 && context.time[i] < context.sunset + 8.64e+7){ // sunset+12hrs --> sunset+24hrs\n                if (context.temp[i] > temp_maxtomorrow){\n                    temp_maxtomorrow = context.temp[i];\n                    time_maxtomorrow = context.time[i];\n                    ischanged = true;\n                }\n            }\n        }\n        \n        if (ischanged){\n            context.temp_maxtomorrow = temp_maxtomorrow;\n        } \n        \n        msg.payload = context.temp_maxtomorrow;\n        \n        \n    } else if (return_mintomorrownight){\n        \n        temp_mintomorrownight = 100;\n        time_mintomorrownight = 100;\n        var ischanged = false;\n        \n        for(var i = 0;  i<40; i++){\n            if (context.time[i] > context.sunset + 8.64e+7 && context.time[i] < context.sunset + 1.296e+8){ // sunset+24hrs --> sunset+36hrs\n                if (context.temp[i] < temp_mintomorrownight){\n                    temp_mintomorrownight = context.temp[i];\n                    time_mintomorrownight = context.time[i];\n                    ischanged = true;\n                }\n            }\n        }\n        \n        if (ischanged){\n            context.temp_mintomorrownight = temp_mintomorrownight;\n        } \n        \n        msg.payload = context.temp_mintomorrownight;\n        \n        \n    }\n    \n    context.fore_bool = false;\n    context.sunrise_bool = false;\n    context.sunset_bool = false;\n\n    return msg;\n    \n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\ncontext.sentcommand = context.sentcommand || 0;\ncontext.pending = context.pending || 0;\n\ncontext.sentcommand = 0;\ncontext.pending = 0;",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 1300,
        "wires": [
            [
                "6852c97590b39775"
            ]
        ]
    },
    {
        "id": "1ddc5be951d242cb",
        "type": "influxdb out",
        "z": "697d1a9fadff8923",
        "influxdb": "56e8016bbfd59dd7",
        "name": "Forecast Weather",
        "measurement": "tmax_today",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1250,
        "y": 1000,
        "wires": []
    },
    {
        "id": "d9603d69b0bd94f0",
        "type": "influxdb out",
        "z": "697d1a9fadff8923",
        "influxdb": "56e8016bbfd59dd7",
        "name": "Forecast Weather",
        "measurement": "tmin_tonight",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1250,
        "y": 1100,
        "wires": []
    },
    {
        "id": "1686e3cadd9b30f9",
        "type": "influxdb out",
        "z": "697d1a9fadff8923",
        "influxdb": "56e8016bbfd59dd7",
        "name": "Forecast Weather",
        "measurement": "tmax_tomorrow",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1270,
        "y": 1200,
        "wires": []
    },
    {
        "id": "6852c97590b39775",
        "type": "influxdb out",
        "z": "697d1a9fadff8923",
        "influxdb": "56e8016bbfd59dd7",
        "name": "Forecast Weather",
        "measurement": "tmin_tomorrownight",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1310,
        "y": 1300,
        "wires": []
    },
    {
        "id": "cc9b6eac7d937596",
        "type": "comment",
        "z": "697d1a9fadff8923",
        "name": "Sensor Inputs",
        "info": "",
        "x": 170,
        "y": 80,
        "wires": []
    },
    {
        "id": "43bf25d611077331",
        "type": "comment",
        "z": "697d1a9fadff8923",
        "name": "Weather Parsing",
        "info": "",
        "x": 180,
        "y": 700,
        "wires": []
    },
    {
        "id": "2c05086f0f71e696",
        "type": "comment",
        "z": "697d1a9fadff8923",
        "name": "Device Presence",
        "info": "",
        "x": 740,
        "y": 80,
        "wires": []
    },
    {
        "id": "db5437f523ea8656",
        "type": "function",
        "z": "697d1a9fadff8923",
        "name": "Find Timemax Today",
        "func": "var return_timemaxtoday = 1;\nvar return_timemintonight = 0;\nvar return_timemaxtomorrow = 0;\nvar return_timemintomorrownight = 0;\n\ncontext.fore_bool = context.fore_bool || false;\ncontext.temp = context.temp || [];\ncontext.time = context.time || [];\ncontext.sunrise_bool = context.sunrise_bool || false;\ncontext.sunrise = context.sunrise || 0;\ncontext.sunset_bool = context.sunset_bool || false;\ncontext.sunset = context.sunset || 0;\n\nvar tempstore = []\nvar timestore = []\ncontext.temp_maxtoday = context.temp_maxtoday;\ncontext.time_maxtoday = context.time_maxtoday;\ncontext.temp_mintonight = context.temp_mintonight;\ncontext.time_mintonight = context.time_mintonight;\ncontext.temp_maxtomorrow = context.temp_maxtomorrow;\ncontext.time_maxtomorrow = context.time_maxtomorrow;\ncontext.temp_mintomorrownight = context.temp_mintomorrownight;\ncontext.time_mintomorrownight = context.time_mintomorrownight;\n\nvar temp_maxtoday\nvar time_maxtoday\nvar temp_mintonight\nvar time_mintonight\nvar temp_maxtomorrow\nvar time_maxtomorrow\nvar temp_mintomorrownight\nvar time_mintomorrownight\n\nif (msg.sunrise){\n    context.sunrise = msg.sunrise * 1000;\n    context.sunrise_bool = true;\n} else if (msg.sunset){\n    context.sunset = msg.sunset * 1000;\n    context.sunset_bool = true;\n} else if (msg.payload){\n    for(var i = 0;  i<40; i++) {\n        tempstore[i] = msg.payload[i].main.temp\n        timestore[i] = msg.payload[i].dt * 1000;\n    }\n    context.temp = tempstore;\n    context.time = timestore;\n    context.fore_bool = true;\n}\n\n\nif (context.fore_bool && context.sunrise_bool && context.sunset_bool){\n    \n    if (return_timemaxtoday){\n        \n        temp_maxtoday = -100;\n        var ischanged = false;\n        \n        for(var i = 0;  i<40; i++){\n            if (context.time[i] > context.sunrise && context.time[i] < context.sunset){\n                if (context.temp[i] > temp_maxtoday){\n                    temp_maxtoday = context.temp[i];\n                    time_maxtoday = context.time[i];\n                    ischanged = true;\n                }\n            }\n        }\n        \n        if (ischanged){\n            context.time_maxtoday = time_maxtoday;\n        }\n        \n        msg.payload = context.time_maxtoday;\n        \n        \n    } else if (return_timemintonight){\n\n        temp_mintonight = 100;\n        var ischanged = false;\n        \n        for(var i = 0;  i<40; i++){\n            if (context.time[i] > context.sunset && context.time[i] < context.sunset + 4.32e+7){ // sunset + 12hrs\n                if (context.temp[i] < temp_mintonight){\n                    temp_mintonight = context.temp[i];\n                    time_mintonight = context.time[i];\n                    ischanged = true;\n                }\n            }\n        }\n        \n        if (ischanged){\n            context.time_mintonight = time_mintonight;\n        } \n        \n        msg.payload = context.time_mintonight;\n        \n    } else if (return_timemaxtomorrow){\n        \n        temp_maxtomorrow = -100;\n        var ischanged = false;\n        \n        for(var i = 0;  i<40; i++){\n            if (context.time[i] > context.sunset + 4.32e+7 && context.time[i] < context.sunset + 8.64e+7){ // sunset+12hrs --> sunset+24hrs\n                if (context.temp[i] > temp_maxtomorrow){\n                    temp_maxtomorrow = context.temp[i];\n                    time_maxtomorrow = context.time[i];\n                    ischanged = true;\n                }\n            }\n        }\n        \n        if (ischanged){\n            context.time_maxtomorrow = time_maxtomorrow;\n        } \n        \n        msg.payload = context.time_maxtomorrow;\n        \n        \n    } else if (return_timemintomorrownight){\n        \n        temp_mintomorrownight = 100;\n        var ischanged = false;\n        \n        for(var i = 0;  i<40; i++){\n            if (context.time[i] > context.sunset + 8.64e+7 && context.time[i] < context.sunset + 1.296e+8){ // sunset+24hrs --> sunset+36hrs\n                if (context.temp[i] < temp_mintomorrownight){\n                    temp_mintomorrownight = context.temp[i];\n                    time_mintomorrownight = context.time[i];\n                    ischanged = true;\n                }\n            }\n        }\n        \n        if (ischanged){\n            context.time_mintomorrownight = time_mintomorrownight;\n        } \n        \n        msg.payload = context.time_mintomorrownight;\n        \n        \n    }\n    \n    context.fore_bool = false;\n    context.sunrise_bool = false;\n    context.sunset_bool = false;\n\n    return msg;\n    \n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\ncontext.sentcommand = context.sentcommand || 0;\ncontext.pending = context.pending || 0;\n\ncontext.sentcommand = 0;\ncontext.pending = 0;",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1040,
        "wires": [
            [
                "5fe4b356b354a853"
            ]
        ]
    },
    {
        "id": "521ac3ac4c743d10",
        "type": "function",
        "z": "697d1a9fadff8923",
        "name": "Find Timemin Tonight",
        "func": "var return_timemaxtoday = 0;\nvar return_timemintonight = 1;\nvar return_timemaxtomorrow = 0;\nvar return_timemintomorrownight = 0;\n\ncontext.fore_bool = context.fore_bool || false;\ncontext.temp = context.temp || [];\ncontext.time = context.time || [];\ncontext.sunrise_bool = context.sunrise_bool || false;\ncontext.sunrise = context.sunrise || 0;\ncontext.sunset_bool = context.sunset_bool || false;\ncontext.sunset = context.sunset || 0;\n\nvar tempstore = []\nvar timestore = []\ncontext.temp_maxtoday = context.temp_maxtoday;\ncontext.time_maxtoday = context.time_maxtoday;\ncontext.temp_mintonight = context.temp_mintonight;\ncontext.time_mintonight = context.time_mintonight;\ncontext.temp_maxtomorrow = context.temp_maxtomorrow;\ncontext.time_maxtomorrow = context.time_maxtomorrow;\ncontext.temp_mintomorrownight = context.temp_mintomorrownight;\ncontext.time_mintomorrownight = context.time_mintomorrownight;\n\nvar temp_maxtoday\nvar time_maxtoday\nvar temp_mintonight\nvar time_mintonight\nvar temp_maxtomorrow\nvar time_maxtomorrow\nvar temp_mintomorrownight\nvar time_mintomorrownight\n\nif (msg.sunrise){\n    context.sunrise = msg.sunrise * 1000;\n    context.sunrise_bool = true;\n} else if (msg.sunset){\n    context.sunset = msg.sunset * 1000;\n    context.sunset_bool = true;\n} else if (msg.payload){\n    for(var i = 0;  i<40; i++) {\n        tempstore[i] = msg.payload[i].main.temp\n        timestore[i] = msg.payload[i].dt * 1000;\n    }\n    context.temp = tempstore;\n    context.time = timestore;\n    context.fore_bool = true;\n}\n\n\nif (context.fore_bool && context.sunrise_bool && context.sunset_bool){\n    \n    if (return_timemaxtoday){\n        \n        temp_maxtoday = -100;\n        var ischanged = false;\n        \n        for(var i = 0;  i<40; i++){\n            if (context.time[i] > context.sunrise && context.time[i] < context.sunset){\n                if (context.temp[i] > temp_maxtoday){\n                    temp_maxtoday = context.temp[i];\n                    time_maxtoday = context.time[i];\n                    ischanged = true;\n                }\n            }\n        }\n        \n        if (ischanged){\n            context.time_maxtoday = time_maxtoday;\n        }\n        \n        msg.payload = context.time_maxtoday;\n        \n        \n    } else if (return_timemintonight){\n\n        temp_mintonight = 100;\n        var ischanged = false;\n        \n        for(var i = 0;  i<40; i++){\n            if (context.time[i] > context.sunset && context.time[i] < context.sunset + 4.32e+7){ // sunset + 12hrs\n                if (context.temp[i] < temp_mintonight){\n                    temp_mintonight = context.temp[i];\n                    time_mintonight = context.time[i];\n                    ischanged = true;\n                }\n            }\n        }\n        \n        if (ischanged){\n            context.time_mintonight = time_mintonight;\n        } \n        \n        msg.payload = context.time_mintonight;\n        \n    } else if (return_timemaxtomorrow){\n        \n        temp_maxtomorrow = -100;\n        var ischanged = false;\n        \n        for(var i = 0;  i<40; i++){\n            if (context.time[i] > context.sunset + 4.32e+7 && context.time[i] < context.sunset + 8.64e+7){ // sunset+12hrs --> sunset+24hrs\n                if (context.temp[i] > temp_maxtomorrow){\n                    temp_maxtomorrow = context.temp[i];\n                    time_maxtomorrow = context.time[i];\n                    ischanged = true;\n                }\n            }\n        }\n        \n        if (ischanged){\n            context.time_maxtomorrow = time_maxtomorrow;\n        } \n        \n        msg.payload = context.time_maxtomorrow;\n        \n        \n    } else if (return_timemintomorrownight){\n        \n        temp_mintomorrownight = 100;\n        var ischanged = false;\n        \n        for(var i = 0;  i<40; i++){\n            if (context.time[i] > context.sunset + 8.64e+7 && context.time[i] < context.sunset + 1.296e+8){ // sunset+24hrs --> sunset+36hrs\n                if (context.temp[i] < temp_mintomorrownight){\n                    temp_mintomorrownight = context.temp[i];\n                    time_mintomorrownight = context.time[i];\n                    ischanged = true;\n                }\n            }\n        }\n        \n        if (ischanged){\n            context.time_mintomorrownight = time_mintomorrownight;\n        } \n        \n        msg.payload = context.time_mintomorrownight;\n        \n        \n    }\n    \n    context.fore_bool = false;\n    context.sunrise_bool = false;\n    context.sunset_bool = false;\n\n    return msg;\n    \n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\ncontext.sentcommand = context.sentcommand || 0;\ncontext.pending = context.pending || 0;\n\ncontext.sentcommand = 0;\ncontext.pending = 0;",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1140,
        "wires": [
            [
                "977a3178e3d322ae"
            ]
        ]
    },
    {
        "id": "081919c4d33cba2d",
        "type": "function",
        "z": "697d1a9fadff8923",
        "name": "Find Timemax Tomorrow",
        "func": "var return_timemaxtoday = 0;\nvar return_timemintonight = 0;\nvar return_timemaxtomorrow = 1;\nvar return_timemintomorrownight = 0;\n\ncontext.fore_bool = context.fore_bool || false;\ncontext.temp = context.temp || [];\ncontext.time = context.time || [];\ncontext.sunrise_bool = context.sunrise_bool || false;\ncontext.sunrise = context.sunrise || 0;\ncontext.sunset_bool = context.sunset_bool || false;\ncontext.sunset = context.sunset || 0;\n\nvar tempstore = []\nvar timestore = []\ncontext.temp_maxtoday = context.temp_maxtoday;\ncontext.time_maxtoday = context.time_maxtoday;\ncontext.temp_mintonight = context.temp_mintonight;\ncontext.time_mintonight = context.time_mintonight;\ncontext.temp_maxtomorrow = context.temp_maxtomorrow;\ncontext.time_maxtomorrow = context.time_maxtomorrow;\ncontext.temp_mintomorrownight = context.temp_mintomorrownight;\ncontext.time_mintomorrownight = context.time_mintomorrownight;\n\nvar temp_maxtoday\nvar time_maxtoday\nvar temp_mintonight\nvar time_mintonight\nvar temp_maxtomorrow\nvar time_maxtomorrow\nvar temp_mintomorrownight\nvar time_mintomorrownight\n\nif (msg.sunrise){\n    context.sunrise = msg.sunrise * 1000;\n    context.sunrise_bool = true;\n} else if (msg.sunset){\n    context.sunset = msg.sunset * 1000;\n    context.sunset_bool = true;\n} else if (msg.payload){\n    for(var i = 0;  i<40; i++) {\n        tempstore[i] = msg.payload[i].main.temp\n        timestore[i] = msg.payload[i].dt * 1000;\n    }\n    context.temp = tempstore;\n    context.time = timestore;\n    context.fore_bool = true;\n}\n\n\nif (context.fore_bool && context.sunrise_bool && context.sunset_bool){\n    \n    if (return_timemaxtoday){\n        \n        temp_maxtoday = -100;\n        var ischanged = false;\n        \n        for(var i = 0;  i<40; i++){\n            if (context.time[i] > context.sunrise && context.time[i] < context.sunset){\n                if (context.temp[i] > temp_maxtoday){\n                    temp_maxtoday = context.temp[i];\n                    time_maxtoday = context.time[i];\n                    ischanged = true;\n                }\n            }\n        }\n        \n        if (ischanged){\n            context.time_maxtoday = time_maxtoday;\n        }\n        \n        msg.payload = context.time_maxtoday;\n        \n        \n    } else if (return_timemintonight){\n\n        temp_mintonight = 100;\n        var ischanged = false;\n        \n        for(var i = 0;  i<40; i++){\n            if (context.time[i] > context.sunset && context.time[i] < context.sunset + 4.32e+7){ // sunset + 12hrs\n                if (context.temp[i] < temp_mintonight){\n                    temp_mintonight = context.temp[i];\n                    time_mintonight = context.time[i];\n                    ischanged = true;\n                }\n            }\n        }\n        \n        if (ischanged){\n            context.time_mintonight = time_mintonight;\n        } \n        \n        msg.payload = context.time_mintonight;\n        \n    } else if (return_timemaxtomorrow){\n        \n        temp_maxtomorrow = -100;\n        var ischanged = false;\n        \n        for(var i = 0;  i<40; i++){\n            if (context.time[i] > context.sunset + 4.32e+7 && context.time[i] < context.sunset + 8.64e+7){ // sunset+12hrs --> sunset+24hrs\n                if (context.temp[i] > temp_maxtomorrow){\n                    temp_maxtomorrow = context.temp[i];\n                    time_maxtomorrow = context.time[i];\n                    ischanged = true;\n                }\n            }\n        }\n        \n        if (ischanged){\n            context.time_maxtomorrow = time_maxtomorrow;\n        } \n        \n        msg.payload = context.time_maxtomorrow;\n        \n        \n    } else if (return_timemintomorrownight){\n        \n        temp_mintomorrownight = 100;\n        var ischanged = false;\n        \n        for(var i = 0;  i<40; i++){\n            if (context.time[i] > context.sunset + 8.64e+7 && context.time[i] < context.sunset + 1.296e+8){ // sunset+24hrs --> sunset+36hrs\n                if (context.temp[i] < temp_mintomorrownight){\n                    temp_mintomorrownight = context.temp[i];\n                    time_mintomorrownight = context.time[i];\n                    ischanged = true;\n                }\n            }\n        }\n        \n        if (ischanged){\n            context.time_mintomorrownight = time_mintomorrownight;\n        } \n        \n        msg.payload = context.time_mintomorrownight;\n        \n        \n    }\n    \n    context.fore_bool = false;\n    context.sunrise_bool = false;\n    context.sunset_bool = false;\n\n    return msg;\n    \n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\ncontext.sentcommand = context.sentcommand || 0;\ncontext.pending = context.pending || 0;\n\ncontext.sentcommand = 0;\ncontext.pending = 0;",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1240,
        "wires": [
            [
                "e3c277e520b01264"
            ]
        ]
    },
    {
        "id": "8e1bca83be2a35ae",
        "type": "function",
        "z": "697d1a9fadff8923",
        "name": "Find Timemin Tomorrow Night",
        "func": "var return_timemaxtoday = 0;\nvar return_timemintonight = 0;\nvar return_timemaxtomorrow = 0;\nvar return_timemintomorrownight = 1;\n\ncontext.fore_bool = context.fore_bool || false;\ncontext.temp = context.temp || [];\ncontext.time = context.time || [];\ncontext.sunrise_bool = context.sunrise_bool || false;\ncontext.sunrise = context.sunrise || 0;\ncontext.sunset_bool = context.sunset_bool || false;\ncontext.sunset = context.sunset || 0;\n\nvar tempstore = []\nvar timestore = []\ncontext.temp_maxtoday = context.temp_maxtoday;\ncontext.time_maxtoday = context.time_maxtoday;\ncontext.temp_mintonight = context.temp_mintonight;\ncontext.time_mintonight = context.time_mintonight;\ncontext.temp_maxtomorrow = context.temp_maxtomorrow;\ncontext.time_maxtomorrow = context.time_maxtomorrow;\ncontext.temp_mintomorrownight = context.temp_mintomorrownight;\ncontext.time_mintomorrownight = context.time_mintomorrownight;\n\nvar temp_maxtoday\nvar time_maxtoday\nvar temp_mintonight\nvar time_mintonight\nvar temp_maxtomorrow\nvar time_maxtomorrow\nvar temp_mintomorrownight\nvar time_mintomorrownight\n\nif (msg.sunrise){\n    context.sunrise = msg.sunrise * 1000;\n    context.sunrise_bool = true;\n} else if (msg.sunset){\n    context.sunset = msg.sunset * 1000;\n    context.sunset_bool = true;\n} else if (msg.payload){\n    for(var i = 0;  i<40; i++) {\n        tempstore[i] = msg.payload[i].main.temp\n        timestore[i] = msg.payload[i].dt * 1000;\n    }\n    context.temp = tempstore;\n    context.time = timestore;\n    context.fore_bool = true;\n}\n\n\nif (context.fore_bool && context.sunrise_bool && context.sunset_bool){\n    \n    if (return_timemaxtoday){\n        \n        temp_maxtoday = -100;\n        var ischanged = false;\n        \n        for(var i = 0;  i<40; i++){\n            if (context.time[i] > context.sunrise && context.time[i] < context.sunset){\n                if (context.temp[i] > temp_maxtoday){\n                    temp_maxtoday = context.temp[i];\n                    time_maxtoday = context.time[i];\n                    ischanged = true;\n                }\n            }\n        }\n        \n        if (ischanged){\n            context.time_maxtoday = time_maxtoday;\n        }\n        \n        msg.payload = context.time_maxtoday;\n        \n        \n    } else if (return_timemintonight){\n\n        temp_mintonight = 100;\n        var ischanged = false;\n        \n        for(var i = 0;  i<40; i++){\n            if (context.time[i] > context.sunset && context.time[i] < context.sunset + 4.32e+7){ // sunset + 12hrs\n                if (context.temp[i] < temp_mintonight){\n                    temp_mintonight = context.temp[i];\n                    time_mintonight = context.time[i];\n                    ischanged = true;\n                }\n            }\n        }\n        \n        if (ischanged){\n            context.time_mintonight = time_mintonight;\n        } \n        \n        msg.payload = context.time_mintonight;\n        \n    } else if (return_timemaxtomorrow){\n        \n        temp_maxtomorrow = -100;\n        var ischanged = false;\n        \n        for(var i = 0;  i<40; i++){\n            if (context.time[i] > context.sunset + 4.32e+7 && context.time[i] < context.sunset + 8.64e+7){ // sunset+12hrs --> sunset+24hrs\n                if (context.temp[i] > temp_maxtomorrow){\n                    temp_maxtomorrow = context.temp[i];\n                    time_maxtomorrow = context.time[i];\n                    ischanged = true;\n                }\n            }\n        }\n        \n        if (ischanged){\n            context.time_maxtomorrow = time_maxtomorrow;\n        } \n        \n        msg.payload = context.time_maxtomorrow;\n        \n        \n    } else if (return_timemintomorrownight){\n        \n        temp_mintomorrownight = 100;\n        var ischanged = false;\n        \n        for(var i = 0;  i<40; i++){\n            if (context.time[i] > context.sunset + 8.64e+7 && context.time[i] < context.sunset + 1.296e+8){ // sunset+24hrs --> sunset+36hrs\n                if (context.temp[i] < temp_mintomorrownight){\n                    temp_mintomorrownight = context.temp[i];\n                    time_mintomorrownight = context.time[i];\n                    ischanged = true;\n                }\n            }\n        }\n        \n        if (ischanged){\n            context.time_mintomorrownight = time_mintomorrownight;\n        } \n        \n        msg.payload = context.time_mintomorrownight;\n        \n        \n    }\n    \n    context.fore_bool = false;\n    context.sunrise_bool = false;\n    context.sunset_bool = false;\n\n    return msg;\n    \n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\ncontext.sentcommand = context.sentcommand || 0;\ncontext.pending = context.pending || 0;\n\ncontext.sentcommand = 0;\ncontext.pending = 0;",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 1340,
        "wires": [
            [
                "36ae01b62e19acf7"
            ]
        ]
    },
    {
        "id": "5fe4b356b354a853",
        "type": "influxdb out",
        "z": "697d1a9fadff8923",
        "influxdb": "56e8016bbfd59dd7",
        "name": "Forecast Weather",
        "measurement": "timemax_today",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1270,
        "y": 1040,
        "wires": []
    },
    {
        "id": "977a3178e3d322ae",
        "type": "influxdb out",
        "z": "697d1a9fadff8923",
        "influxdb": "56e8016bbfd59dd7",
        "name": "Forecast Weather",
        "measurement": "timemin_tonight",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1270,
        "y": 1140,
        "wires": []
    },
    {
        "id": "e3c277e520b01264",
        "type": "influxdb out",
        "z": "697d1a9fadff8923",
        "influxdb": "56e8016bbfd59dd7",
        "name": "Forecast Weather",
        "measurement": "timemax_tomorrow",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1290,
        "y": 1240,
        "wires": []
    },
    {
        "id": "36ae01b62e19acf7",
        "type": "influxdb out",
        "z": "697d1a9fadff8923",
        "influxdb": "56e8016bbfd59dd7",
        "name": "Forecast Weather",
        "measurement": "timemin_tomorrownight",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1330,
        "y": 1340,
        "wires": []
    },
    {
        "id": "84b55487fb715495",
        "type": "function",
        "z": "697d1a9fadff8923",
        "name": "Find Cloudmax Today",
        "func": "var return_cloudmaxtoday = 1;\nvar return_cloudmaxtomorrow = 0;\n\ncontext.fore_bool = context.fore_bool || false;\ncontext.cloud = context.cloud || [];\ncontext.time = context.time || [];\n\ncontext.sunrise_bool = context.sunrise_bool || false;\ncontext.sunrise = context.sunrise || 0;\ncontext.sunset_bool = context.sunset_bool || false;\ncontext.sunset = context.sunset || 0;\n\nvar cloudstore = []\nvar timestore = []\ncontext.cloud_maxtoday = context.cloud_maxtoday;\ncontext.time_maxtoday = context.time_maxtoday;\ncontext.cloud_maxtomorrow = context.cloud_maxtomorrow;\ncontext.time_maxtomorrow = context.time_maxtomorrow;\n\nvar cloud_maxtoday\nvar time_maxtoday\nvar cloud_maxtomorrow\nvar time_maxtomorrow\n\nif (msg.sunrise){\n    context.sunrise = msg.sunrise * 1000;\n    context.sunrise_bool = true;\n} else if (msg.sunset){\n    context.sunset = msg.sunset * 1000;\n    context.sunset_bool = true;\n} else if (msg.payload){\n    for(var i = 0;  i<40; i++) {\n        cloudstore[i] = msg.payload[i].clouds.all\n        timestore[i] = msg.payload[i].dt * 1000;\n    }\n    context.cloud = cloudstore;\n    context.time = timestore;\n    context.fore_bool = true;\n}\n\n\nif (context.fore_bool && context.sunrise_bool && context.sunset_bool){\n    \n    if (return_cloudmaxtoday){\n        \n        cloud_maxtoday = 0;\n        var ischanged = false;\n        \n        for(var i = 0;  i<40; i++){\n            if (context.time[i] > context.sunrise && context.time[i] < context.sunset){\n                if (context.cloud[i] > cloud_maxtoday){\n                    cloud_maxtoday = context.cloud[i];\n                    time_maxtoday = context.time[i];\n                    ischanged = true;\n                }\n            }\n        }\n        \n        if (ischanged){\n            context.cloud_maxtoday = cloud_maxtoday;\n        } else{\n            context.cloud_maxtoday = 0;\n        }\n        \n        msg.payload = context.cloud_maxtoday;\n        \n        \n    } else if (return_cloudmaxtomorrow){\n        \n        cloud_maxtomorrow = 0;\n        var ischanged = false;\n        \n        for(var i = 0;  i<40; i++){\n            if (context.time[i] > context.sunrise + 8.64e+7 && context.time[i] < context.sunset + 8.64e+7){ // sunset+12hrs --> sunset+24hrs\n                if (context.cloud[i] > cloud_maxtomorrow){\n                    cloud_maxtomorrow = context.cloud[i];\n                    time_maxtomorrow = context.time[i];\n                    ischanged = true;\n                }\n            }\n        }\n        \n        if (ischanged){\n            context.cloud_maxtomorrow = cloud_maxtomorrow;\n        } \n        \n        msg.payload = context.cloud_maxtomorrow;\n        \n    }\n    \n    context.fore_bool = false;\n    context.sunrise_bool = false;\n    context.sunset_bool = false;\n\n    return msg;\n    \n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\ncontext.sentcommand = context.sentcommand || 0;\ncontext.pending = context.pending || 0;\n\ncontext.sentcommand = 0;\ncontext.pending = 0;",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1440,
        "wires": [
            [
                "753385c1af5eecbf"
            ]
        ]
    },
    {
        "id": "753385c1af5eecbf",
        "type": "influxdb out",
        "z": "697d1a9fadff8923",
        "influxdb": "56e8016bbfd59dd7",
        "name": "Forecast Weather",
        "measurement": "cloudmax_today",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1270,
        "y": 1440,
        "wires": []
    },
    {
        "id": "72274739cbcd4e2c",
        "type": "function",
        "z": "697d1a9fadff8923",
        "name": "Find Cloudmax Tomorrow",
        "func": "var return_cloudmaxtoday = 0;\nvar return_cloudmaxtomorrow = 1;\n\ncontext.fore_bool = context.fore_bool || false;\ncontext.cloud = context.cloud || [];\ncontext.time = context.time || [];\ncontext.sunrise_bool = context.sunrise_bool || false;\ncontext.sunrise = context.sunrise || 0;\ncontext.sunset_bool = context.sunset_bool || false;\ncontext.sunset = context.sunset || 0;\n\nvar cloudstore = []\nvar timestore = []\ncontext.cloud_maxtoday = context.cloud_maxtoday;\ncontext.time_maxtoday = context.time_maxtoday;\ncontext.cloud_maxtomorrow = context.cloud_maxtomorrow;\ncontext.time_maxtomorrow = context.time_maxtomorrow;\n\nvar cloud_maxtoday\nvar time_maxtoday\nvar cloud_maxtomorrow\nvar time_maxtomorrow\n\nif (msg.sunrise){\n    context.sunrise = msg.sunrise * 1000;\n    context.sunrise_bool = true;\n} else if (msg.sunset){\n    context.sunset = msg.sunset * 1000;\n    context.sunset_bool = true;\n} else if (msg.payload){\n    for(var i = 0;  i<40; i++) {\n        cloudstore[i] = msg.payload[i].clouds.all\n        timestore[i] = msg.payload[i].dt * 1000;\n    }\n    context.cloud = cloudstore;\n    context.time = timestore;\n    context.fore_bool = true;\n}\n\n\nif (context.fore_bool && context.sunrise_bool && context.sunset_bool){\n    \n    if (return_cloudmaxtoday){\n        \n        cloud_maxtoday = 0;\n        var ischanged = false;\n        \n        for(var i = 0;  i<40; i++){\n            if (context.time[i] > context.sunrise && context.time[i] < context.sunset){\n                if (context.cloud[i] > cloud_maxtoday){\n                    cloud_maxtoday = context.cloud[i];\n                    time_maxtoday = context.time[i];\n                    ischanged = true;\n                }\n            }\n        }\n        \n        if (ischanged){\n            context.cloud_maxtoday = cloud_maxtoday;\n        }\n        \n        msg.payload = context.cloud_maxtoday;\n        \n        \n    } else if (return_cloudmaxtomorrow){\n        \n        cloud_maxtomorrow = 0;\n        var ischanged = false;\n        \n        for(var i = 0;  i<40; i++){\n            if (context.time[i] > context.sunrise + 8.64e+7 && context.time[i] < context.sunset + 8.64e+7){ // sunset+12hrs --> sunset+24hrs\n                if (context.cloud[i] > cloud_maxtomorrow){\n                    cloud_maxtomorrow = context.cloud[i];\n                    time_maxtomorrow = context.time[i];\n                    ischanged = true;\n                }\n            }\n        }\n        \n        if (ischanged){\n            context.cloud_maxtomorrow = cloud_maxtomorrow;\n        } else{\n            context.cloud_maxtomorrow = 0;\n        }\n        \n        msg.payload = context.cloud_maxtomorrow;\n        \n    }\n    \n    context.fore_bool = false;\n    context.sunrise_bool = false;\n    context.sunset_bool = false;\n\n    return msg;\n    \n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\ncontext.sentcommand = context.sentcommand || 0;\ncontext.pending = context.pending || 0;\n\ncontext.sentcommand = 0;\ncontext.pending = 0;",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1480,
        "wires": [
            [
                "bf52ebead4587cee"
            ]
        ]
    },
    {
        "id": "bf52ebead4587cee",
        "type": "influxdb out",
        "z": "697d1a9fadff8923",
        "influxdb": "56e8016bbfd59dd7",
        "name": "Forecast Weather",
        "measurement": "cloudmax_tomorrow",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1290,
        "y": 1480,
        "wires": []
    },
    {
        "id": "c3e9b2a02d5e54a1",
        "type": "comment",
        "z": "697d1a9fadff8923",
        "name": "Temperature Parsing",
        "info": "",
        "x": 1050,
        "y": 960,
        "wires": []
    },
    {
        "id": "7e1b4fa2333e11de",
        "type": "comment",
        "z": "697d1a9fadff8923",
        "name": "Cloud Parsing",
        "info": "",
        "x": 1030,
        "y": 1400,
        "wires": []
    },
    {
        "id": "ce6b5732f47f18db",
        "type": "comment",
        "z": "697d1a9fadff8923",
        "name": "Type of Day",
        "info": "",
        "x": 170,
        "y": 1540,
        "wires": []
    },
    {
        "id": "4abbdcf9ace6632e",
        "type": "influxdb in",
        "z": "697d1a9fadff8923",
        "influxdb": "56e8016bbfd59dd7",
        "name": "Read tmax_today",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 510,
        "y": 1580,
        "wires": [
            [
                "1ff6795014b2ac0a"
            ]
        ]
    },
    {
        "id": "86ebf4b92512daa9",
        "type": "inject",
        "z": "697d1a9fadff8923",
        "name": "Fetch",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": "60",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 1580,
        "wires": [
            [
                "0713fdbf8b08778c"
            ]
        ]
    },
    {
        "id": "0713fdbf8b08778c",
        "type": "function",
        "z": "697d1a9fadff8923",
        "name": "Query tmax_today",
        "func": "\nmsg.query = 'select * from \"tmax_today\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1580,
        "wires": [
            [
                "4abbdcf9ace6632e"
            ]
        ]
    },
    {
        "id": "1ff6795014b2ac0a",
        "type": "change",
        "z": "697d1a9fadff8923",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "tmax_today",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 1580,
        "wires": [
            [
                "8220b56f4147c2cc"
            ]
        ]
    },
    {
        "id": "8220b56f4147c2cc",
        "type": "function",
        "z": "697d1a9fadff8923",
        "name": "ToD Today Logic",
        "func": "// 1 winter\n// 2 summer\n// 3 fall/spring\n\ncontext.tmax_today_bool = context.tmax_today_bool || false;\ncontext.tmax_today = context.tmax_today || 0;\n\n\n\n// define temperature ranges for summer, winter and fall/spring days\n// SUMMER (GOAL: keep hot air out, keep cold air in)\nT_min_summer = 26.7; // lowest max day temperature for a summer day (C) (80F)\n\n// SUMMER (GOAL: keep hot air out, keep cold air in)\nT_min_summer = 26.7; // lowest max day temperature for a summer day (C) (80F)\n\n// WINTER (GOAL: keep cold air out, keep hot air in)\nT_max_winter = 20.5; // highest max day temperature for a winter day (C) (69F)\n\n// FALL/SPRING (GOAL: keep cold air out at night, let warm air circulate in during the day)\n//T_max_fall_spring = T_min_summer; // highest max day temperature for a fall/spring day (C)\n//T_min_fall_spring = T_max_winter; // lowest max day temperature for a fall/spring day (C)\n\n\nif (msg.tmax_today){\n    context.tmax_today = msg.tmax_today;\n    context.tmax_today_bool = true;\n}\n\nif (context.tmax_today_bool){\n    // determine whether today is summer, winter, or fall/spring day\n    // execute after midnight (maybe execute again after a few hours to update forecasted data)\n\n    if (context.tmax_today <= T_max_winter) { // if winter day…\n    \tmsg.payload = 1; // assign state = 1 (winter)\n    } else if (context.tmax_today >= T_min_summer) { // if summer day… \n    \tmsg.payload = 2; // assign state = 2 (summer)\n    } else if (T_max_winter < context.tmax_today && context.tmax_today < T_min_summer ) { // if fall/spring day…\n    \tmsg.payload = 3; // assign state = 3 (fall/spring)\n    }\n\n    \n    return msg;\n    \n    \n}\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\ncontext.sentcommand = context.sentcommand || 0;\ncontext.pending = context.pending || 0;\n\ncontext.sentcommand = 0;\ncontext.pending = 0;",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 1580,
        "wires": [
            [
                "9294f29a01bfb816"
            ]
        ]
    },
    {
        "id": "f0c0137c705807f8",
        "type": "influxdb in",
        "z": "697d1a9fadff8923",
        "influxdb": "56e8016bbfd59dd7",
        "name": "Read tmax_tomorrow",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 540,
        "y": 1620,
        "wires": [
            [
                "8f022285c5b43308"
            ]
        ]
    },
    {
        "id": "27978d708cad6156",
        "type": "inject",
        "z": "697d1a9fadff8923",
        "name": "Fetch",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": "60",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 1620,
        "wires": [
            [
                "11e287220d3cdbe8"
            ]
        ]
    },
    {
        "id": "11e287220d3cdbe8",
        "type": "function",
        "z": "697d1a9fadff8923",
        "name": "Query tmax_tomorrow",
        "func": "\nmsg.query = 'select * from \"tmax_tomorrow\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 1620,
        "wires": [
            [
                "f0c0137c705807f8"
            ]
        ]
    },
    {
        "id": "8f022285c5b43308",
        "type": "change",
        "z": "697d1a9fadff8923",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "tmax_tomorrow",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 1620,
        "wires": [
            [
                "ad0a662b953f94c4"
            ]
        ]
    },
    {
        "id": "ad0a662b953f94c4",
        "type": "function",
        "z": "697d1a9fadff8923",
        "name": "ToD Tomorrow Logic",
        "func": "// 1 winter\n// 2 summer\n// 3 fall/spring\n\ncontext.tmax_tomorrow_bool = context.tmax_tomorrow_bool || false;\ncontext.tmax_tomorrow = context.tmax_tomorrow || 0;\n\n\n\n// define temperature ranges for summer, winter and fall/spring days\n// SUMMER (GOAL: keep hot air out, keep cold air in)\nT_min_summer = 26.7; // lowest max day temperature for a summer day (C) (80F)\n\n// SUMMER (GOAL: keep hot air out, keep cold air in)\nT_min_summer = 26.7; // lowest max day temperature for a summer day (C) (80F)\n\n// WINTER (GOAL: keep cold air out, keep hot air in)\nT_max_winter = 20.5; // highest max day temperature for a winter day (C) (69F)\n\n// FALL/SPRING (GOAL: keep cold air out at night, let warm air circulate in during the day)\n//T_max_fall_spring = T_min_summer; // highest max day temperature for a fall/spring day (C)\n//T_min_fall_spring = T_max_winter; // lowest max day temperature for a fall/spring day (C)\n\n\nif (msg.tmax_tomorrow){\n    context.tmax_tomorrow = msg.tmax_tomorrow;\n    context.tmax_tomorrow_bool = true;\n}\n\nif (context.tmax_tomorrow_bool){\n    // determine whether today is summer, winter, or fall/spring day\n    // execute after midnight (maybe execute again after a few hours to update forecasted data)\n\n    if (context.tmax_tomorrow <= T_max_winter) { // if winter day…\n    \tmsg.payload = 1; // assign state = 1 (winter)\n    } else if (context.tmax_tomorrow >= T_min_summer) { // if summer day… \n    \tmsg.payload = 2; // assign state = 2 (summer)\n    } else if (T_max_winter < context.tmax_tomorrow && context.tmax_tomorrow < T_min_summer ) { // if fall/spring day…\n    \tmsg.payload = 3; // assign state = 3 (fall/spring)\n    }\n\n    \n    return msg;\n    \n    \n}\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\ncontext.sentcommand = context.sentcommand || 0;\ncontext.pending = context.pending || 0;\n\ncontext.sentcommand = 0;\ncontext.pending = 0;",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 1620,
        "wires": [
            [
                "4b7ec7fd7b5e75a8"
            ]
        ]
    },
    {
        "id": "9294f29a01bfb816",
        "type": "influxdb out",
        "z": "697d1a9fadff8923",
        "influxdb": "56e8016bbfd59dd7",
        "name": "ToD_today",
        "measurement": "ToD_today",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1090,
        "y": 1580,
        "wires": []
    },
    {
        "id": "4b7ec7fd7b5e75a8",
        "type": "influxdb out",
        "z": "697d1a9fadff8923",
        "influxdb": "56e8016bbfd59dd7",
        "name": "ToD_tomorrow",
        "measurement": "ToD_tomorrow",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1200,
        "y": 1620,
        "wires": []
    },
    {
        "id": "2050ae8bef93b17a",
        "type": "ping",
        "z": "697d1a9fadff8923",
        "protocol": "Automatic",
        "mode": "timed",
        "name": "Ping Curtain1",
        "host": "192.168.2.104",
        "timer": "10",
        "inputs": 0,
        "x": 730,
        "y": 280,
        "wires": [
            [
                "b08cbe2a682bf8df"
            ]
        ]
    },
    {
        "id": "b08cbe2a682bf8df",
        "type": "function",
        "z": "697d1a9fadff8923",
        "name": "isPresent",
        "func": "context.gotping = context.gotping || 1;\ncontext.pingfail = context.pingfail || 0;\n\nif (msg.payload){\n    context.gotping = 1;\n    context.pingfail = 0;\n}\nelse {\n    context.pingfail += 1;\n    if (context.pingfail > 1){\n        context.gotping = 0;\n    }\n}\n\nmsg.payload = context.gotping;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 280,
        "wires": [
            [
                "35796b9bcc7b7c06"
            ]
        ]
    },
    {
        "id": "35796b9bcc7b7c06",
        "type": "influxdb out",
        "z": "697d1a9fadff8923",
        "influxdb": "1a57ca2cbb644fba",
        "name": "Devices_Curtain1",
        "measurement": "device_curtain1",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1090,
        "y": 280,
        "wires": []
    },
    {
        "id": "085ff3aa3d53e1ed",
        "type": "ping",
        "z": "697d1a9fadff8923",
        "protocol": "Automatic",
        "mode": "timed",
        "name": "Ping Window1",
        "host": "192.168.2.106",
        "timer": "10",
        "inputs": 0,
        "x": 730,
        "y": 320,
        "wires": [
            [
                "3a4843a219ddbc99"
            ]
        ]
    },
    {
        "id": "3a4843a219ddbc99",
        "type": "function",
        "z": "697d1a9fadff8923",
        "name": "isPresent",
        "func": "context.gotping = context.gotping || 1;\ncontext.pingfail = context.pingfail || 0;\n\nif (msg.payload){\n    context.gotping = 1;\n    context.pingfail = 0;\n}\nelse {\n    context.pingfail += 1;\n    if (context.pingfail > 1){\n        context.gotping = 0;\n    }\n}\n\nmsg.payload = context.gotping;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 320,
        "wires": [
            [
                "c1b9e395e8121c40"
            ]
        ]
    },
    {
        "id": "c1b9e395e8121c40",
        "type": "influxdb out",
        "z": "697d1a9fadff8923",
        "influxdb": "1a57ca2cbb644fba",
        "name": "Devices_Window1",
        "measurement": "device_window1",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1090,
        "y": 320,
        "wires": []
    },
    {
        "id": "07278c2c3401f62a",
        "type": "change",
        "z": "697d1a9fadff8923",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.clouds",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 860,
        "wires": [
            [
                "ef03aea12584af59"
            ]
        ]
    },
    {
        "id": "ef03aea12584af59",
        "type": "influxdb out",
        "z": "697d1a9fadff8923",
        "influxdb": "cfe68d916a9a6da8",
        "name": "cloud_now",
        "measurement": "cloud_now",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 630,
        "y": 860,
        "wires": []
    },
    {
        "id": "9e9d5399a7c24c29",
        "type": "mqtt in",
        "z": "697d1a9fadff8923",
        "name": "Points/CURTAIN1",
        "topic": "points/298512/CURTAIN1",
        "qos": "2",
        "datatype": "json",
        "broker": "bf1930d814d07423",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1050,
        "y": 480,
        "wires": [
            [
                "27fdbbcaa3febc3d"
            ]
        ]
    },
    {
        "id": "fb2c223a4c9376b8",
        "type": "influxdb out",
        "z": "697d1a9fadff8923",
        "influxdb": "9fd4708b46e43559",
        "name": "Points",
        "measurement": "points/298512/CURTAIN1",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1330,
        "y": 480,
        "wires": []
    },
    {
        "id": "27fdbbcaa3febc3d",
        "type": "json",
        "z": "697d1a9fadff8923",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 1210,
        "y": 480,
        "wires": [
            [
                "fb2c223a4c9376b8"
            ]
        ]
    },
    {
        "id": "bac2c320062ded83",
        "type": "comment",
        "z": "697d1a9fadff8923",
        "name": "Points Inputs",
        "info": "",
        "x": 1030,
        "y": 440,
        "wires": []
    },
    {
        "id": "b4f430ab85a8a9be",
        "type": "kasa",
        "z": "697d1a9fadff8923",
        "name": "Smart Plug",
        "device": "192.168.2.116",
        "interval": "60000",
        "eventInterval": "15000",
        "payload": "getMeterInfo",
        "payloadType": "info",
        "debug": false,
        "x": 310,
        "y": 600,
        "wires": [
            [
                "45d4dab7bab4320e"
            ]
        ]
    },
    {
        "id": "45d4dab7bab4320e",
        "type": "json",
        "z": "697d1a9fadff8923",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 450,
        "y": 600,
        "wires": [
            [
                "d76b5925350f29c2"
            ]
        ]
    },
    {
        "id": "035ebbaa607a81f8",
        "type": "influxdb out",
        "z": "697d1a9fadff8923",
        "influxdb": "293bbb4decc23217",
        "name": "Power1",
        "measurement": "POWER1",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 760,
        "y": 600,
        "wires": []
    },
    {
        "id": "d76b5925350f29c2",
        "type": "change",
        "z": "697d1a9fadff8923",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.power",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 600,
        "wires": [
            [
                "035ebbaa607a81f8"
            ]
        ]
    },
    {
        "id": "f0362472201f6fe4",
        "type": "inject",
        "z": "697d1a9fadff8923",
        "name": "Fetch",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": "60",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 170,
        "y": 600,
        "wires": [
            [
                "b4f430ab85a8a9be"
            ]
        ]
    },
    {
        "id": "0644ca4fbf2b74bf",
        "type": "mqtt in",
        "z": "697d1a9fadff8923",
        "name": "CO2",
        "topic": "tele//CO2",
        "qos": "2",
        "datatype": "json",
        "broker": "bf1930d814d07423",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 480,
        "wires": [
            [
                "212b464134ec40c5"
            ]
        ]
    },
    {
        "id": "30abca9bca7d8965",
        "type": "influxdb out",
        "z": "697d1a9fadff8923",
        "influxdb": "989ed5dd8733dd49",
        "name": "CO2",
        "measurement": "tele//CO2",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 430,
        "y": 480,
        "wires": []
    },
    {
        "id": "212b464134ec40c5",
        "type": "json",
        "z": "697d1a9fadff8923",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 290,
        "y": 480,
        "wires": [
            [
                "30abca9bca7d8965"
            ]
        ]
    },
    {
        "id": "c5e15caf556ad5f6",
        "type": "mqtt in",
        "z": "697d1a9fadff8923",
        "name": "TVOC",
        "topic": "tele//TVOC",
        "qos": "2",
        "datatype": "json",
        "broker": "bf1930d814d07423",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 540,
        "wires": [
            [
                "7e1768fc3da3dd8b"
            ]
        ]
    },
    {
        "id": "cf81d2c6eca1f1f2",
        "type": "influxdb out",
        "z": "697d1a9fadff8923",
        "influxdb": "989ed5dd8733dd49",
        "name": "TVOC",
        "measurement": "tele//TVOC",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 430,
        "y": 540,
        "wires": []
    },
    {
        "id": "7e1768fc3da3dd8b",
        "type": "json",
        "z": "697d1a9fadff8923",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 290,
        "y": 540,
        "wires": [
            [
                "cf81d2c6eca1f1f2"
            ]
        ]
    },
    {
        "id": "dbee86ce3d339026",
        "type": "ping",
        "z": "697d1a9fadff8923",
        "protocol": "Automatic",
        "mode": "timed",
        "name": "Ping Michael",
        "host": "192.168.2.119",
        "timer": "10",
        "inputs": 0,
        "x": 1030,
        "y": 600,
        "wires": [
            [
                "a31a983b8e162f90"
            ]
        ]
    },
    {
        "id": "a31a983b8e162f90",
        "type": "function",
        "z": "697d1a9fadff8923",
        "name": "isPresent",
        "func": "context.gotping = context.gotping || 1;\ncontext.pingfail = context.pingfail || 0;\n\nif (msg.payload){\n    context.gotping = 1;\n    context.pingfail = 0;\n}\nelse {\n    context.pingfail += 1;\n    if (context.pingfail > 1){\n        context.gotping = 0;\n    }\n}\n\nmsg.payload = context.gotping;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 600,
        "wires": [
            [
                "d7fa44b9adcaa881"
            ]
        ]
    },
    {
        "id": "d7fa44b9adcaa881",
        "type": "influxdb out",
        "z": "697d1a9fadff8923",
        "influxdb": "dd727cb5a16b6a6a",
        "name": "Devices_michael_phone",
        "measurement": "devices_michael_phone",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1370,
        "y": 600,
        "wires": []
    },
    {
        "id": "c0f06c192e45c4cd",
        "type": "comment",
        "z": "697d1a9fadff8923",
        "name": "People Presence",
        "info": "",
        "x": 1040,
        "y": 560,
        "wires": []
    },
    {
        "id": "40dd5a1e530be9bb",
        "type": "tradfri-monitor",
        "z": "697d1a9fadff8923",
        "gateway": "3a288b3904aa5cb9",
        "name": "Curtain",
        "x": 150,
        "y": 360,
        "wires": [
            [
                "9a0b5711b95ae430"
            ]
        ]
    },
    {
        "id": "9a0b5711b95ae430",
        "type": "change",
        "z": "697d1a9fadff8923",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.blind.position",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 360,
        "wires": [
            [
                "64bbd273876add44"
            ]
        ]
    },
    {
        "id": "980bdd3d40839142",
        "type": "mqtt out",
        "z": "fd9893a00d3f6cdf",
        "name": "Command_Door1",
        "topic": "command/door1",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bf1930d814d07423",
        "x": 1330,
        "y": 220,
        "wires": []
    },
    {
        "id": "efd780c317339124",
        "type": "influxdb out",
        "z": "fd9893a00d3f6cdf",
        "influxdb": "dfd865d50087ae91",
        "name": "c_door1",
        "measurement": "door1",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1300,
        "y": 180,
        "wires": []
    },
    {
        "id": "d213b35115790d51",
        "type": "mqtt out",
        "z": "fd9893a00d3f6cdf",
        "name": "Command_Window1",
        "topic": "command/window1",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bf1930d814d07423",
        "x": 1440,
        "y": 820,
        "wires": []
    },
    {
        "id": "ab97c0df923c0ea0",
        "type": "influxdb out",
        "z": "fd9893a00d3f6cdf",
        "influxdb": "41a13a14d732951f",
        "name": "c_window1",
        "measurement": "window1",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1410,
        "y": 780,
        "wires": []
    },
    {
        "id": "12668090e78472d8",
        "type": "mqtt out",
        "z": "fd9893a00d3f6cdf",
        "name": "Command_Curtain1",
        "topic": "command/curtain1",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bf1930d814d07423",
        "x": 1220,
        "y": 1300,
        "wires": []
    },
    {
        "id": "6ac5a390b1744335",
        "type": "influxdb out",
        "z": "fd9893a00d3f6cdf",
        "influxdb": "07299e0d42195927",
        "name": "c_curtain1",
        "measurement": "curtain1",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1190,
        "y": 1260,
        "wires": []
    },
    {
        "id": "92d381729729bf48",
        "type": "influxdb in",
        "z": "fd9893a00d3f6cdf",
        "influxdb": "8181f6d9dc076d46",
        "name": "Read TEMP1",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 480,
        "y": 660,
        "wires": [
            [
                "c5b36855c077e55f"
            ]
        ]
    },
    {
        "id": "872fa0e3ed9b4687",
        "type": "function",
        "z": "fd9893a00d3f6cdf",
        "name": "Query TEMP1",
        "func": "\nmsg.query = 'select * from \"tele/9c3b5e/TEMP1\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 660,
        "wires": [
            [
                "92d381729729bf48"
            ]
        ]
    },
    {
        "id": "f9d75380f485280f",
        "type": "influxdb in",
        "z": "fd9893a00d3f6cdf",
        "influxdb": "cfe68d916a9a6da8",
        "name": "Read current_weather",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 540,
        "y": 700,
        "wires": [
            [
                "bbc78019dd70e432"
            ]
        ]
    },
    {
        "id": "e121b42e5901793f",
        "type": "function",
        "z": "fd9893a00d3f6cdf",
        "name": "Query current_weather",
        "func": "\nmsg.query = 'select * from \"current_weather\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 700,
        "wires": [
            [
                "f9d75380f485280f"
            ]
        ]
    },
    {
        "id": "c5b36855c077e55f",
        "type": "change",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "temp1",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 660,
        "wires": [
            [
                "6f7500ab37937091",
                "dba9954272c463a2"
            ]
        ]
    },
    {
        "id": "bbc78019dd70e432",
        "type": "change",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "weath",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 700,
        "wires": [
            [
                "6f7500ab37937091",
                "dba9954272c463a2"
            ]
        ]
    },
    {
        "id": "6f7500ab37937091",
        "type": "function",
        "z": "fd9893a00d3f6cdf",
        "name": "Window Logic",
        "func": "// 0 is closed\n// 1 is open\n// 2 is option\n\ncontext.temp1_bool = context.temp1_bool || false;\ncontext.temp1 = context.temp1 || 0;\ncontext.weath_bool = context.weath_bool || false;\ncontext.weath = context.weath || 0;\ncontext.fore_bool = context.fore_bool || false;\ncontext.fore = context.fore || 0;\ncontext.ToD_today_bool = context.ToD_today_bool || false;\ncontext.ToD_today = context.ToD_today;\ncontext.ToD_tomorrow_bool = context.ToD_tomorrow_bool || false;\ncontext.ToD_tomorrow = context.ToD_tomorrow;\ncontext.motion_bool = context.motion_bool || false;\ncontext.motion = context.motion || 0;\ncontext.sunrise_bool = context.sunrise_bool || false;\ncontext.sunrise = context.sunrise || 0;\ncontext.sunset_bool = context.sunset_bool || false;\ncontext.sunset = context.sunset || 0;\ncontext.timenow_bool = context.timenow_bool || false;\ncontext.timenow = context.timenow || 0;\ncontext.tmin_tonight_bool = context.tmin_tonight_bool || false;\ncontext.tmin_tonight = context.tmin_tonight || 0;\ncontext.is21_bool = context.is21_bool || false;\n\n\n// WAIT FOR ALL SIGNALS TO BE RECEIVED\nif (msg.temp1){\n    context.temp1 = msg.temp1;\n    context.temp1_bool = true;\n}\n\nif (msg.weath){\n    context.weath = msg.weath;\n    context.weath_bool = true;\n}\n\nif (msg.fore){\n    context.fore = msg.fore;\n    context.fore_bool = true;\n}\n\nif (msg.ToD_today){\n    context.ToD_today = msg.ToD_today;\n    context.ToD_today_bool = true;\n}\n\nif (msg.ToD_tomorrow){\n    context.ToD_tomorrow = msg.ToD_tomorrow;\n    context.ToD_tomorrow_bool = true;\n}\n\nif (msg.tmin_tonight){\n    context.tmin_tonight = msg.tmin_tonight;\n    context.tmin_tonight_bool = true;\n}\n\nif (msg.sunrise){\n    context.sunrise = msg.sunrise * 1000;\n    context.sunrise_bool = true;\n}\n\nif (msg.sunset){\n    context.sunset = msg.sunset * 1000;\n    context.sunset_bool = true;\n}\n\nif (msg.timenow){\n    context.timenow = msg.timenow;\n    context.timenow_bool = true;\n}\n\nif (msg.motion == 0 || msg.motion == 1){\n    if (msg.motion == 1){ //if motion detected, save time\n        context.lastmotion = context.timenow;\n        context.motion = msg.motion;\n        context.motion_bool = true;\n    }\n    \n    if(context.timenow > context.lastmotion + 1.2e+6){ //if more than 20 minutes with no motion\n        context.motion = msg.motion;\n        context.motion_bool = true;\n    } else{\n        context.motion = 1;\n        context.motion_bool = true;\n    }\n}\n\n//CONSTANTS\n//WINTER--1\nvar tmax_out_ToD1 = 20.5; //max temp for a winter day       \n//SUMMER--2\nvar tmin_in_ToD2 = 20; // minimum inside temp on a summer day\nvar tmin_cool_ToD2 = 16.7; // minimum outside on a cool summer night \nvar tmin_cold_ToD2 = tmin_cold_ToD2; // minimum outside on a cold cummer night\n//FALL/SPRING--3\nvar tmin_warm_ToD3 = 25; // minimum max temp on warm day where you should open your windows in the morning\nvar tmax_in_ToD3 = 22.8; // max inside temp when it's too warm\nvar tmin_out_ToD3 = 18.3; // minimum outdoor temp when you can open your windows when it's colder outside (and it will be warmer than tmin_warm_ToD3)\nvar hour = new Date(context.timenow)\n\n\n//RUN ALGORITHM AFTER ALL SIGNALS RECEIVED\nif (context.temp1_bool && context.weath_bool && context.fore_bool && context.motion_bool && \n    context.sunrise_bool && context.sunset_bool && context.timenow_bool && context.ToD_today_bool && \n    context.ToD_tomorrow_bool && context.tmin_tonight_bool){\n    \n    if (context.motion == 0 || context.timenow < context.sunrise || hour.getHours() > 22){           //if no one is around or night\n        msg.payload = 2;        //option\n    } \n    //...if motion is detected...\n    //////////WINTER DAY///////////////\n    else {\n        if (context.ToD_today == 1){\n        \n            if (context.weath <= context.temp1) { // if it’s colder outside than inside\n    \t\t    msg.payload = 0; // close window\n    \t    } else if (context.weath >= context.temp1) { // if it’s warmer outside than inside (rare/unlikely in winter)\n    \t\t    msg.payload = 1; // open window\n    \t    }\n            \n            if (context.weath > tmax_out_ToD1) { // if it’s warmer than 69F outside, switch to fall/spring day type\n    \t\t    context.ToD_today = 3; // fall/spring day\n            }\n            \n            if (hour.getHours() >= 21 && !context.is21_bool) { // if after 9pm (ideally only execute once)\n    \t        if (context.ToD_tomorrow == 2) { // if tomorrow’s warmer than 80F\n        \t        context.ToD_today = 2; // send day state to summer\n    \t\t    } else if (context.ToD_tomorrow == 3) {\n    \t\t        context.ToD_today = 3; // send to fall/spring day type\n    \t        }\n    \t        context.is21_bool = true;\n            }\n        }\n        \n        //////////SUMMER DAY///////////////    \n        if (context.ToD_today == 2){ // if summer day…\n            // temperature condition\n            if (hour.getHours() < 21) { // if it’s before bed time ~9pm\n    \t        if (context.weath >= context.temp1) { // if it’s warmer outside than inside\n    \t            msg.payload = 0; // close window\n                } else if (context.weath < context.temp1) { // if it’s colder outside than inside, likely in the morning or early evening \n        \t        if (context.temp1 >= tmin_in_ToD2) { // if inside temp is greater than 68F\n                        msg.payload = 1; // open window\n        \t        }\n        \t    } else if (context.temp1 < tmin_in_ToD2) { // if inside temp is less than 68F\n        \t\t    msg.payload = 0; // close window if it’s too cold inside\n                }\n            } else if (hour.getHours() > 21) { // if it’s after 9pm\n            \tif (context.tmin_tonight >= tmin_cool_ToD2 && context.ToD_tomorrow == 2) { // cool night => 62F and tomorrow will be at least 80F\n            \t    msg.payload = 1; // open window\n            \t} else if (context.tmin_tonight < tmin_cool_ToD2 && context.tmin_tonight >= tmin_cold_ToD2 && context.ToD_tomorrow == 2) { // cold night 55F-62F and tomorrow will be hot\n            \t    msg.payload = 2; // optional\n                } else if (context.tmin_tonight < tmin_cold_ToD2 && context.ToD_tomorrow == 2) { // cold night < 55F and tomorrow will be hot\n            \t    msg.payload = 0; // close window\n                } else if (context.ToD_tomorrow == 3) {\n            \t    context.ToD_today = 3; // fall/spring day type\n                } else if (context.ToD_tomorrow == 1) { // if tomorrow will be cold\n            \t    context.ToD_today = 1; // winter day type\n                }\n            } else {\n                msg.payload = 2; // optional\n            }\n        }\n    \n        \n        //////////FALL/SPRING DAY///////////////    \n        if (context.ToD_today == 3){ // if fall/spring day…\n            // temperature condition\n            if (context.weath <= context.temp1) { // if it’s colder outside\n            \t\tif ((7 < hour.getHours() && hour.getHours() < 10) && T_max_forecast >= tmin_warm_ToD3) { // if morning and it’ll be hotter than 77F today\n                        if (context.weath >= tmin_out_ToD3) { // if outdoor temp greater than 65F\n                            msg.payload = 1; // open\n                        } else if (context.weath < tmin_out_ToD3) { // if outdoor temp less than 65F\n                            msg.payload = 2; // optional\n                        } else { // if it’s too warm inside\n                            if (context.temp1 > tmax_in_ToD3) { // warmer than 73F inside\n                                msg.payload = 2; // optional (okay to close if it's too warm)\n                            // it’s not too warm inside\n                            } else if (context.temp1 <= tmax_in_ToD3) { // cooler than 73F inside\n                                msg.payload = 0; // close (retain the inside heat)\n                            }\n                    \t}\n                    } \n            } else if (context.weath > context.temp1) { // if it’s warmer outside\n                    // if it’s too warm inside\n                    if (context.temp1 > tmax_in_ToD3) { // warmer than 73F inside\n                        msg.payload = 2; // optional\n                    }\n                    // if it’s not too warm inside\n                    else if (context.temp1 <= tmax_in_ToD3) { // cooler than 73F inside\n                        msg.payload = 1; // open (heat the house for the cold night)\n                    }\n            } else {\n                msg.payload = 2; // optional\n            }\n            \n            if (hour.getHours() >= 21 && !context.is21_bool) { // if after 9pm (ideally only execute once)\n                if (context.ToD_tomorrow == 2) { // if tomorrow’s warmer than 80F\n                    context.ToD_today = 2; // send day state to summer\n                } else if (context.ToD_tomorrow == 1) {\n                    context.ToD_today = 1; // send to winter day type\n                }\n                context.is21_bool = true;\n            }\n        }\n    }\n    \n    context.temp1_bool = false;\n    context.weath_bool = false;\n    context.fore_bool = false;\n    context.motion_bool = false;\n    context.sunrise_bool = false;\n    context.sunset_bool = false;\n    context.timenow_bool = false;\n    context.temp1 = 0;\n    context.weath = 0;\n    context.fore = 0;\n    //context.motion = 0;\n    context.sunrise = 0;\n    context.sunset = 0;\n    context.timenow = 0;\n    \n    return msg;\n    \n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\ncontext.sentcommand = context.sentcommand || 0;\ncontext.pending = context.pending || 0;\n\ncontext.sentcommand = 0;\ncontext.pending = 0;",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 820,
        "wires": [
            [
                "9a34484e284edde0"
            ]
        ]
    },
    {
        "id": "0615319d41fdfeaf",
        "type": "influxdb in",
        "z": "fd9893a00d3f6cdf",
        "influxdb": "56e8016bbfd59dd7",
        "name": "Read forecast_weather",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 570,
        "y": 740,
        "wires": [
            [
                "cb384c825193a667"
            ]
        ]
    },
    {
        "id": "5fc288607fa30347",
        "type": "function",
        "z": "fd9893a00d3f6cdf",
        "name": "Query forecast_weather",
        "func": "\nmsg.query = 'select * from \"forecast_weather\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 740,
        "wires": [
            [
                "0615319d41fdfeaf"
            ]
        ]
    },
    {
        "id": "cb384c825193a667",
        "type": "change",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "fore",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 740,
        "wires": [
            [
                "6f7500ab37937091",
                "dba9954272c463a2"
            ]
        ]
    },
    {
        "id": "9a7a6d0bf5609146",
        "type": "influxdb in",
        "z": "fd9893a00d3f6cdf",
        "influxdb": "bc2ca31505293e84",
        "name": "Read motion_sensors",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 520,
        "y": 860,
        "wires": [
            [
                "8706cca89a0696b0"
            ]
        ]
    },
    {
        "id": "342b1008a14c4945",
        "type": "function",
        "z": "fd9893a00d3f6cdf",
        "name": "Query MOTION1",
        "func": "\nmsg.query = 'select * from \"tele/9c3b5e/MOTION1\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 860,
        "wires": [
            [
                "9a7a6d0bf5609146"
            ]
        ]
    },
    {
        "id": "8706cca89a0696b0",
        "type": "change",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "motion",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 860,
        "wires": [
            [
                "6f7500ab37937091",
                "dba9954272c463a2"
            ]
        ]
    },
    {
        "id": "2d2ac8000f2d043e",
        "type": "comment",
        "z": "fd9893a00d3f6cdf",
        "name": "Window Algorithm",
        "info": "",
        "x": 190,
        "y": 620,
        "wires": []
    },
    {
        "id": "d47af7ef4968c57e",
        "type": "influxdb in",
        "z": "fd9893a00d3f6cdf",
        "influxdb": "0f055c5f74a251a8",
        "name": "Read sunrise",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 470,
        "y": 900,
        "wires": [
            [
                "c6f0d615b3043537"
            ]
        ]
    },
    {
        "id": "5b5d42e24e05548e",
        "type": "function",
        "z": "fd9893a00d3f6cdf",
        "name": "Query sunrise",
        "func": "\nmsg.query = 'select * from \"sunrise\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 900,
        "wires": [
            [
                "d47af7ef4968c57e"
            ]
        ]
    },
    {
        "id": "c6f0d615b3043537",
        "type": "change",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "sunrise",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 900,
        "wires": [
            [
                "6f7500ab37937091",
                "dba9954272c463a2"
            ]
        ]
    },
    {
        "id": "20911df5f8aa9dae",
        "type": "influxdb in",
        "z": "fd9893a00d3f6cdf",
        "influxdb": "213fc452357b6b1d",
        "name": "Read sunset",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 450,
        "y": 940,
        "wires": [
            [
                "cfc14b4fa3e019ef"
            ]
        ]
    },
    {
        "id": "b1e9f016c3e45a3b",
        "type": "function",
        "z": "fd9893a00d3f6cdf",
        "name": "Query sunset",
        "func": "\nmsg.query = 'select * from \"sunset\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 940,
        "wires": [
            [
                "20911df5f8aa9dae"
            ]
        ]
    },
    {
        "id": "cfc14b4fa3e019ef",
        "type": "change",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "sunset",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 940,
        "wires": [
            [
                "6f7500ab37937091",
                "dba9954272c463a2"
            ]
        ]
    },
    {
        "id": "714c36e242030b41",
        "type": "inject",
        "z": "fd9893a00d3f6cdf",
        "name": "msg.timenow",
        "props": [
            {
                "p": "timenow",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": "10",
        "topic": "",
        "x": 180,
        "y": 1020,
        "wires": [
            [
                "6f7500ab37937091",
                "dba9954272c463a2"
            ]
        ]
    },
    {
        "id": "bbf7ea555206070e",
        "type": "inject",
        "z": "fd9893a00d3f6cdf",
        "name": "Fetch",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": "60",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 660,
        "wires": [
            [
                "872fa0e3ed9b4687",
                "e121b42e5901793f",
                "5fc288607fa30347",
                "fb82e0e7ebc63006",
                "3de4ae463316f7fc",
                "342b1008a14c4945",
                "5b5d42e24e05548e",
                "b1e9f016c3e45a3b",
                "7ace9cc5eab61ac9"
            ]
        ]
    },
    {
        "id": "27005b76b4b3ab2c",
        "type": "influxdb in",
        "z": "fd9893a00d3f6cdf",
        "influxdb": "56e8016bbfd59dd7",
        "name": "Read ToD_today",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 510,
        "y": 780,
        "wires": [
            [
                "2bef11520c4585e7"
            ]
        ]
    },
    {
        "id": "fb82e0e7ebc63006",
        "type": "function",
        "z": "fd9893a00d3f6cdf",
        "name": "Query ToD_today",
        "func": "\nmsg.query = 'select * from \"ToD_today\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 780,
        "wires": [
            [
                "27005b76b4b3ab2c"
            ]
        ]
    },
    {
        "id": "2bef11520c4585e7",
        "type": "change",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "ToD_today",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 780,
        "wires": [
            [
                "6f7500ab37937091",
                "dba9954272c463a2"
            ]
        ]
    },
    {
        "id": "7d444d3b7baf0671",
        "type": "influxdb in",
        "z": "fd9893a00d3f6cdf",
        "influxdb": "56e8016bbfd59dd7",
        "name": "Read ToD_tomorrow",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 540,
        "y": 820,
        "wires": [
            [
                "2effe6efa8c917fb"
            ]
        ]
    },
    {
        "id": "3de4ae463316f7fc",
        "type": "function",
        "z": "fd9893a00d3f6cdf",
        "name": "Query ToD_tomorrow",
        "func": "\nmsg.query = 'select * from \"ToD_tomorrow\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 820,
        "wires": [
            [
                "7d444d3b7baf0671"
            ]
        ]
    },
    {
        "id": "2effe6efa8c917fb",
        "type": "change",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "ToD_tomorrow",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 820,
        "wires": [
            [
                "6f7500ab37937091",
                "dba9954272c463a2"
            ]
        ]
    },
    {
        "id": "e1111946cce33af2",
        "type": "influxdb in",
        "z": "fd9893a00d3f6cdf",
        "influxdb": "56e8016bbfd59dd7",
        "name": "Read tmin_tonight",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 510,
        "y": 980,
        "wires": [
            [
                "5c5a68efd6d2a442"
            ]
        ]
    },
    {
        "id": "7ace9cc5eab61ac9",
        "type": "function",
        "z": "fd9893a00d3f6cdf",
        "name": "Query tmin_tonight",
        "func": "\nmsg.query = 'select * from \"tmin_tonight\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 980,
        "wires": [
            [
                "e1111946cce33af2"
            ]
        ]
    },
    {
        "id": "5c5a68efd6d2a442",
        "type": "change",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "tmin_tonight",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 980,
        "wires": [
            [
                "6f7500ab37937091",
                "dba9954272c463a2"
            ]
        ]
    },
    {
        "id": "046b44e20958e18b",
        "type": "wled2",
        "z": "fd9893a00d3f6cdf",
        "address": "192.168.2.107",
        "segmentId": "0",
        "brightness": "19",
        "delay": "0",
        "color1": "#0c48d4",
        "color2": "#0cd40c",
        "color3": "#0cd40c",
        "effect": "0",
        "effectIntensity": 128,
        "effectSpeed": 128,
        "name": "LED",
        "palette": "2",
        "preset": 0,
        "state": "on",
        "debug": "off",
        "x": 1430,
        "y": 2060,
        "wires": [
            []
        ]
    },
    {
        "id": "c05355a10630b593",
        "type": "function",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "func": "context.last = context.last;\ncontext.triggered = context.triggered;\n\nif (msg.command != context.last){\n\n    if (msg.command == 1){\n        context.triggered = 1;\n        msg.payload = {\n          \"preset\": 1,\n          \"seg\": 1,\n          \"state\": \"on\",\n        }\n        \n    } else if (msg.command == 2){\n        context.triggered = 2;\n        msg.payload = {\n          \"preset\": 2,\n          \"seg\": 2,\n          \"state\": \"on\",\n        }\n        \n    } else if (msg.command == 3){\n        context.triggered = 3;\n        msg.payload = {\n          \"preset\": 3,\n          \"seg\": 3,\n          \"state\": \"on\",\n        }\n        \n    } else if (msg.command == 4){\n        context.triggered = 4;\n        msg.payload = {\n          \"preset\": 4,\n          \"seg\": 4,\n          \"state\": \"on\",\n        }\n        \n    } else if (msg.command == 5){\n        context.triggered = 5;\n        msg.payload = {\n          \"preset\": 5,\n          \"seg\": 5,\n          \"state\": \"on\",\n        }\n        \n    } else if (msg.command == 6){\n        context.triggered = 6;\n        msg.payload = {\n          \"preset\": 6,\n          \"seg\": 6,\n          \"state\": \"on\",\n        }\n        \n    } else if (msg.command == 7){\n        context.triggered = 7;\n        msg.payload = {\n          \"preset\": 7,\n          \"seg\": 7,\n          \"state\": \"on\",\n        }\n        \n    } else if (msg.command == 8){\n        context.triggered = 8;\n        msg.payload = {\n          \"preset\": 8,\n          \"seg\": 8,\n          \"state\": \"on\",\n        }\n        \n    } else if (msg.command == 9){\n        context.triggered = 9;\n        msg.payload = {\n          \"preset\": 9,\n          \"seg\": 9,\n          \"state\": \"on\",\n        }\n        \n    } else if (msg.command == 10){\n        context.triggered = 10;\n        msg.payload = {\n          \"preset\": 10,\n          \"seg\": 10,\n          \"state\": \"on\",\n        }\n        \n    } else if (msg.command == 11){\n        context.triggered = 11;\n        msg.payload = {\n          \"preset\": 11,\n          \"seg\": 11,\n          \"state\": \"on\",\n        }\n        \n    } else if (msg.command == 12){\n        context.triggered = 12;\n        msg.payload = {\n          \"preset\": 12,\n          \"seg\": 12,\n          \"state\": \"on\",\n        }\n        \n    } else if (msg.command == 13){\n        context.triggered = 13;\n        msg.payload = {\n          \"preset\": 13,\n          \"seg\": 13,\n          \"state\": \"on\",\n        }\n        \n    } else if (msg.command == 14){\n        context.triggered = 14;\n        msg.payload = {\n          \"preset\": 14,\n          \"seg\": 14,\n          \"state\": \"on\",\n        }\n        \n    } else if (msg.command == 15){\n        context.triggered = 15;\n        msg.payload = {\n          \"preset\": 15,\n          \"seg\": 15,\n          \"state\": \"on\",\n        }\n        \n    } else if (msg.command == 16){\n        context.triggered = 16;\n        msg.payload = {\n          \"preset\": 16,\n          \"seg\": 16,\n          \"state\": \"on\",\n        }\n        \n    } else if (msg.command == 17){\n        context.triggered = 17;\n        msg.payload = {\n          \"preset\": 17,\n          \"seg\": 17,\n          \"state\": \"on\",\n        }\n        \n    } else if (msg.command == 18){\n        context.triggered = 18;\n        msg.payload = {\n          \"preset\": 18,\n          \"seg\": 18,\n          \"state\": \"on\",\n        }\n        \n    } else if (msg.command == 19){\n        context.triggered = 19;\n        msg.payload = {\n          \"preset\": 19,\n          \"seg\": 19,\n          \"state\": \"on\",\n        }\n        \n    } else if (msg.command == 20){\n        context.triggered = 20;\n        msg.payload = {\n          \"preset\": 20,\n          \"seg\": 20,\n          \"state\": \"on\",\n        }\n        \n    } else if (msg.command == 5){\n        context.triggered = 5;\n        msg.payload = {\n          \"preset\": 5,\n          \"seg\": 5,\n          \"state\": \"on\",\n        }\n        \n    } else if (msg.command == 21){\n        context.triggered = 21;\n        msg.payload = {\n          \"preset\": 21,\n          \"seg\": 21,\n          \"state\": \"on\",\n        }\n        \n    } else if (msg.command == 22){\n        context.triggered = 22;\n        msg.payload = {\n          \"preset\": 22,\n          \"seg\": 22,\n          \"state\": \"on\",\n        }\n    \n    } else if (msg.command == 23){\n        context.triggered = 23;\n        msg.payload = {\n          \"preset\": 23,\n          \"seg\": 23,\n          \"state\": \"on\",\n        }\n        \n    } else if (msg.command == 999){\n        context.triggered = 999;\n        msg.payload = {\n          \"state\": \"off\",\n        }\n    }\n    \n    context.last = context.triggered;\n    \n    return msg\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 2060,
        "wires": [
            [
                "046b44e20958e18b"
            ]
        ]
    },
    {
        "id": "87a868a54ce2c911",
        "type": "comment",
        "z": "fd9893a00d3f6cdf",
        "name": "Curtain Algorithm",
        "info": "",
        "x": 180,
        "y": 1140,
        "wires": []
    },
    {
        "id": "344fd788571cfe2b",
        "type": "function",
        "z": "fd9893a00d3f6cdf",
        "name": "Curtain Logic",
        "func": "// 0 is closed\n// 1 is open\n// 2 is option\n// 3 open automatic\n// 4 close automatic\n\ncontext.temp1_bool = context.temp1_bool || false;\ncontext.temp1 = context.temp1 || 0;\ncontext.weath_bool = context.weath_bool || false;\ncontext.weath = context.weath || 0;\ncontext.motion_bool = context.motion_bool || false;\ncontext.motion = context.motion || 0;\ncontext.light_bool = context.light_bool || false;\ncontext.light = context.light || 0;\ncontext.timenow_bool = context.timenow_bool || false;\ncontext.timenow = context.timenow || 0;\ncontext.ToD_today_bool = context.ToD_today_bool || false;\ncontext.ToD_today = context.ToD_today;\ncontext.ToD_tomorrow_bool = context.ToD_tomorrow_bool || false;\ncontext.ToD_tomorrow = context.ToD_tomorrow;\ncontext.is21_bool = context.is21_bool || false;\n\n\n// WAIT FOR ALL SIGNALS TO BE RECEIVED\nif (msg.temp1){\n    context.temp1 = msg.temp1;\n    context.temp1_bool = true;\n}\n\nif (msg.weath){\n    context.weath = msg.weath;\n    context.weath_bool = true;\n}\n\nif (msg.light){\n    context.light = msg.light;\n    context.light_bool = true;\n}\n\nif (msg.ToD_today){\n    context.ToD_today = msg.ToD_today;\n    context.ToD_today_bool = true;\n}\n\nif (msg.ToD_tomorrow){\n    context.ToD_tomorrow = msg.ToD_tomorrow;\n    context.ToD_tomorrow_bool = true;\n}\n\nif (msg.timenow){\n    context.timenow = msg.timenow;\n    context.timenow_bool = true;\n}\n\nif (msg.motion == 0 || msg.motion == 1){\n    if (msg.motion == 1){ //if motion detected, save time\n        context.lastmotion = context.timenow;\n        context.motion = msg.motion;\n        context.motion_bool = true;\n    }\n    \n    if(context.timenow > context.lastmotion + 1.2e+6){ //if more than 20 minutes with no motion\n        context.motion = msg.motion;\n        context.motion_bool = true;\n    } else{\n        context.motion = 1;\n        context.motion_bool = true;\n    }\n}\n\nvar lux_light = 800; // minimum light threshold when you want your curtains open \nvar lux_night = 100; // light value when it’s after sunset / nighttime \nvar hour = new Date(context.timenow)\n\n//RUN ALGORITHM AFTER ALL SIGNALS RECEIVED\nif (context.motion_bool && context.light_bool && context.timenow_bool && \n    context.temp1_bool && context.weath_bool && context.ToD_today_bool &&\n    context.ToD_tomorrow_bool){\n    \n    //////////WINTER DAY///////////////\n    if (context.ToD_today == 1) { // if winter day…\n    \t// light condition\n        if (context.light < lux_night){ //dark\n        \tmsg.payload = 0; // insulate windows during cold night\n        } else if (context.light > lux_light){ //sunny\n            if (context.motion){//occupied\n                msg.payload = 1; // let the sunlight in to heat home\n            } else { //unoccupied\n                msg.payload = 3; //open curtains (AUTOMATICALLY)\n            }\n        } else if (context.light <= lux_light && context.light >= lux_night){ //cloudy\n            if (context.motion){//today is a forecasted sunny day\n                msg.payload = 2; //optional\n            } else { //unoccupied\n                msg.payload = 4; //Close curtains (AUTOMATICALLY)\n            }    \n        }\n    }\n    \n    //////////SUMMER DAY///////////////\n    if (context.ToD_today == 2) { // if summer day…\n        // light condition\n        if (context.light < lux_night){ //dark\n        \tmsg.payload = 2; //optional\n        } else if (context.light > lux_light){ //sunny\n            if (context.motion){//occupied\n                msg.payload = 2; //optional\n            } else { //unoccupied\n                msg.payload = 4; //Close curtains (AUTOMATICALLY)\n            }\n        } else if (context.light <= lux_light && context.light >= lux_night){ //cloudy\n            if (context.motion){//occupied\n                msg.payload = 2; //optional\n            } else { //unoccupied\n                msg.payload = 4; //Close curtains (AUTOMATICALLY)\n            }    \n        }\n    }\n    \n    //////////FALL/SPRING DAY///////////////\n    if (context.ToD_today == 3) { // if fall/summer day…\n        // light condition\n        if (context.light < lux_night){ //dark\n        \tmsg.payload = 2; //optional\n        } else if (context.light > lux_light){ //sunny\n            if (context.motion){//occupied\n                msg.payload = 1; //open\n            } else { //unoccupied\n                msg.payload = 3; //Open curtains (AUTOMATICALLY)\n            }\n        } else if (context.light <= lux_light && context.light >= lux_night){ //cloudy\n            if (context.weath < context.temp1){\n                if (context.motion){//occupied\n                    msg.payload = 2; //optional\n                } else { //unoccupied\n                    msg.payload = 4; //Close curtains (AUTOMATICALLY)\n                }\n            } else if (context.weath >= context.temp1){\n                if (context.motion){//occupied\n                    msg.payload = 1; //open\n                } else { //unoccupied\n                    msg.payload = 3; //Open curtains (AUTOMATICALLY)\n                }\n            }\n        }\n    }\n    \n    if (hour.getHours() >= 21 && !context.is21_bool) { // if after 9pm (ideally only execute once)\n        if (context.ToD_tomorrow == 1) { // if tomorrow’s warmer than 80F\n            context.ToD_today = 1; // send day state to summer\n        } else if (context.ToD_tomorrow == 2) {\n            context.ToD_today = 2; // send to winter day type\n        } else if (context.ToD_tomorrow == 3) {\n            context.ToD_today = 3; // send to winter day type\n        }\n        context.is21_bool = true;\n    }    \n\n    \n    context.temp1_bool = false;\n    context.weath_bool = false;\n    context.motion_bool = false;\n    context.light_bool = false;\n    context.sunrise_bool = false;\n    context.sunset_bool = false;\n    context.timenow_bool = false;\n    context.temp1 = 0;\n    context.weath = 0;\n    //context.motion = 0;\n    context.light = 0;\n    context.sunrise = 0;\n    context.sunset = 0;\n    context.timenow = 0;\n    \n    return msg;\n    \n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\ncontext.sentcommand = context.sentcommand || 0;\ncontext.pending = context.pending || 0;\n\ncontext.sentcommand = 0;\ncontext.pending = 0;",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1300,
        "wires": [
            [
                "12668090e78472d8",
                "6ac5a390b1744335"
            ]
        ]
    },
    {
        "id": "be9efe0f2940d22b",
        "type": "influxdb in",
        "z": "fd9893a00d3f6cdf",
        "influxdb": "bc2ca31505293e84",
        "name": "Read motion_sensors",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 540,
        "y": 1260,
        "wires": [
            [
                "4be254c61f1a3b80"
            ]
        ]
    },
    {
        "id": "b1730b6c7c7dc1f6",
        "type": "function",
        "z": "fd9893a00d3f6cdf",
        "name": "Query MOTION1",
        "func": "\nmsg.query = 'select * from \"tele/9c3b5e/MOTION1\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1260,
        "wires": [
            [
                "be9efe0f2940d22b"
            ]
        ]
    },
    {
        "id": "4be254c61f1a3b80",
        "type": "change",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "motion",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 1260,
        "wires": [
            [
                "344fd788571cfe2b"
            ]
        ]
    },
    {
        "id": "aaecf4070f37c662",
        "type": "influxdb in",
        "z": "fd9893a00d3f6cdf",
        "influxdb": "1cbfd82388df1f9c",
        "name": "Read light_sensors",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 490,
        "y": 1380,
        "wires": [
            [
                "6c2327b6f0da6453"
            ]
        ]
    },
    {
        "id": "e43955cb63dc3fb5",
        "type": "function",
        "z": "fd9893a00d3f6cdf",
        "name": "Query LIGHT1",
        "func": "\nmsg.query = 'select * from \"tele/4fd36e/LIGHT1\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 1380,
        "wires": [
            [
                "aaecf4070f37c662"
            ]
        ]
    },
    {
        "id": "6c2327b6f0da6453",
        "type": "change",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "light",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 1380,
        "wires": [
            [
                "344fd788571cfe2b"
            ]
        ]
    },
    {
        "id": "8cdaebe7943cbf6b",
        "type": "inject",
        "z": "fd9893a00d3f6cdf",
        "name": "msg.timenow",
        "props": [
            {
                "p": "timenow",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": "10",
        "topic": "",
        "x": 180,
        "y": 1420,
        "wires": [
            [
                "344fd788571cfe2b"
            ]
        ]
    },
    {
        "id": "a28f1fb81fd5d368",
        "type": "influxdb in",
        "z": "fd9893a00d3f6cdf",
        "influxdb": "8181f6d9dc076d46",
        "name": "Read TEMP1",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 480,
        "y": 1180,
        "wires": [
            [
                "efacac451dafbb04"
            ]
        ]
    },
    {
        "id": "08dc13d9fc633f41",
        "type": "function",
        "z": "fd9893a00d3f6cdf",
        "name": "Query TEMP1",
        "func": "\nmsg.query = 'select * from \"tele/9c3b5e/TEMP1\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 1180,
        "wires": [
            [
                "a28f1fb81fd5d368"
            ]
        ]
    },
    {
        "id": "96159e4629943c3f",
        "type": "influxdb in",
        "z": "fd9893a00d3f6cdf",
        "influxdb": "cfe68d916a9a6da8",
        "name": "Read current_weather",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 540,
        "y": 1220,
        "wires": [
            [
                "f3b1e370b7ce1b05"
            ]
        ]
    },
    {
        "id": "6b31aae312b1b79b",
        "type": "function",
        "z": "fd9893a00d3f6cdf",
        "name": "Query current_weather",
        "func": "\nmsg.query = 'select * from \"current_weather\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 1220,
        "wires": [
            [
                "96159e4629943c3f"
            ]
        ]
    },
    {
        "id": "efacac451dafbb04",
        "type": "change",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "temp1",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 1180,
        "wires": [
            [
                "344fd788571cfe2b"
            ]
        ]
    },
    {
        "id": "f3b1e370b7ce1b05",
        "type": "change",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "weath",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 1220,
        "wires": [
            [
                "344fd788571cfe2b"
            ]
        ]
    },
    {
        "id": "b942b2028d6102bd",
        "type": "inject",
        "z": "fd9893a00d3f6cdf",
        "name": "Fetch",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": "60",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 1180,
        "wires": [
            [
                "08dc13d9fc633f41",
                "6b31aae312b1b79b",
                "b1730b6c7c7dc1f6",
                "444f155799989f77",
                "262b43241ddbada5",
                "e43955cb63dc3fb5"
            ]
        ]
    },
    {
        "id": "47772ee0cb8616a6",
        "type": "influxdb in",
        "z": "fd9893a00d3f6cdf",
        "influxdb": "56e8016bbfd59dd7",
        "name": "Read ToD_today",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 510,
        "y": 1300,
        "wires": [
            [
                "c842e7d9b9f50a3e"
            ]
        ]
    },
    {
        "id": "444f155799989f77",
        "type": "function",
        "z": "fd9893a00d3f6cdf",
        "name": "Query ToD_today",
        "func": "\nmsg.query = 'select * from \"ToD_today\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1300,
        "wires": [
            [
                "47772ee0cb8616a6"
            ]
        ]
    },
    {
        "id": "c842e7d9b9f50a3e",
        "type": "change",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "ToD_today",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 1300,
        "wires": [
            [
                "344fd788571cfe2b"
            ]
        ]
    },
    {
        "id": "f75cb71493117303",
        "type": "influxdb in",
        "z": "fd9893a00d3f6cdf",
        "influxdb": "56e8016bbfd59dd7",
        "name": "Read ToD_tomorrow",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 540,
        "y": 1340,
        "wires": [
            [
                "1b3f2125b1c41e78"
            ]
        ]
    },
    {
        "id": "262b43241ddbada5",
        "type": "function",
        "z": "fd9893a00d3f6cdf",
        "name": "Query ToD_tomorrow",
        "func": "\nmsg.query = 'select * from \"ToD_tomorrow\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 1340,
        "wires": [
            [
                "f75cb71493117303"
            ]
        ]
    },
    {
        "id": "1b3f2125b1c41e78",
        "type": "change",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "ToD_tomorrow",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 1340,
        "wires": [
            [
                "344fd788571cfe2b"
            ]
        ]
    },
    {
        "id": "f5d66e0a9d4d8738",
        "type": "comment",
        "z": "fd9893a00d3f6cdf",
        "name": "Voice Commands",
        "info": "",
        "x": 180,
        "y": 1560,
        "wires": []
    },
    {
        "id": "3106643c16448701",
        "type": "comment",
        "z": "fd9893a00d3f6cdf",
        "name": "Lights",
        "info": "",
        "x": 130,
        "y": 1860,
        "wires": []
    },
    {
        "id": "df6d624df0d1ad36",
        "type": "function",
        "z": "fd9893a00d3f6cdf",
        "name": "Light Algorithm",
        "func": "// 0 is cold outside close\n// 1 is hot outside close\n// 2 is cold outside open\n// 3 is hot outside open\n// 4 is off\n\ncontext.doorled_bool = context.doorled_bool || false;\ncontext.doorled = context.doorled;\ncontext.windowled_bool = context.windowled_bool || false;\ncontext.windowled = context.windowled;\ncontext.door1_bool = context.door1_bool || false;\ncontext.door1 = context.door1;\ncontext.window1_bool = context.window1_bool || false;\ncontext.window1 = context.window1;\ncontext.indicators_bool = context.indicators_bool || false;\ncontext.indicators = context.indicators;\ncontext.lights_bool = context.lights_bool || false;\ncontext.lights = context.lights;\ncontext.window_toggled = context.window_toggled;\ncontext.door_toggled = context.door_toggled;\ncontext.window_correct = context.window_correct;\ncontext.door_correct = context.door_correct;\ncontext.message = context.message;\n\n// WAIT FOR ALL SIGNALS TO BE RECEIVED\nif (msg.doorled == 0 || msg.doorled){\n    context.doorled = msg.doorled;\n    context.doorled_bool = true;\n}\n\nif (msg.windowled == 0 || msg.windowled){\n    context.windowled = msg.windowled;\n    context.windowled_bool = true;\n}\n\nif (msg.door1 == 0 || msg.door1){\n    context.door1 = msg.door1;\n    context.door1_bool = true;\n}\n\nif (msg.window1 == 0 || msg.window1){\n    context.window1 = msg.window1;\n    context.window1_bool = true;\n}\n\nif (msg.indicators == 0 || msg.indicators){\n    context.indicators = msg.indicators;\n    context.indicators_bool = true;\n}\n\nif (msg.lights == true || msg.lights == false){\n    context.lights = msg.lights;\n    context.lights_bool = true;\n    context.door_correct = false;\n    context.window_correct = false;\n}\n\nif (context.windowled_bool && context.window1_bool && !context.window_toggled && !context.window_correct){\n        //Indication set to Off\n    if (context.indicators == 0){\n        return msg;\n    }\n    //Indication set to Minimal\n    else if (context.indicators == 1){\n        //ADD HERE\n        context.window_toggled = true;\n    }\n    //Indication set to Focused\n    else if (context.indicators == 2){\n        //Close window\n        if (context.windowled == 0 || context.windowled == 1){\n            context.message = 14;\n        //Open door\n        } else if (context.windowled == 2 || context.windowled == 3){\n            context.message = 15;\n        }\n        context.window_toggled = true;\n    }\n    //Indication set to Full\n    else if (context.indicators == 3){\n        if (context.windowled == 0) {\n            context.message = 5;\n        } else if (context.windowled == 1) {\n            context.message = 6;\n        } else if (context.windowled == 2) {\n            context.message = 8;            \n        } else if (context.windowled == 3) {\n            context.message = 7;            \n        }\n        context.window_toggled = true;\n    }\n}\n\nif (context.doorled_bool && context.door1_bool && !context.door_toggled && !context.door_correct){\n    //Indication set to Off\n    if (context.indicators == 0){\n        return msg;\n    }\n    //Indication set to Minimal\n    else if (context.indicators == 1){\n        //REMOVED FROM DASHBOARD FOR NOW\n        context.door_toggled = true;\n    }\n    //Indication set to Focused\n    else if (context.indicators == 2){\n        //Close door\n        if (context.doorled == 0 || context.doorled == 1){\n            context.message = 21;\n        //Open door\n        } else if (context.doorled == 2 || context.doorled == 3){\n            context.message = 20;\n        }\n        context.door_toggled = true;\n    }\n    //Indication set to Full\n    else if (context.indicators == 3){\n        if (context.doorled == 0) {\n            context.message = 1;\n        } else if (context.doorled == 1) {\n            context.message = 2;\n        } else if (context.doorled == 2) {\n            context.message = 4;            \n        } else if (context.doorled == 3) {\n            context.message = 3;            \n        }\n        context.door_toggled = true;\n    }\n}\n   \n//Check for off cases\nif ((context.doorled == 4) && (context.windowled == 4)){\n    context.door_toggled = true;\n    context.window_toggled = true;\n    context.message = 999;\n}\n    \nif (context.door_toggled){    \n    if (     ( (((context.doorled == 0) || (context.doorled == 1)) && context.door1 == 0 ) \n                    ||(((context.doorled == 2) || (context.doorled == 3)) && context.door1 == 1 ) ) ){//&&\n                    //( (((context.windowled == 0) || (context.windowled == 1)) && context.window1 == 0 ) \n                    //||(((context.windowled == 2) || (context.windowled == 3)) && context.window1 == 1 ))    ){\n        if (!context.door_correct){\n            context.door_correct = true;\n            context.door_toggled = true;\n            if (context.lights){\n                context.message = 23;\n            } else {\n                context.message = 999;\n            }\n        }\n    } else{\n        context.door_correct = false;\n        context.door_toggled = false; \n    }\n}\n\nif (context.window_toggled){    \n    if (     //( (((context.doorled == 0) || (context.doorled == 1)) && context.door1 == 0 ) \n                    //||(((context.doorled == 2) || (context.doorled == 3)) && context.door1 == 1 ) ) &&\n                    ( (((context.windowled == 0) || (context.windowled == 1)) && context.window1 == 0 ) \n                    ||(((context.windowled == 2) || (context.windowled == 3)) && context.window1 == 1 ))    ){\n        if (!context.window_correct){\n            context.window_correct = true;\n            context.window_toggled = true;\n            if (context.lights){\n                context.message = 23;\n            } else {\n                context.message = 999;\n            }\n        }\n    } else{\n        context.window_correct = false;\n        context.window_toggled = false;\n    }\n}\n\nmsg.payload = context.message;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 2060,
        "wires": [
            [
                "43fa8186b67bd4a1"
            ]
        ]
    },
    {
        "id": "03f27bb06a79ca09",
        "type": "influxdb in",
        "z": "fd9893a00d3f6cdf",
        "influxdb": "fc2d99b8dba8ab78",
        "name": "Read DOOR1",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 480,
        "y": 1980,
        "wires": [
            [
                "95419f28680dd0c5"
            ]
        ]
    },
    {
        "id": "313d0ce1d1e83505",
        "type": "function",
        "z": "fd9893a00d3f6cdf",
        "name": "Query DOOR1",
        "func": "\nmsg.query = 'select * from \"tele/35298f/DOOR1\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 1980,
        "wires": [
            [
                "03f27bb06a79ca09"
            ]
        ]
    },
    {
        "id": "95419f28680dd0c5",
        "type": "change",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "door1",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 1980,
        "wires": [
            [
                "df6d624df0d1ad36"
            ]
        ]
    },
    {
        "id": "73e773f8f788e801",
        "type": "inject",
        "z": "fd9893a00d3f6cdf",
        "name": "Fetch",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": "60",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 1980,
        "wires": [
            [
                "313d0ce1d1e83505",
                "3f96fb6712fc19de",
                "258a3bcd1a50b01a",
                "639640e9aa435fd1"
            ]
        ]
    },
    {
        "id": "439ad7c6ab4baa38",
        "type": "influxdb in",
        "z": "fd9893a00d3f6cdf",
        "influxdb": "a679213909ea0180",
        "name": "Read WINDOW1",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 510,
        "y": 2020,
        "wires": [
            [
                "9221c056abc0ba74"
            ]
        ]
    },
    {
        "id": "3f96fb6712fc19de",
        "type": "function",
        "z": "fd9893a00d3f6cdf",
        "name": "Query WINDOW1",
        "func": "\nmsg.query = 'select * from \"tele/4fd36e/WINDOW1\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 2020,
        "wires": [
            [
                "439ad7c6ab4baa38"
            ]
        ]
    },
    {
        "id": "9221c056abc0ba74",
        "type": "change",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "window1",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 2020,
        "wires": [
            [
                "df6d624df0d1ad36"
            ]
        ]
    },
    {
        "id": "dba9954272c463a2",
        "type": "function",
        "z": "fd9893a00d3f6cdf",
        "name": "Window LED",
        "func": "// 0 is cold outside close\n// 1 is hot outside close\n// 2 is cold outside open\n// 3 is hot outside open\n// 4 is off\n\ncontext.temp1_bool = context.temp1_bool || false;\ncontext.temp1 = context.temp1 || 0;\ncontext.weath_bool = context.weath_bool || false;\ncontext.weath = context.weath || 0;\ncontext.fore_bool = context.fore_bool || false;\ncontext.fore = context.fore || 0;\ncontext.ToD_today_bool = context.ToD_today_bool || false;\ncontext.ToD_today = context.ToD_today;\ncontext.ToD_tomorrow_bool = context.ToD_tomorrow_bool || false;\ncontext.ToD_tomorrow = context.ToD_tomorrow;\ncontext.motion_bool = context.motion_bool || false;\ncontext.motion = context.motion || 0;\ncontext.sunrise_bool = context.sunrise_bool || false;\ncontext.sunrise = context.sunrise || 0;\ncontext.sunset_bool = context.sunset_bool || false;\ncontext.sunset = context.sunset || 0;\ncontext.timenow_bool = context.timenow_bool || false;\ncontext.timenow = context.timenow || 0;\ncontext.tmin_tonight_bool = context.tmin_tonight_bool || false;\ncontext.tmin_tonight = context.tmin_tonight || 0;\ncontext.is21_bool = context.is21_bool || false;\n\n\n// WAIT FOR ALL SIGNALS TO BE RECEIVED\nif (msg.temp1){\n    context.temp1 = msg.temp1;\n    context.temp1_bool = true;\n}\n\nif (msg.weath){\n    context.weath = msg.weath;\n    context.weath_bool = true;\n}\n\nif (msg.fore){\n    context.fore = msg.fore;\n    context.fore_bool = true;\n}\n\nif (msg.ToD_today){\n    context.ToD_today = msg.ToD_today;\n    context.ToD_today_bool = true;\n}\n\nif (msg.ToD_tomorrow){\n    context.ToD_tomorrow = msg.ToD_tomorrow;\n    context.ToD_tomorrow_bool = true;\n}\n\nif (msg.tmin_tonight){\n    context.tmin_tonight = msg.tmin_tonight;\n    context.tmin_tonight_bool = true;\n}\n\nif (msg.sunrise){\n    context.sunrise = msg.sunrise * 1000;\n    context.sunrise_bool = true;\n}\n\nif (msg.sunset){\n    context.sunset = msg.sunset * 1000;\n    context.sunset_bool = true;\n}\n\nif (msg.timenow){\n    context.timenow = msg.timenow;\n    context.timenow_bool = true;\n}\n\nif (msg.motion == 0 || msg.motion == 1){\n    if (msg.motion == 1){ //if motion detected, save time\n        context.lastmotion = context.timenow;\n        context.motion = msg.motion;\n        context.motion_bool = true;\n    }\n    \n    if(context.timenow > context.lastmotion + 1.2e+6){ //if more than 20 minutes with no motion\n        context.motion = msg.motion;\n        context.motion_bool = true;\n    } else{\n        context.motion = 1;\n        context.motion_bool = true;\n    }\n}\n\n//CONSTANTS\n//WINTER--1\nvar tmax_out_ToD1 = 20.5; //max temp for a winter day       \n//SUMMER--2\nvar tmin_in_ToD2 = 20; // minimum inside temp on a summer day\nvar tmin_cool_ToD2 = 16.7; // minimum outside on a cool summer night \nvar tmin_cold_ToD2 = tmin_cold_ToD2; // minimum outside on a cold cummer night\n//FALL/SPRING--3\nvar tmin_warm_ToD3 = 25; // minimum max temp on warm day where you should open your windows in the morning\nvar tmax_in_ToD3 = 22.8; // max inside temp when it's too warm\nvar tmin_out_ToD3 = 18.3; // minimum outdoor temp when you can open your windows when it's colder outside (and it will be warmer than tmin_warm_ToD3)\nvar hour = new Date(context.timenow)\n\n\n//RUN ALGORITHM AFTER ALL SIGNALS RECEIVED\nif (context.temp1_bool && context.weath_bool && context.fore_bool && context.motion_bool && \n    context.sunrise_bool && context.sunset_bool && context.timenow_bool && context.ToD_today_bool && \n    context.ToD_tomorrow_bool && context.tmin_tonight_bool){\n    \n    if (context.motion == 0 || context.timenow < context.sunrise || hour.getHours() > 22){           //if no one is around or night\n        msg.payload = 4;        // 4 is off\n    } \n    //...if motion is detected...\n    //////////WINTER DAY///////////////\n    else {\n        if (context.ToD_today == 1){\n        \n            if (context.weath <= context.temp1) { // if it’s colder outside than inside\n    \t\t    msg.payload = 0; // 0 is cold outside close\n    \t    } else if (context.weath >= context.temp1) { // if it’s warmer outside than inside (rare/unlikely in winter)\n    \t\t    msg.payload = 3; // 3 is hot outside open\n    \t    }\n            \n            if (context.weath > tmax_out_ToD1) { // if it’s warmer than 69F outside, switch to fall/spring day type\n    \t\t    context.ToD_today = 3; // fall/spring day\n            }\n            \n            if (hour.getHours() >= 21 && !context.is21_bool) { // if after 9pm (ideally only execute once)\n    \t        if (context.ToD_tomorrow == 2) { // if tomorrow’s warmer than 80F\n        \t        context.ToD_today = 2; // send day state to summer\n    \t\t    } else if (context.ToD_tomorrow == 3) {\n    \t\t        context.ToD_today = 3; // send to fall/spring day type\n    \t        }\n    \t        context.is21_bool = true;\n            }\n        }\n        \n        //////////SUMMER DAY///////////////    \n        if (context.ToD_today == 2){ // if summer day…\n            // temperature condition\n            if (hour.getHours() < 21) { // if it’s before bed time ~9pm\n    \t        if (context.weath >= context.temp1) { // if it’s warmer outside than inside\n    \t            msg.payload = 1; // 1 is hot outside close\n                } else if (context.weath < context.temp1) { // if it’s colder outside than inside, likely in the morning or early evening \n        \t        if (context.temp1 >= tmin_in_ToD2) { // if inside temp is greater than 68F\n                        msg.payload = 2; // 2 is cold outside open\n        \t        }\n        \t    } else if (context.temp1 < tmin_in_ToD2) { // if inside temp is less than 68F\n        \t\t    msg.payload = 0; // 0 is cold outside close\n                }\n            } else if (hour.getHours() > 21) { // if it’s after 9pm\n            \tif (context.tmin_tonight >= tmin_cool_ToD2 && context.ToD_tomorrow == 2) { // cool night => 62F and tomorrow will be at least 80F\n            \t    msg.payload = 2; // 2 is cold outside open\n            \t} else if (context.tmin_tonight < tmin_cool_ToD2 && context.tmin_tonight >= tmin_cold_ToD2 && context.ToD_tomorrow == 2) { // cold night 55F-62F and tomorrow will be hot\n            \t    msg.payload = 4; // 4 is off\n                } else if (context.tmin_tonight < tmin_cold_ToD2 && context.ToD_tomorrow == 2) { // cold night < 55F and tomorrow will be hot\n            \t    msg.payload = 0; // 0 is cold outside close\n                } else if (context.ToD_tomorrow == 3) {\n            \t    context.ToD_today = 3; // fall/spring day type\n                } else if (context.ToD_tomorrow == 1) { // if tomorrow will be cold\n            \t    context.ToD_today = 1; // winter day type\n                }\n            } else {\n                msg.payload = 4; // 4 is off\n            }\n        }\n    \n        \n        //////////FALL/SPRING DAY///////////////    \n        if (context.ToD_today == 3){ // if fall/spring day…\n            // temperature condition\n            if (context.weath <= context.temp1) { // if it’s colder outside\n            \t\tif ((7 < hour.getHours() && hour.getHours() < 10) && T_max_forecast >= tmin_warm_ToD3) { // if morning and it’ll be hotter than 77F today\n                        if (context.weath >= tmin_out_ToD3) { // if outdoor temp greater than 65F\n                            msg.payload = 3; // 3 is hot outside open\n                        } else if (context.weath < tmin_out_ToD3) { // if outdoor temp less than 65F\n                            msg.payload = 4; // 4 is off\n                        } else { // if it’s too warm inside\n                            if (context.temp1 > tmax_in_ToD3) { // warmer than 73F inside\n                                msg.payload = 4; // 4 is off\n                            // it’s not too warm inside\n                            } else if (context.temp1 <= tmax_in_ToD3) { // cooler than 73F inside\n                                msg.payload = 0; // // 0 is cold outside close\n                            }\n                    \t}\n                    } \n            } else if (context.weath > context.temp1) { // if it’s warmer outside\n                    // if it’s too warm inside\n                    if (context.temp1 > tmax_in_ToD3) { // warmer than 73F inside\n                        msg.payload = 4; // 4 is off\n                    }\n                    // if it’s not too warm inside\n                    else if (context.temp1 <= tmax_in_ToD3) { // cooler than 73F inside\n                        msg.payload = 3; // 3 is hot outside open\n                    }\n            } else {\n                msg.payload = 4; // 4 is off\n            }\n            \n            if (hour.getHours() >= 21 && !context.is21_bool) { // if after 9pm (ideally only execute once)\n                if (context.ToD_tomorrow == 2) { // if tomorrow’s warmer than 80F\n                    context.ToD_today = 2; // send day state to summer\n                } else if (context.ToD_tomorrow == 1) {\n                    context.ToD_today = 1; // send to winter day type\n                }\n                context.is21_bool = true;\n            }\n        }\n    }\n    \n    context.temp1_bool = false;\n    context.weath_bool = false;\n    context.fore_bool = false;\n    context.motion_bool = false;\n    context.sunrise_bool = false;\n    context.sunset_bool = false;\n    context.timenow_bool = false;\n    context.temp1 = 0;\n    context.weath = 0;\n    context.fore = 0;\n    //context.motion = 0;\n    context.sunrise = 0;\n    context.sunset = 0;\n    context.timenow = 0;\n    \n    return msg;\n    \n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\ncontext.sentcommand = context.sentcommand || 0;\ncontext.pending = context.pending || 0;\n\ncontext.sentcommand = 0;\ncontext.pending = 0;",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 860,
        "wires": [
            [
                "676461523f0f3933"
            ]
        ]
    },
    {
        "id": "eb93ac89174e2fd2",
        "type": "link out",
        "z": "fd9893a00d3f6cdf",
        "name": "Doors LED Out",
        "mode": "link",
        "links": [
            "d25758820d1a4dc1"
        ],
        "x": 1255,
        "y": 260,
        "wires": []
    },
    {
        "id": "d25758820d1a4dc1",
        "type": "link in",
        "z": "fd9893a00d3f6cdf",
        "name": "Doors LED In",
        "links": [
            "eb93ac89174e2fd2"
        ],
        "x": 95,
        "y": 1900,
        "wires": [
            [
                "af8cd86357795c4a"
            ]
        ]
    },
    {
        "id": "dea58727165ccbcf",
        "type": "link out",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "mode": "link",
        "links": [
            "c8b4bb7db6d92734"
        ],
        "x": 1355,
        "y": 860,
        "wires": []
    },
    {
        "id": "c8b4bb7db6d92734",
        "type": "link in",
        "z": "fd9893a00d3f6cdf",
        "name": "Windows LED In",
        "links": [
            "dea58727165ccbcf"
        ],
        "x": 95,
        "y": 1940,
        "wires": [
            [
                "9fb8a973dd5acd77"
            ]
        ]
    },
    {
        "id": "af8cd86357795c4a",
        "type": "change",
        "z": "fd9893a00d3f6cdf",
        "name": "msg.doorled",
        "rules": [
            {
                "t": "set",
                "p": "doorled",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 210,
        "y": 1900,
        "wires": [
            [
                "df6d624df0d1ad36"
            ]
        ]
    },
    {
        "id": "9fb8a973dd5acd77",
        "type": "change",
        "z": "fd9893a00d3f6cdf",
        "name": "msg.windowled",
        "rules": [
            {
                "t": "set",
                "p": "windowled",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 220,
        "y": 1940,
        "wires": [
            [
                "df6d624df0d1ad36"
            ]
        ]
    },
    {
        "id": "43fa8186b67bd4a1",
        "type": "change",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "command",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1110,
        "y": 2060,
        "wires": [
            [
                "c05355a10630b593"
            ]
        ]
    },
    {
        "id": "af052aa7d4b2e240",
        "type": "google-home",
        "z": "fd9893a00d3f6cdf",
        "conf": "bb393ca0b6419b06",
        "device": "21200",
        "acknowledge": false,
        "name": "Outlet",
        "topic": "",
        "x": 150,
        "y": 1620,
        "wires": [
            [
                "7f685b8f92a4c54e"
            ]
        ]
    },
    {
        "id": "6d0b8c668f36b3ed",
        "type": "google-notify",
        "z": "fd9893a00d3f6cdf",
        "server": "264e6541467bab0e",
        "label": "",
        "playVolumeLevel": "",
        "playMessage": "",
        "language": "en",
        "speakSlow": "false",
        "mediaUrl": "",
        "mediaType": "mp3",
        "x": 290,
        "y": 1740,
        "wires": [
            []
        ]
    },
    {
        "id": "984454222c349806",
        "type": "inject",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "props": [
            {
                "p": "playMessage",
                "v": "hey poom you rat bastard",
                "vt": "str"
            },
            {
                "p": "playVolumeLevel",
                "v": "40",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 1740,
        "wires": [
            [
                "6d0b8c668f36b3ed"
            ]
        ]
    },
    {
        "id": "5c6a5048347bca18",
        "type": "google-home",
        "z": "fd9893a00d3f6cdf",
        "conf": "bb393ca0b6419b06",
        "device": "21202",
        "acknowledge": false,
        "name": "Blinds",
        "topic": "",
        "x": 150,
        "y": 1680,
        "wires": [
            [
                "3a24d0eda8456b75"
            ]
        ]
    },
    {
        "id": "7f685b8f92a4c54e",
        "type": "debug",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 290,
        "y": 1620,
        "wires": []
    },
    {
        "id": "3a24d0eda8456b75",
        "type": "debug",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 290,
        "y": 1680,
        "wires": []
    },
    {
        "id": "dfdeb41374b84b3e",
        "type": "function",
        "z": "fd9893a00d3f6cdf",
        "name": "Voice Assistant",
        "func": "// 0 is cold outside close\n// 1 is hot outside close\n// 2 is cold outside open\n// 3 is hot outside open\n// 4 is off\n\ncontext.changed = context.changed\ncontext.last = context.last\n\n\nif (msg.payload || msg.payload == 0){\n    if (msg.payload != context.last){\n        context.changed = true;\n        context.last = msg.payload;\n    } else {\n        context.changed = false;\n    }\n}\n\nif (context.changed){\n    \n    if (msg.payload == 0){\n        msg.playMessage = \"It's cold in the other room, and your room is warm. You may want to close the door\";\n        msg.playVolumeLevel = 30;\n    }\n    \n    if (msg.payload == 1){\n        msg.playMessage = \"It's hot in the other room, and your room is cool. You may want to close the door\";\n        msg.playVolumeLevel = 30;\n    }\n    \n    if (msg.payload == 2){\n        msg.playMessage = \"It's cold in the other room, and your room is warm. You may want to open the door\";\n        msg.playVolumeLevel = 30;\n    }\n    \n    if (msg.payload == 3){\n        msg.playMessage = \"It's hot in the other room, and your room is cold. You may want to open the door\";\n        msg.playVolumeLevel = 30;\n    }\n    \n    if (msg.payload == 4){\n        msg.playMessage = \"None\";\n        msg.playVolumeLevel = 0;\n    }\n\n    \n    return msg;\n    \n}\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "ebbe760649dcbcff",
        "type": "function",
        "z": "fd9893a00d3f6cdf",
        "name": "Voice Assistant",
        "func": "// 0 is cold outside close\n// 1 is hot outside close\n// 2 is cold outside open\n// 3 is hot outside open\n// 4 is off\n\ncontext.changed = context.changed\ncontext.last = context.last\n\n\nif (msg.payload || msg.payload == 0){\n    if (msg.payload != context.last){\n        context.changed = true;\n        context.last = msg.payload;\n    } else {\n        context.changed = false;\n    }\n}\n\nif (context.changed){\n    \n    if (msg.payload == 0){\n        msg.playMessage = \"It's cold outside, and your room is warm. You may want to close the window\";\n        msg.playVolumeLevel = 30;\n    }\n    \n    if (msg.payload == 1){\n        msg.playMessage = \"It's hot outside, and your room is cool. You may want to close the window\";\n        msg.playVolumeLevel = 30;\n    }\n    \n    if (msg.payload == 2){\n        msg.playMessage = \"It's cold outside, and your room is warm. You may want to open the window\";\n        msg.playVolumeLevel = 30;\n    }\n    \n    if (msg.payload == 3){\n        msg.playMessage = \"It's hot outside, and your room is cold. You may want to open the window\";\n        msg.playVolumeLevel = 30;\n    }\n    \n    if (msg.payload == 4){\n        msg.playMessage = \"None\";\n        msg.playVolumeLevel = 0;\n    }\n\n    \n    return msg;\n    \n}\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 900,
        "wires": [
            [
                "7564f09e67a8d22b"
            ]
        ]
    },
    {
        "id": "c808983822a0a78a",
        "type": "inject",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 1190,
        "y": 720,
        "wires": [
            [
                "d213b35115790d51",
                "ab97c0df923c0ea0"
            ]
        ]
    },
    {
        "id": "a15ddda5518473b9",
        "type": "influxdb in",
        "z": "fd9893a00d3f6cdf",
        "influxdb": "180a534c8ba67fba",
        "name": "Read indicators",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 480,
        "y": 2060,
        "wires": [
            [
                "da0a165659d2504a"
            ]
        ]
    },
    {
        "id": "258a3bcd1a50b01a",
        "type": "function",
        "z": "fd9893a00d3f6cdf",
        "name": "Query indicators",
        "func": "\nmsg.query = 'select * from \"UI/indicators\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 2060,
        "wires": [
            [
                "a15ddda5518473b9"
            ]
        ]
    },
    {
        "id": "da0a165659d2504a",
        "type": "change",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "indicators",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 2060,
        "wires": [
            [
                "df6d624df0d1ad36"
            ]
        ]
    },
    {
        "id": "3a67094d2f5c6371",
        "type": "inject",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 1190,
        "y": 680,
        "wires": [
            [
                "d213b35115790d51",
                "ab97c0df923c0ea0"
            ]
        ]
    },
    {
        "id": "6b7c232a74106c9f",
        "type": "inject",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2",
        "payloadType": "num",
        "x": 1190,
        "y": 760,
        "wires": [
            [
                "ab97c0df923c0ea0",
                "d213b35115790d51"
            ]
        ]
    },
    {
        "id": "15012c901b73cb90",
        "type": "inject",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 1190,
        "y": 960,
        "wires": [
            [
                "dea58727165ccbcf",
                "ebbe760649dcbcff",
                "667cb73f4b7b3e65",
                "6dee21bf117887a6"
            ]
        ]
    },
    {
        "id": "4b7288daa42f1ee2",
        "type": "inject",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 1190,
        "y": 920,
        "wires": [
            [
                "dea58727165ccbcf",
                "ebbe760649dcbcff",
                "667cb73f4b7b3e65",
                "6dee21bf117887a6"
            ]
        ]
    },
    {
        "id": "fb3e494e42882680",
        "type": "inject",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2",
        "payloadType": "num",
        "x": 1190,
        "y": 1000,
        "wires": [
            [
                "dea58727165ccbcf",
                "ebbe760649dcbcff",
                "667cb73f4b7b3e65",
                "6dee21bf117887a6"
            ]
        ]
    },
    {
        "id": "24c4dc2962bfa971",
        "type": "inject",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "3",
        "payloadType": "num",
        "x": 1190,
        "y": 1040,
        "wires": [
            [
                "dea58727165ccbcf",
                "ebbe760649dcbcff",
                "667cb73f4b7b3e65",
                "6dee21bf117887a6"
            ]
        ]
    },
    {
        "id": "a4c5f7b4b12a1b27",
        "type": "inject",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "4",
        "payloadType": "num",
        "x": 1190,
        "y": 1080,
        "wires": [
            [
                "dea58727165ccbcf",
                "ebbe760649dcbcff",
                "667cb73f4b7b3e65",
                "6dee21bf117887a6"
            ]
        ]
    },
    {
        "id": "c9690a52b0c1b1b7",
        "type": "inject",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "10",
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 1130,
        "y": 100,
        "wires": [
            [
                "980bdd3d40839142",
                "efd780c317339124"
            ]
        ]
    },
    {
        "id": "47b4da0c4c365b13",
        "type": "inject",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 1130,
        "y": 60,
        "wires": [
            [
                "980bdd3d40839142",
                "efd780c317339124"
            ]
        ]
    },
    {
        "id": "aee25d5b7b4502d6",
        "type": "inject",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2",
        "payloadType": "num",
        "x": 1130,
        "y": 140,
        "wires": [
            [
                "980bdd3d40839142",
                "efd780c317339124"
            ]
        ]
    },
    {
        "id": "76026d82b4bd5003",
        "type": "inject",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 1130,
        "y": 360,
        "wires": [
            [
                "eb93ac89174e2fd2",
                "dfdeb41374b84b3e",
                "4e5f34440d41258e",
                "3df3e6dc17b082b9"
            ]
        ]
    },
    {
        "id": "c4f5e6072bba7ee7",
        "type": "inject",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 1130,
        "y": 320,
        "wires": [
            [
                "eb93ac89174e2fd2",
                "dfdeb41374b84b3e",
                "4e5f34440d41258e",
                "3df3e6dc17b082b9"
            ]
        ]
    },
    {
        "id": "6f04637415faf11d",
        "type": "inject",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2",
        "payloadType": "num",
        "x": 1130,
        "y": 400,
        "wires": [
            [
                "eb93ac89174e2fd2",
                "dfdeb41374b84b3e",
                "4e5f34440d41258e",
                "3df3e6dc17b082b9"
            ]
        ]
    },
    {
        "id": "634b39dfd653b555",
        "type": "inject",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "3",
        "payloadType": "num",
        "x": 1130,
        "y": 440,
        "wires": [
            [
                "eb93ac89174e2fd2",
                "dfdeb41374b84b3e",
                "4e5f34440d41258e",
                "3df3e6dc17b082b9"
            ]
        ]
    },
    {
        "id": "26a31a517dee35be",
        "type": "inject",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "4",
        "payloadType": "num",
        "x": 1130,
        "y": 480,
        "wires": [
            [
                "eb93ac89174e2fd2",
                "dfdeb41374b84b3e",
                "4e5f34440d41258e",
                "3df3e6dc17b082b9"
            ]
        ]
    },
    {
        "id": "d33bb09db856bccc",
        "type": "google-notify",
        "z": "fd9893a00d3f6cdf",
        "server": "264e6541467bab0e",
        "label": "",
        "playVolumeLevel": "",
        "playMessage": "",
        "language": "en",
        "speakSlow": "false",
        "mediaUrl": "",
        "mediaType": "mp3",
        "x": 430,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "639640e9aa435fd1",
        "type": "function",
        "z": "fd9893a00d3f6cdf",
        "name": "Query lights",
        "func": "\nmsg.query = 'select * from \"UI/lights\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 2100,
        "wires": [
            [
                "8964423319554295"
            ]
        ]
    },
    {
        "id": "8964423319554295",
        "type": "influxdb in",
        "z": "fd9893a00d3f6cdf",
        "influxdb": "180a534c8ba67fba",
        "name": "Read lights",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 470,
        "y": 2100,
        "wires": [
            [
                "a27c96f7e9fc4452"
            ]
        ]
    },
    {
        "id": "a27c96f7e9fc4452",
        "type": "change",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "lights",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 2100,
        "wires": [
            [
                "df6d624df0d1ad36"
            ]
        ]
    },
    {
        "id": "de046fda6d50824f",
        "type": "influxdb in",
        "z": "fd9893a00d3f6cdf",
        "influxdb": "8181f6d9dc076d46",
        "name": "Read TEMP1",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 480,
        "y": 120,
        "wires": [
            [
                "9d7fab7f64057781"
            ]
        ]
    },
    {
        "id": "9877383237db2366",
        "type": "inject",
        "z": "fd9893a00d3f6cdf",
        "name": "Fetch",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": "60",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 120,
        "wires": [
            [
                "9609b9b64b09787e",
                "b001fe2784996c4b",
                "2914bb1879b25998",
                "209d1d9225b2e4e0",
                "a963e972872e5e85",
                "f30397b913174e03",
                "6f9e4067c7b21625"
            ]
        ]
    },
    {
        "id": "9609b9b64b09787e",
        "type": "function",
        "z": "fd9893a00d3f6cdf",
        "name": "Query TEMP1",
        "func": "\nmsg.query = 'select * from \"tele/9c3b5e/TEMP1\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 120,
        "wires": [
            [
                "de046fda6d50824f"
            ]
        ]
    },
    {
        "id": "0d100c23d0babf2f",
        "type": "influxdb in",
        "z": "fd9893a00d3f6cdf",
        "influxdb": "cfe68d916a9a6da8",
        "name": "Read current_weather",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 540,
        "y": 160,
        "wires": [
            [
                "35e46ffc578f5245"
            ]
        ]
    },
    {
        "id": "b001fe2784996c4b",
        "type": "function",
        "z": "fd9893a00d3f6cdf",
        "name": "Query current_weather",
        "func": "\nmsg.query = 'select * from \"current_weather\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 160,
        "wires": [
            [
                "0d100c23d0babf2f"
            ]
        ]
    },
    {
        "id": "9d7fab7f64057781",
        "type": "change",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "temp1",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 120,
        "wires": [
            [
                "ec6e913af5d74453",
                "36e908143d842f3b"
            ]
        ]
    },
    {
        "id": "35e46ffc578f5245",
        "type": "change",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "weath",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 160,
        "wires": [
            [
                "ec6e913af5d74453",
                "36e908143d842f3b"
            ]
        ]
    },
    {
        "id": "ec6e913af5d74453",
        "type": "function",
        "z": "fd9893a00d3f6cdf",
        "name": "Door Logic",
        "func": "// 0 is closed\n// 1 is open\n// 2 is option\n\ncontext.temp1_bool = context.temp1_bool || false;\ncontext.temp1 = context.temp1 || 0;\ncontext.weath_bool = context.weath_bool || false;\ncontext.weath = context.weath || 0;\ncontext.motion_bool = context.motion_bool || false;\ncontext.motion = context.motion || 0;\ncontext.sunrise_bool = context.sunrise_bool || false;\ncontext.sunrise = context.sunrise || 0;\ncontext.sunset_bool = context.sunset_bool || false;\ncontext.sunset = context.sunset || 0;\ncontext.timenow_bool = context.timenow_bool || false;\ncontext.timenow = context.timenow || 0;\ncontext.ToD_today_bool = context.ToD_today_bool || false;\ncontext.ToD_today = context.ToD_today;\ncontext.thermostat_bool = context.thermostat_bool || false;\ncontext.thermostat = context.thermostat || 0;\n\nvar hour = new Date(context.timenow)\n\nif (msg.temp1){\n    context.temp1 = msg.temp1;\n    context.temp1_bool = true;\n}\n\nif (msg.weath){\n    context.weath = msg.weath;\n    context.weath_bool = true;\n}\n\n\nif (msg.sunrise){\n    context.sunrise = msg.sunrise * 1000;\n    context.sunrise_bool = true;\n}\n\nif (msg.sunset){\n    context.sunset = msg.sunset * 1000;\n    context.sunset_bool = true;\n}\n\nif (msg.timenow){\n    context.timenow = msg.timenow;\n    context.timenow_bool = true;\n}\n\nif (msg.ToD_today){\n    context.ToD_today = msg.ToD_today;\n    context.ToD_today_bool = true;\n}\n\nif (msg.thermostat){\n    context.thermostat = msg.thermostat;\n    context.thermostat_bool = true;\n}\n\nif (msg.motion == 0 || msg.motion == 1){\n    if (msg.motion == 1){ //if motion detected, save time\n        context.lastmotion = context.timenow;\n        context.motion = msg.motion;\n        context.motion_bool = true;\n    }\n    \n    if(context.timenow > context.lastmotion + 1.2e+6){ //if more than 20 minutes with no motion\n        context.motion = msg.motion;\n        context.motion_bool = true;\n    } else{\n        context.motion = 1;\n        context.motion_bool = true;\n    }\n}\n\n\nif (context.temp1_bool && context.weath_bool && context.motion_bool && \n    context.sunrise_bool && context.sunset_bool && context.timenow_bool &&\n    context.thermostat_bool){\n        \n        \n    if (context.motion == 0 || context.timenow < context.sunrise || hour.getHours() > 22){           //if no one is around\n        msg.payload = 2;        //option\n    } \n    \n    //...if motion is detected...\n    else {\n        ///////WINTER DAY///////\n        if(context.ToD_today == 1) { // winter\n        \tif (context.motion){ //and living room unoccupied?\n                if (context.temp1 < context.thermostat){ //(it’s colder than thermostat) set point inside (thermostat is on)\n        \t\t    //If it’s warmer in the living room (temp2) \n                    msg.payload = 1; //open door (let warm air from living room/kitchen in)\n                } else if (context.temp >= context.thermostat){ //equal to or warmer than set temp\n                    //Close door (isolate space and heat up faster)\n        \t\t    msg.payload = 0; //Close door (retain heat)\n                } else {\n                    msg.payload = 2; //optional\n                }\n        \t} else {\n                msg.payload = 2; //optional\n            }\n        } \n        \n        ///////SUMMER DAY///////\n        if (context.ToD_today == 2) { // summer\n        \tif (context.motion){ //and living room unoccupied?\n                if (context.temp1 < context.thermostat - 0.7){ //If it’s colder in the living room by 0.7C\n        \t\t    //If it’s warmer in the living room (temp2) \n                    msg.payload = 1; //open door (let cool air from living room/kitchen in)\n                } else if (context.temp >= context.thermostat + 0.7){ //equal to or warmer than set temp\n                    //Close door (isolate space and heat up faster)\n        \t\t    msg.payload = 0; //Close door (retain cool)\n                } else {\n                    msg.payload = 2; //optional\n                }\n        \t} else {\n                msg.payload = 2; //optional\n            }\n        }\n        \n        ///////FALL/SPRING DAY///////\n        if (context.ToD_today == 3) { // fall/spring\n        \tif (context.temp1 > context.weath){ //If it’s colder outside than inside\n                if (context.temp1 < context.thermostat){ //If it’s colder than thermostat set point inside (thermostat is on)\n        \t\t    //If it’s warmer in the living room (temp2) \n                    msg.payload = 1; //open door (let warm air from living room/kitchen in)\n                } else if (context.temp >= context.thermostat){ //(colder in the living room)\n                    //Close door (isolate space and heat up faster)\n        \t\t    msg.payload = 0; //Close door (isolate space and heat up faster)\n                } else {\n                    msg.payload = 2; //optional\n                }\n        \t} else{\n        \t    msg.payload = 2; //optional\n        \t}\n        }\n\n    }\n    \n    context.temp1_bool = false;\n    context.weath_bool = false;\n    context.motion_bool = false;\n    context.sunrise_bool = false;\n    context.sunset_bool = false;\n    context.timenow_bool = false;\n    context.temp1 = 0;\n    context.weath = 0;\n    //context.motion = 0;\n    context.sunrise = 0;\n    context.sunset = 0;\n    context.timenow = 0;\n    \n    return msg;\n    \n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\ncontext.sentcommand = context.sentcommand || 0;\ncontext.pending = context.pending || 0;\n\ncontext.sentcommand = 0;\ncontext.pending = 0;",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 220,
        "wires": [
            [
                "15c60b5d2013ffee"
            ]
        ]
    },
    {
        "id": "b029c522ab402232",
        "type": "influxdb in",
        "z": "fd9893a00d3f6cdf",
        "influxdb": "bc2ca31505293e84",
        "name": "Read motion_sensors",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 520,
        "y": 200,
        "wires": [
            [
                "43f6febd11fced9f"
            ]
        ]
    },
    {
        "id": "2914bb1879b25998",
        "type": "function",
        "z": "fd9893a00d3f6cdf",
        "name": "Query MOTION1",
        "func": "\nmsg.query = 'select * from \"tele/9c3b5e/MOTION1\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 200,
        "wires": [
            [
                "b029c522ab402232"
            ]
        ]
    },
    {
        "id": "43f6febd11fced9f",
        "type": "change",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "motion",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 200,
        "wires": [
            [
                "ec6e913af5d74453",
                "36e908143d842f3b"
            ]
        ]
    },
    {
        "id": "0597e281f825462a",
        "type": "comment",
        "z": "fd9893a00d3f6cdf",
        "name": "Door Algorithm",
        "info": "",
        "x": 180,
        "y": 80,
        "wires": []
    },
    {
        "id": "503df3acf3bf7084",
        "type": "influxdb in",
        "z": "fd9893a00d3f6cdf",
        "influxdb": "0f055c5f74a251a8",
        "name": "Read sunrise",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 470,
        "y": 240,
        "wires": [
            [
                "d7a6fad42d5593ff"
            ]
        ]
    },
    {
        "id": "209d1d9225b2e4e0",
        "type": "function",
        "z": "fd9893a00d3f6cdf",
        "name": "Query sunrise",
        "func": "\nmsg.query = 'select * from \"sunrise\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 240,
        "wires": [
            [
                "503df3acf3bf7084"
            ]
        ]
    },
    {
        "id": "d7a6fad42d5593ff",
        "type": "change",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "sunrise",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 240,
        "wires": [
            [
                "ec6e913af5d74453",
                "36e908143d842f3b"
            ]
        ]
    },
    {
        "id": "d1d12a090f93294f",
        "type": "influxdb in",
        "z": "fd9893a00d3f6cdf",
        "influxdb": "213fc452357b6b1d",
        "name": "Read sunset",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 450,
        "y": 280,
        "wires": [
            [
                "f9863088659c8255"
            ]
        ]
    },
    {
        "id": "a963e972872e5e85",
        "type": "function",
        "z": "fd9893a00d3f6cdf",
        "name": "Query sunset",
        "func": "\nmsg.query = 'select * from \"sunset\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 280,
        "wires": [
            [
                "d1d12a090f93294f"
            ]
        ]
    },
    {
        "id": "f9863088659c8255",
        "type": "change",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "sunset",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 280,
        "wires": [
            [
                "ec6e913af5d74453",
                "36e908143d842f3b"
            ]
        ]
    },
    {
        "id": "a8c46a93188c8795",
        "type": "inject",
        "z": "fd9893a00d3f6cdf",
        "name": "msg.timenow",
        "props": [
            {
                "p": "timenow",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": "10",
        "topic": "",
        "x": 180,
        "y": 400,
        "wires": [
            [
                "ec6e913af5d74453",
                "36e908143d842f3b"
            ]
        ]
    },
    {
        "id": "f171f6cce4b7407a",
        "type": "influxdb in",
        "z": "fd9893a00d3f6cdf",
        "influxdb": "56e8016bbfd59dd7",
        "name": "Read ToD_today",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 510,
        "y": 320,
        "wires": [
            [
                "866308798718d792"
            ]
        ]
    },
    {
        "id": "f30397b913174e03",
        "type": "function",
        "z": "fd9893a00d3f6cdf",
        "name": "Query ToD_today",
        "func": "\nmsg.query = 'select * from \"ToD_today\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 320,
        "wires": [
            [
                "f171f6cce4b7407a"
            ]
        ]
    },
    {
        "id": "866308798718d792",
        "type": "change",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "ToD_today",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 320,
        "wires": [
            [
                "ec6e913af5d74453",
                "36e908143d842f3b"
            ]
        ]
    },
    {
        "id": "c38f479028261c89",
        "type": "influxdb in",
        "z": "fd9893a00d3f6cdf",
        "influxdb": "180a534c8ba67fba",
        "name": "Read thermostat",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 510,
        "y": 360,
        "wires": [
            [
                "7eca7141e3284f7e"
            ]
        ]
    },
    {
        "id": "6f9e4067c7b21625",
        "type": "function",
        "z": "fd9893a00d3f6cdf",
        "name": "Query thermostat",
        "func": "\nmsg.query = 'select * from \"UI/thermostat\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 360,
        "wires": [
            [
                "c38f479028261c89"
            ]
        ]
    },
    {
        "id": "7eca7141e3284f7e",
        "type": "change",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "thermostat",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 360,
        "wires": [
            [
                "ec6e913af5d74453",
                "36e908143d842f3b"
            ]
        ]
    },
    {
        "id": "36e908143d842f3b",
        "type": "function",
        "z": "fd9893a00d3f6cdf",
        "name": "Door LED",
        "func": "// 0 is cold outside close\n// 1 is hot outside close\n// 2 is cold outside open\n// 3 is hot outside open\n// 4 is off\n\ncontext.temp1_bool = context.temp1_bool || false;\ncontext.temp1 = context.temp1 || 0;\ncontext.weath_bool = context.weath_bool || false;\ncontext.weath = context.weath || 0;\ncontext.motion_bool = context.motion_bool || false;\ncontext.motion = context.motion || 0;\ncontext.sunrise_bool = context.sunrise_bool || false;\ncontext.sunrise = context.sunrise || 0;\ncontext.sunset_bool = context.sunset_bool || false;\ncontext.sunset = context.sunset || 0;\ncontext.timenow_bool = context.timenow_bool || false;\ncontext.timenow = context.timenow || 0;\ncontext.ToD_today_bool = context.ToD_today_bool || false;\ncontext.ToD_today = context.ToD_today;\ncontext.thermostat_bool = context.thermostat_bool || false;\ncontext.thermostat = context.thermostat || 0;\n\nvar hour = new Date(context.timenow)\n\nif (msg.temp1){\n    context.temp1 = msg.temp1;\n    context.temp1_bool = true;\n}\n\nif (msg.weath){\n    context.weath = msg.weath;\n    context.weath_bool = true;\n}\n\n\nif (msg.sunrise){\n    context.sunrise = msg.sunrise * 1000;\n    context.sunrise_bool = true;\n}\n\nif (msg.sunset){\n    context.sunset = msg.sunset * 1000;\n    context.sunset_bool = true;\n}\n\nif (msg.timenow){\n    context.timenow = msg.timenow;\n    context.timenow_bool = true;\n}\n\nif (msg.ToD_today){\n    context.ToD_today = msg.ToD_today;\n    context.ToD_today_bool = true;\n}\n\nif (msg.thermostat){\n    context.thermostat = msg.thermostat;\n    context.thermostat_bool = true;\n}\n\nif (msg.motion == 0 || msg.motion == 1){\n    if (msg.motion == 1){ //if motion detected, save time\n        context.lastmotion = context.timenow;\n        context.motion = msg.motion;\n        context.motion_bool = true;\n    }\n    \n    if(context.timenow > context.lastmotion + 1.2e+6){ //if more than 20 minutes with no motion\n        context.motion = msg.motion;\n        context.motion_bool = true;\n    } else{\n        context.motion = 1;\n        context.motion_bool = true;\n    }\n}\n\n\nif (context.temp1_bool && context.weath_bool && context.motion_bool && \n    context.sunrise_bool && context.sunset_bool && context.timenow_bool &&\n    context.thermostat_bool){\n        \n    if (context.motion == 0 || context.timenow < context.sunrise || hour.getHours() > 22){           //if no one is around\n        msg.payload = 2;        //option\n    } \n    \n    //...if motion is detected...\n    else {\n        ///////WINTER DAY///////\n        if(context.ToD_today == 1) { // winter\n        \tif (context.motion){ //and living room unoccupied?\n                if (context.temp1 < context.thermostat){ //(it’s colder than thermostat) set point inside (thermostat is on)\n        \t\t    //If it’s warmer in the living room (temp2) \n                    msg.payload = 3; //// 3 is hot outside open open door (let warm air from living room/kitchen in)\n                } else if (context.temp >= context.thermostat){ //equal to or warmer than set temp\n                    //Close door (isolate space and heat up faster)\n        \t\t    msg.payload = 1; //// 1 is hot outside close Close door (retain heat)\n                } else {\n                    msg.payload = 4; //// 4 is off optional\n                }\n        \t}else {\n                msg.payload = 4; //// 4 is off optional\n            }\n        } \n        \n        ///////SUMMER DAY///////\n        if (context.ToD_today == 2) { // summer\n        \tif (context.motion){ //and living room unoccupied?\n                if (context.temp1 < context.thermostat - 0.7){ //If it’s colder in the living room by 0.7C\n        \t\t    //If it’s warmer in the living room (temp2) \n                    msg.payload = 2; //// 2 is cold outside open open door (let cool air from living room/kitchen in)\n                } else if (context.temp >= context.thermostat + 0.7){ //equal to or warmer than set temp\n                    //Close door (isolate space and heat up faster)\n        \t\t    msg.payload = 1; //// 1 is hot outside close Close door (retain cool)\n                } else {\n                    msg.payload = 4; //// 4 is off optional\n                }\n        \t}else {\n                msg.payload = 4; //// 4 is off optional\n            }\n        }\n        \n        ///////FALL/SPRING DAY///////\n        if (context.ToD_today == 3) { // fall/spring\n        \tif (context.temp1 > context.weath){ //If it’s colder outside than inside\n                if (context.temp1 < context.thermostat){ //If it’s colder than thermostat set point inside (thermostat is on)\n        \t\t    //If it’s warmer in the living room (temp2) \n                    msg.payload = 3; //// 3 is hot outside open open door (let warm air from living room/kitchen in)\n                } else if (context.temp >= context.thermostat){ //(colder in the living room)\n                    //Close door (isolate space and heat up faster)\n        \t\t    msg.payload = 0; //// 0 is cold outside close Close door (isolate space and heat up faster)\n                } else {\n                    msg.payload = 4; //// 4 is off optional\n                }\n        \t} else{\n        \t    msg.payload = 4;//// 4 is off optional\n        \t}\n        }\n\n    }\n    \n    context.temp1_bool = false;\n    context.weath_bool = false;\n    context.motion_bool = false;\n    context.sunrise_bool = false;\n    context.sunset_bool = false;\n    context.timenow_bool = false;\n    context.temp1 = 0;\n    context.weath = 0;\n    //context.motion = 0;\n    context.sunrise = 0;\n    context.sunset = 0;\n    context.timenow = 0;\n    \n    return msg;\n    \n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\ncontext.sentcommand = context.sentcommand || 0;\ncontext.pending = context.pending || 0;\n\ncontext.sentcommand = 0;\ncontext.pending = 0;",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 260,
        "wires": [
            [
                "21d46a853d866153"
            ]
        ]
    },
    {
        "id": "15c60b5d2013ffee",
        "type": "change",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1100,
        "y": 220,
        "wires": [
            [
                "efd780c317339124",
                "980bdd3d40839142"
            ]
        ]
    },
    {
        "id": "21d46a853d866153",
        "type": "change",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1080,
        "y": 260,
        "wires": [
            [
                "eb93ac89174e2fd2",
                "dfdeb41374b84b3e",
                "4e5f34440d41258e",
                "3df3e6dc17b082b9"
            ]
        ]
    },
    {
        "id": "9a34484e284edde0",
        "type": "change",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1200,
        "y": 820,
        "wires": [
            [
                "d213b35115790d51",
                "ab97c0df923c0ea0"
            ]
        ]
    },
    {
        "id": "676461523f0f3933",
        "type": "change",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1180,
        "y": 860,
        "wires": [
            [
                "dea58727165ccbcf",
                "ebbe760649dcbcff",
                "667cb73f4b7b3e65",
                "6dee21bf117887a6"
            ]
        ]
    },
    {
        "id": "3df3e6dc17b082b9",
        "type": "mqtt out",
        "z": "fd9893a00d3f6cdf",
        "name": "Command_LED_Door1",
        "topic": "command/LED_door1",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bf1930d814d07423",
        "x": 1350,
        "y": 400,
        "wires": []
    },
    {
        "id": "4e5f34440d41258e",
        "type": "influxdb out",
        "z": "fd9893a00d3f6cdf",
        "influxdb": "dfd865d50087ae91",
        "name": "c_LED_door1",
        "measurement": "LED_door1",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1320,
        "y": 360,
        "wires": []
    },
    {
        "id": "667cb73f4b7b3e65",
        "type": "influxdb out",
        "z": "fd9893a00d3f6cdf",
        "influxdb": "41a13a14d732951f",
        "name": "c_LED_window1",
        "measurement": "LED_window1",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1430,
        "y": 960,
        "wires": []
    },
    {
        "id": "6dee21bf117887a6",
        "type": "mqtt out",
        "z": "fd9893a00d3f6cdf",
        "name": "Command_LED_Window1",
        "topic": "command/LED_window1",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bf1930d814d07423",
        "x": 1460,
        "y": 1000,
        "wires": []
    },
    {
        "id": "3a2d69668f2b5f72",
        "type": "inject",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 1010,
        "y": 1220,
        "wires": [
            [
                "6ac5a390b1744335",
                "12668090e78472d8"
            ]
        ]
    },
    {
        "id": "0353204facf1b2e5",
        "type": "inject",
        "z": "fd9893a00d3f6cdf",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 1010,
        "y": 1180,
        "wires": [
            [
                "6ac5a390b1744335",
                "12668090e78472d8"
            ]
        ]
    },
    {
        "id": "33d73b150cf0518f",
        "type": "link out",
        "z": "fd9893a00d3f6cdf",
        "name": "Doors Voice Out",
        "mode": "link",
        "links": [
            "02705b2738bb1acb"
        ],
        "x": 1465,
        "y": 300,
        "wires": []
    },
    {
        "id": "7564f09e67a8d22b",
        "type": "link out",
        "z": "fd9893a00d3f6cdf",
        "name": "Windows Voice Out",
        "mode": "link",
        "links": [
            "02705b2738bb1acb"
        ],
        "x": 1565,
        "y": 900,
        "wires": []
    },
    {
        "id": "02705b2738bb1acb",
        "type": "link in",
        "z": "fd9893a00d3f6cdf",
        "name": "Voice In",
        "links": [
            "33d73b150cf0518f",
            "7564f09e67a8d22b"
        ],
        "x": 325,
        "y": 1560,
        "wires": [
            [
                "d33bb09db856bccc"
            ]
        ]
    },
    {
        "id": "ddf9951773df3845",
        "type": "link in",
        "z": "fd9893a00d3f6cdf",
        "name": "LED Manual Controls In",
        "links": [
            "e3e43d656df17630"
        ],
        "x": 1345,
        "y": 2000,
        "wires": [
            [
                "046b44e20958e18b"
            ]
        ]
    },
    {
        "id": "df892776870f654d",
        "type": "comment",
        "z": "fd9893a00d3f6cdf",
        "name": "LED Manual Controls In",
        "info": "",
        "x": 1210,
        "y": 2000,
        "wires": []
    },
    {
        "id": "0d3b04ab6018e78f",
        "type": "ui_slider",
        "z": "540329ef3817f6bd",
        "name": "Thermostat",
        "label": "Thermostat",
        "tooltip": "",
        "group": "0a60479bc10a638e",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "end",
        "topic": "thermostat",
        "topicType": "msg",
        "min": "15",
        "max": "30",
        "step": "0.1",
        "className": "",
        "x": 190,
        "y": 220,
        "wires": [
            [
                "7405f97b8499029c"
            ]
        ]
    },
    {
        "id": "915a17600e65fa8f",
        "type": "ui_switch",
        "z": "540329ef3817f6bd",
        "name": "Outlet",
        "label": "Outlet",
        "tooltip": "",
        "group": "0a60479bc10a638e",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "light",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 170,
        "y": 120,
        "wires": [
            [
                "6afb93b3178ef785"
            ]
        ]
    },
    {
        "id": "101dad85792be95e",
        "type": "ui_slider",
        "z": "540329ef3817f6bd",
        "name": "Volume",
        "label": "Volume",
        "tooltip": "",
        "group": "0a60479bc10a638e",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "end",
        "topic": "volume",
        "topicType": "msg",
        "min": "0",
        "max": "100",
        "step": "1",
        "className": "",
        "x": 180,
        "y": 320,
        "wires": [
            [
                "241f2eb380e65a7b"
            ]
        ]
    },
    {
        "id": "85d22b26d4aea3dc",
        "type": "ui_dropdown",
        "z": "540329ef3817f6bd",
        "name": "Notification",
        "label": "Notifications",
        "tooltip": "",
        "place": "Select option",
        "group": "0a60479bc10a638e",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Off",
                "value": "Off",
                "type": "str"
            },
            {
                "label": "Success Only",
                "value": "Success",
                "type": "str"
            },
            {
                "label": "Full",
                "value": "Full",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "notification",
        "topicType": "msg",
        "className": "",
        "x": 190,
        "y": 420,
        "wires": [
            [
                "a367289bf8b338fc",
                "2641acd03ab3851b"
            ]
        ]
    },
    {
        "id": "49308d73e362828f",
        "type": "ui_dropdown",
        "z": "540329ef3817f6bd",
        "name": "Indicators",
        "label": "Indicators",
        "tooltip": "",
        "place": "Select option",
        "group": "0a60479bc10a638e",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Off",
                "value": 0,
                "type": "num"
            },
            {
                "label": "Focused",
                "value": 2,
                "type": "num"
            },
            {
                "label": "Full",
                "value": 3,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "indicators",
        "topicType": "msg",
        "className": "",
        "x": 180,
        "y": 520,
        "wires": [
            [
                "f8d7e1cc52a9916a"
            ]
        ]
    },
    {
        "id": "6bd6d217402b3b97",
        "type": "ui_switch",
        "z": "540329ef3817f6bd",
        "name": "Automation",
        "label": "Automation",
        "tooltip": "",
        "group": "0a60479bc10a638e",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "automation",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 190,
        "y": 620,
        "wires": [
            [
                "349c6fa775e542d9"
            ]
        ]
    },
    {
        "id": "241f2eb380e65a7b",
        "type": "json",
        "z": "540329ef3817f6bd",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 330,
        "y": 320,
        "wires": [
            [
                "5a04a0ace42e5fa9",
                "0de5e5a43578b0b1"
            ]
        ]
    },
    {
        "id": "5a04a0ace42e5fa9",
        "type": "influxdb out",
        "z": "540329ef3817f6bd",
        "influxdb": "180a534c8ba67fba",
        "name": "Volume",
        "measurement": "UI/volume",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 480,
        "y": 280,
        "wires": []
    },
    {
        "id": "2641acd03ab3851b",
        "type": "influxdb out",
        "z": "540329ef3817f6bd",
        "influxdb": "180a534c8ba67fba",
        "name": "Notifications",
        "measurement": "UI/notifications",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 510,
        "y": 380,
        "wires": []
    },
    {
        "id": "0de5e5a43578b0b1",
        "type": "mqtt out",
        "z": "540329ef3817f6bd",
        "name": "UI/volume",
        "topic": "UI/volume",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bf1930d814d07423",
        "x": 480,
        "y": 320,
        "wires": []
    },
    {
        "id": "a367289bf8b338fc",
        "type": "mqtt out",
        "z": "540329ef3817f6bd",
        "name": "UI/notifications",
        "topic": "UI/notifications",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bf1930d814d07423",
        "x": 520,
        "y": 420,
        "wires": []
    },
    {
        "id": "48b06c44ed376bd2",
        "type": "influxdb out",
        "z": "540329ef3817f6bd",
        "influxdb": "180a534c8ba67fba",
        "name": "Indicators",
        "measurement": "UI/indicators",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 480,
        "y": 480,
        "wires": []
    },
    {
        "id": "42769b27588ab910",
        "type": "mqtt out",
        "z": "540329ef3817f6bd",
        "name": "UI/indicators",
        "topic": "UI/indicators",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bf1930d814d07423",
        "x": 490,
        "y": 520,
        "wires": []
    },
    {
        "id": "7405f97b8499029c",
        "type": "json",
        "z": "540329ef3817f6bd",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 350,
        "y": 220,
        "wires": [
            [
                "820d315c45e21918",
                "d66db2370bd383b3"
            ]
        ]
    },
    {
        "id": "820d315c45e21918",
        "type": "influxdb out",
        "z": "540329ef3817f6bd",
        "influxdb": "180a534c8ba67fba",
        "name": "Thermostat",
        "measurement": "UI/thermostat",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 510,
        "y": 180,
        "wires": []
    },
    {
        "id": "d66db2370bd383b3",
        "type": "mqtt out",
        "z": "540329ef3817f6bd",
        "name": "UI/thermostat",
        "topic": "UI/thermostat",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bf1930d814d07423",
        "x": 520,
        "y": 220,
        "wires": []
    },
    {
        "id": "6afb93b3178ef785",
        "type": "json",
        "z": "540329ef3817f6bd",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 310,
        "y": 120,
        "wires": [
            [
                "07119e2bc8253367",
                "5fc885a21ea92243"
            ]
        ]
    },
    {
        "id": "07119e2bc8253367",
        "type": "influxdb out",
        "z": "540329ef3817f6bd",
        "influxdb": "180a534c8ba67fba",
        "name": "Outlet",
        "measurement": "UI/outlet",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 450,
        "y": 80,
        "wires": []
    },
    {
        "id": "5fc885a21ea92243",
        "type": "mqtt out",
        "z": "540329ef3817f6bd",
        "name": "UI/outlet",
        "topic": "UI/outlet",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bf1930d814d07423",
        "x": 460,
        "y": 120,
        "wires": []
    },
    {
        "id": "12b42021f39e7ff7",
        "type": "mqtt out",
        "z": "540329ef3817f6bd",
        "name": "UI/automation",
        "topic": "UI/automation",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bf1930d814d07423",
        "x": 520,
        "y": 620,
        "wires": []
    },
    {
        "id": "349c6fa775e542d9",
        "type": "json",
        "z": "540329ef3817f6bd",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 350,
        "y": 620,
        "wires": [
            [
                "7147d32382bdf242",
                "12b42021f39e7ff7"
            ]
        ]
    },
    {
        "id": "7147d32382bdf242",
        "type": "influxdb out",
        "z": "540329ef3817f6bd",
        "influxdb": "180a534c8ba67fba",
        "name": "Automation",
        "measurement": "UI/automation",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 510,
        "y": 580,
        "wires": []
    },
    {
        "id": "f8d7e1cc52a9916a",
        "type": "json",
        "z": "540329ef3817f6bd",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 330,
        "y": 520,
        "wires": [
            [
                "42769b27588ab910",
                "48b06c44ed376bd2"
            ]
        ]
    },
    {
        "id": "835f978895dd6f19",
        "type": "ui_switch",
        "z": "540329ef3817f6bd",
        "name": "Light",
        "label": "Lights",
        "tooltip": "",
        "group": "0a60479bc10a638e",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "lights",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 170,
        "y": 720,
        "wires": [
            [
                "778441d0f90b7ad9"
            ]
        ]
    },
    {
        "id": "b98418cffa456a2b",
        "type": "mqtt out",
        "z": "540329ef3817f6bd",
        "name": "UI/lights",
        "topic": "UI/lights",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bf1930d814d07423",
        "x": 500,
        "y": 720,
        "wires": []
    },
    {
        "id": "778441d0f90b7ad9",
        "type": "json",
        "z": "540329ef3817f6bd",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 350,
        "y": 720,
        "wires": [
            [
                "c6e2e4e77f8b988f",
                "b98418cffa456a2b"
            ]
        ]
    },
    {
        "id": "c6e2e4e77f8b988f",
        "type": "influxdb out",
        "z": "540329ef3817f6bd",
        "influxdb": "180a534c8ba67fba",
        "name": "Lights",
        "measurement": "UI/lights",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 490,
        "y": 680,
        "wires": []
    },
    {
        "id": "da213d93f4992e7e",
        "type": "ui_slider",
        "z": "540329ef3817f6bd",
        "name": "Curtain",
        "label": "Curtain",
        "tooltip": "",
        "group": "0a60479bc10a638e",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "end",
        "topic": "curtain",
        "topicType": "msg",
        "min": "0",
        "max": "100",
        "step": "1",
        "className": "",
        "x": 180,
        "y": 820,
        "wires": [
            [
                "b88979f2bfc39c5d"
            ]
        ]
    },
    {
        "id": "b88979f2bfc39c5d",
        "type": "json",
        "z": "540329ef3817f6bd",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 310,
        "y": 820,
        "wires": [
            [
                "8da69ce1f0503b3c",
                "e01cd49c5de1f2b6",
                "f0d31912a9563a73"
            ]
        ]
    },
    {
        "id": "8da69ce1f0503b3c",
        "type": "influxdb out",
        "z": "540329ef3817f6bd",
        "influxdb": "180a534c8ba67fba",
        "name": "Curtain",
        "measurement": "UI/curtain",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 460,
        "y": 780,
        "wires": []
    },
    {
        "id": "e01cd49c5de1f2b6",
        "type": "mqtt out",
        "z": "540329ef3817f6bd",
        "name": "UI/curtain",
        "topic": "UI/curtain",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bf1930d814d07423",
        "x": 460,
        "y": 820,
        "wires": []
    },
    {
        "id": "4511bde7b521f578",
        "type": "ikea-homesmart",
        "z": "540329ef3817f6bd",
        "name": "curtain",
        "deviceId": "65536",
        "deviceName": "curtain",
        "deviceType": "ikea-blinds",
        "deviceIcon": "font-awesome/fa-window-maximize",
        "connection": "a99e1f0cbc6fe605",
        "observe": true,
        "x": 1130,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "f0d31912a9563a73",
        "type": "function",
        "z": "540329ef3817f6bd",
        "name": "",
        "func": "//100 is open blind\n//0 is closed blind\n\nif (msg.payload == 0 || msg.payload){\n    msg.payload = {\n      \"position\": (100-msg.payload),\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 840,
        "wires": [
            [
                "4511bde7b521f578"
            ]
        ]
    },
    {
        "id": "4d0384c64d78af3e",
        "type": "influxdb in",
        "z": "540329ef3817f6bd",
        "influxdb": "07299e0d42195927",
        "name": "Read light_sensors",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 550,
        "y": 880,
        "wires": [
            [
                "5abd124afdd9977d"
            ]
        ]
    },
    {
        "id": "85d8a514582b554d",
        "type": "function",
        "z": "540329ef3817f6bd",
        "name": "Query c_curtain",
        "func": "\nmsg.query = 'select * from \"curtain1\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 880,
        "wires": [
            [
                "4d0384c64d78af3e"
            ]
        ]
    },
    {
        "id": "5abd124afdd9977d",
        "type": "change",
        "z": "540329ef3817f6bd",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 880,
        "wires": [
            [
                "94593bd7c9486542"
            ]
        ]
    },
    {
        "id": "94593bd7c9486542",
        "type": "function",
        "z": "540329ef3817f6bd",
        "name": "",
        "func": "//100 is open blind\n//0 is closed blind\n\ncontext.automation = context.automation || false;\n\nif (msg.automation){\n    context.automation = msg.automation;\n}\n\nif (context.automation){\n    if (msg.payload == 0){\n        msg.payload = {\n          \"position\": 0,\n        }\n    }\n    \n    if (msg.payload == 1){\n        msg.payload = {\n          \"position\": 100, //\n        }\n    }\n    \n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 880,
        "wires": [
            [
                "4511bde7b521f578"
            ]
        ]
    },
    {
        "id": "4f0ec0e38a4041fe",
        "type": "inject",
        "z": "540329ef3817f6bd",
        "name": "Fetch",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": "60",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 210,
        "y": 880,
        "wires": [
            [
                "85d8a514582b554d"
            ]
        ]
    },
    {
        "id": "fcb3ad63cb3da71d",
        "type": "influxdb in",
        "z": "540329ef3817f6bd",
        "influxdb": "180a534c8ba67fba",
        "name": "Read UI/automation",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 600,
        "y": 920,
        "wires": [
            [
                "a91dd2a490c6256f"
            ]
        ]
    },
    {
        "id": "8a2becb8aca6d989",
        "type": "function",
        "z": "540329ef3817f6bd",
        "name": "Query UI/automation",
        "func": "\nmsg.query = 'select * from \"UI/automation\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 920,
        "wires": [
            [
                "fcb3ad63cb3da71d"
            ]
        ]
    },
    {
        "id": "2655cfeaa4b3954e",
        "type": "inject",
        "z": "540329ef3817f6bd",
        "name": "Fetch",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": "60",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 210,
        "y": 920,
        "wires": [
            [
                "8a2becb8aca6d989"
            ]
        ]
    },
    {
        "id": "a91dd2a490c6256f",
        "type": "change",
        "z": "540329ef3817f6bd",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "automation",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 920,
        "wires": [
            [
                "94593bd7c9486542"
            ]
        ]
    },
    {
        "id": "37d695990c53f614",
        "type": "http in",
        "z": "540329ef3817f6bd",
        "name": "",
        "url": "",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "e27ca1e306ec26bb",
        "type": "inject",
        "z": "84397578eef371ef",
        "name": "OFF-999",
        "props": [
            {
                "p": "command",
                "v": "999",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 180,
        "y": 100,
        "wires": [
            [
                "e3e43d656df17630"
            ]
        ]
    },
    {
        "id": "93287bd3be272d34",
        "type": "comment",
        "z": "84397578eef371ef",
        "name": "LEDs",
        "info": "",
        "x": 150,
        "y": 60,
        "wires": []
    },
    {
        "id": "13bd1cfeb82c80cd",
        "type": "inject",
        "z": "84397578eef371ef",
        "name": "+CONVERGEDOORCOLD-1",
        "props": [
            {
                "p": "command",
                "v": "1",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 240,
        "y": 380,
        "wires": [
            [
                "e3e43d656df17630"
            ]
        ]
    },
    {
        "id": "b98e9f82f43024c0",
        "type": "inject",
        "z": "84397578eef371ef",
        "name": "+CONVERGEDOORHOT-2",
        "props": [
            {
                "p": "command",
                "v": "2",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 240,
        "y": 420,
        "wires": [
            [
                "e3e43d656df17630"
            ]
        ]
    },
    {
        "id": "fea01f78aa4fc89f",
        "type": "inject",
        "z": "84397578eef371ef",
        "name": "+DIVERGEDOORCOLD-4",
        "props": [
            {
                "p": "command",
                "v": "4",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 230,
        "y": 460,
        "wires": [
            [
                "e3e43d656df17630"
            ]
        ]
    },
    {
        "id": "248d8dbd4afe9b51",
        "type": "inject",
        "z": "84397578eef371ef",
        "name": "+DIVERGEDOORHOT-3",
        "props": [
            {
                "p": "command",
                "v": "3",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 230,
        "y": 500,
        "wires": [
            [
                "e3e43d656df17630"
            ]
        ]
    },
    {
        "id": "34beaaa61dbf0b26",
        "type": "inject",
        "z": "84397578eef371ef",
        "name": "+CONVERGEWINCOLD-5",
        "props": [
            {
                "p": "command",
                "v": "5",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 230,
        "y": 640,
        "wires": [
            [
                "e3e43d656df17630"
            ]
        ]
    },
    {
        "id": "df5715480556cbe2",
        "type": "inject",
        "z": "84397578eef371ef",
        "name": "+CONVERGEWINHOT-6",
        "props": [
            {
                "p": "command",
                "v": "6",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 230,
        "y": 680,
        "wires": [
            [
                "e3e43d656df17630"
            ]
        ]
    },
    {
        "id": "392721271efdfad9",
        "type": "inject",
        "z": "84397578eef371ef",
        "name": "+DIVERGEWINCOLD-8",
        "props": [
            {
                "p": "command",
                "v": "8",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 220,
        "y": 720,
        "wires": [
            [
                "e3e43d656df17630"
            ]
        ]
    },
    {
        "id": "4560aeb36adcf42e",
        "type": "inject",
        "z": "84397578eef371ef",
        "name": "+DIVERGEWINHOT-7",
        "props": [
            {
                "p": "command",
                "v": "7",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 220,
        "y": 760,
        "wires": [
            [
                "e3e43d656df17630"
            ]
        ]
    },
    {
        "id": "49dd13b4c1480b45",
        "type": "comment",
        "z": "84397578eef371ef",
        "name": "Full 1st:",
        "info": "",
        "x": 150,
        "y": 340,
        "wires": []
    },
    {
        "id": "3d4493e11a1a601c",
        "type": "inject",
        "z": "84397578eef371ef",
        "name": "CONVERGEDOORCOLD-17",
        "props": [
            {
                "p": "command",
                "v": "17",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 520,
        "y": 380,
        "wires": [
            [
                "e3e43d656df17630"
            ]
        ]
    },
    {
        "id": "1145e6d37524c674",
        "type": "inject",
        "z": "84397578eef371ef",
        "name": "CONVERGEDOORHOT-16",
        "props": [
            {
                "p": "command",
                "v": "16",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 520,
        "y": 420,
        "wires": [
            [
                "e3e43d656df17630"
            ]
        ]
    },
    {
        "id": "95969d2365fc139c",
        "type": "inject",
        "z": "84397578eef371ef",
        "name": "DIVERGEDOORCOLD-18",
        "props": [
            {
                "p": "command",
                "v": "18",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 510,
        "y": 460,
        "wires": [
            [
                "e3e43d656df17630"
            ]
        ]
    },
    {
        "id": "088746b5468196ee",
        "type": "inject",
        "z": "84397578eef371ef",
        "name": "DIVERGEDOORHOT-19",
        "props": [
            {
                "p": "command",
                "v": "19",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 510,
        "y": 500,
        "wires": [
            [
                "e3e43d656df17630"
            ]
        ]
    },
    {
        "id": "19572c73306d47f8",
        "type": "inject",
        "z": "84397578eef371ef",
        "name": "CONVERGEWINCOLD-13",
        "props": [
            {
                "p": "command",
                "v": "13",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 510,
        "y": 640,
        "wires": [
            [
                "e3e43d656df17630"
            ]
        ]
    },
    {
        "id": "dc42bdf3c5d840b3",
        "type": "inject",
        "z": "84397578eef371ef",
        "name": "CONVERGEWINHOT-10",
        "props": [
            {
                "p": "command",
                "v": "10",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 510,
        "y": 680,
        "wires": [
            [
                "e3e43d656df17630"
            ]
        ]
    },
    {
        "id": "51d2ef8f2d5674f8",
        "type": "inject",
        "z": "84397578eef371ef",
        "name": "DIVERGEWINCOLD-12",
        "props": [
            {
                "p": "command",
                "v": "12",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 500,
        "y": 720,
        "wires": [
            [
                "e3e43d656df17630"
            ]
        ]
    },
    {
        "id": "b59f73ed967f44eb",
        "type": "inject",
        "z": "84397578eef371ef",
        "name": "DIVERGEWINHOT-11",
        "props": [
            {
                "p": "command",
                "v": "11",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 500,
        "y": 760,
        "wires": [
            [
                "e3e43d656df17630"
            ]
        ]
    },
    {
        "id": "ae437950085e9991",
        "type": "comment",
        "z": "84397578eef371ef",
        "name": "Full 2nd:",
        "info": "",
        "x": 460,
        "y": 340,
        "wires": []
    },
    {
        "id": "cbc1e6252e475363",
        "type": "inject",
        "z": "84397578eef371ef",
        "name": "CONVERGEDOORNEUTRAL-21",
        "props": [
            {
                "p": "command",
                "v": "21",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 810,
        "y": 380,
        "wires": [
            [
                "e3e43d656df17630"
            ]
        ]
    },
    {
        "id": "f80a35204792f45b",
        "type": "inject",
        "z": "84397578eef371ef",
        "name": "DIVERGEDOORNEUTRAL-20",
        "props": [
            {
                "p": "command",
                "v": "20",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 800,
        "y": 420,
        "wires": [
            [
                "e3e43d656df17630"
            ]
        ]
    },
    {
        "id": "a4e285e146e77ff7",
        "type": "inject",
        "z": "84397578eef371ef",
        "name": "CONVERGEWINNEUTRAL-14",
        "props": [
            {
                "p": "command",
                "v": "14",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 800,
        "y": 640,
        "wires": [
            [
                "e3e43d656df17630"
            ]
        ]
    },
    {
        "id": "29dcb203ce32db6d",
        "type": "inject",
        "z": "84397578eef371ef",
        "name": "DIVERGEWINNEUTRAL-15",
        "props": [
            {
                "p": "command",
                "v": "15",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 790,
        "y": 680,
        "wires": [
            [
                "e3e43d656df17630"
            ]
        ]
    },
    {
        "id": "92dc54ffead4e175",
        "type": "comment",
        "z": "84397578eef371ef",
        "name": "Focused:",
        "info": "",
        "x": 720,
        "y": 340,
        "wires": []
    },
    {
        "id": "be03f8ab2d74337c",
        "type": "inject",
        "z": "84397578eef371ef",
        "name": "ACCOMPLISHED-9",
        "props": [
            {
                "p": "command",
                "v": "9",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 140,
        "wires": [
            [
                "e3e43d656df17630"
            ]
        ]
    },
    {
        "id": "0b49fd045cd81a85",
        "type": "comment",
        "z": "84397578eef371ef",
        "name": "DOOR",
        "info": "",
        "x": 150,
        "y": 300,
        "wires": []
    },
    {
        "id": "4e50e3057f0dde63",
        "type": "comment",
        "z": "84397578eef371ef",
        "name": "Full 1st:",
        "info": "",
        "x": 150,
        "y": 600,
        "wires": []
    },
    {
        "id": "47c77824da3853c2",
        "type": "comment",
        "z": "84397578eef371ef",
        "name": "Full 2nd:",
        "info": "",
        "x": 440,
        "y": 600,
        "wires": []
    },
    {
        "id": "c631066bcd19e201",
        "type": "comment",
        "z": "84397578eef371ef",
        "name": "Focused:",
        "info": "",
        "x": 720,
        "y": 600,
        "wires": []
    },
    {
        "id": "1f7b7c2e04b36ac7",
        "type": "comment",
        "z": "84397578eef371ef",
        "name": "WINDOW",
        "info": "",
        "x": 160,
        "y": 560,
        "wires": []
    },
    {
        "id": "d9b126377e3a3a78",
        "type": "inject",
        "z": "84397578eef371ef",
        "name": "GREENOFF-22",
        "props": [
            {
                "p": "command",
                "v": "22",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 200,
        "y": 180,
        "wires": [
            [
                "e3e43d656df17630"
            ]
        ]
    },
    {
        "id": "c4c0087ccf80743e",
        "type": "inject",
        "z": "84397578eef371ef",
        "name": "LIGHTSON-23",
        "props": [
            {
                "p": "command",
                "v": "23",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 200,
        "y": 220,
        "wires": [
            [
                "e3e43d656df17630"
            ]
        ]
    },
    {
        "id": "e3e43d656df17630",
        "type": "link out",
        "z": "84397578eef371ef",
        "name": "LED Manual Controls",
        "mode": "link",
        "links": [
            "ddf9951773df3845"
        ],
        "x": 1195,
        "y": 420,
        "wires": []
    },
    {
        "id": "d0347aed543a5551",
        "type": "influxdb in",
        "z": "33b0151b3bde76ac",
        "influxdb": "8181f6d9dc076d46",
        "name": "Read TEMP1",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 480,
        "y": 100,
        "wires": [
            [
                "f73633a04fe9e1ea"
            ]
        ]
    },
    {
        "id": "385f32cede111abc",
        "type": "function",
        "z": "33b0151b3bde76ac",
        "name": "Query TEMP1",
        "func": "\nmsg.query = 'select * from \"tele/9c3fe8/TEMP1\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 100,
        "wires": [
            [
                "d0347aed543a5551"
            ]
        ]
    },
    {
        "id": "410eae5246f11f73",
        "type": "influxdb in",
        "z": "33b0151b3bde76ac",
        "influxdb": "cfe68d916a9a6da8",
        "name": "Read current_weather",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 540,
        "y": 140,
        "wires": [
            [
                "6569db95e4af86a4"
            ]
        ]
    },
    {
        "id": "5acb275c28e1e7dc",
        "type": "function",
        "z": "33b0151b3bde76ac",
        "name": "Query current_weather",
        "func": "\nmsg.query = 'select * from \"current_weather\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 140,
        "wires": [
            [
                "410eae5246f11f73"
            ]
        ]
    },
    {
        "id": "f73633a04fe9e1ea",
        "type": "change",
        "z": "33b0151b3bde76ac",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "temp1",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 100,
        "wires": [
            [
                "b672c4b245733660"
            ]
        ]
    },
    {
        "id": "6569db95e4af86a4",
        "type": "change",
        "z": "33b0151b3bde76ac",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "weath",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 140,
        "wires": [
            [
                "b672c4b245733660"
            ]
        ]
    },
    {
        "id": "b672c4b245733660",
        "type": "function",
        "z": "33b0151b3bde76ac",
        "name": "Old Window Logic",
        "func": "// 0 is closed\n// 1 is open\n// 2 is option\n\ncontext.temp1_bool = context.temp1_bool || false;\ncontext.temp1 = context.temp1 || 0;\ncontext.weath_bool = context.weath_bool || false;\ncontext.weath = context.weath || 0;\ncontext.fore_bool = context.fore_bool || false;\ncontext.fore = context.fore || 0;\ncontext.motion_bool = context.motion_bool || false;\ncontext.motion = context.motion || 0;\ncontext.sunrise_bool = context.sunrise_bool || false;\ncontext.sunrise = context.sunrise || 0;\ncontext.sunset_bool = context.sunset_bool || false;\ncontext.sunset = context.sunset || 0;\ncontext.timenow_bool = context.timenow_bool || false;\ncontext.timenow = context.timenow || 0;\n\nvar tmax_comfort = 24;              //max temp for too hot\nvar tmin_comfort = 21;               //min temp for too cold\n\n// WAIT FOR ALL SIGNALS TO BE RECEIVED\nif (msg.temp1){\n    context.temp1 = msg.temp1;\n    context.temp1_bool = true;\n}\n\nif (msg.weath){\n    context.weath = msg.weath;\n    context.weath_bool = true;\n}\n\nif (msg.fore){\n    context.fore = msg.fore;\n    context.fore_bool = true;\n}\n\nif (msg.sunrise){\n    context.sunrise = msg.sunrise * 1000;\n    context.sunrise_bool = true;\n}\n\nif (msg.sunset){\n    context.sunset = msg.sunset * 1000;\n    context.sunset_bool = true;\n}\n\nif (msg.timenow){\n    context.timenow = msg.timenow;\n    context.timenow_bool = true;\n}\n\nif (msg.motion == 0 || msg.motion == 1){\n    if (msg.motion == 1){ //if motion detected, save time\n        context.lastmotion = context.timenow;\n        context.motion = msg.motion;\n        context.motion_bool = true;\n    }\n    \n    if(context.timenow > context.lastmotion + 300000){ //if more than 5 minutes with no motion\n        context.motion = msg.motion;\n        context.motion_bool = true;\n    } else{\n        context.motion = 1;\n        context.motion_bool = true;\n    }\n}\n\n//RUN ALGORITHM AFTER ALL SIGNALS RECEIVED\nif (context.temp1_bool && context.weath_bool && context.fore_bool && context.motion_bool && context.sunrise_bool && context.sunset_bool && context.timenow_bool){\n    \n    if (context.motion == 0 || context.timenow < context.sunrise || context.timenow > context.sunset){           //if no one is around or night\n        msg.payload = 2;        //option\n    } \n    //...if motion is detected...\n    else if (context.temp1 > context.weath+1 && context.weath < tmin_comfort || context.weath > tmax_comfort) {  //cold outside or too hot\n        msg.payload = 0;        //closed\n    } else if (context.temp1 < context.weath-1 && context.weath < tmax_comfort && context.weath > tmin_comfort) {  //hot outside, but not too hot\n        msg.payload = 1;        //open\n    } else {\n        msg.payload = 0;            //closed\n    }\n\n    context.temp1_bool = false;\n    context.weath_bool = false;\n    context.fore_bool = false;\n    context.motion_bool = false;\n    context.sunrise_bool = false;\n    context.sunset_bool = false;\n    context.timenow_bool = false;\n    context.temp1 = 0;\n    context.weath = 0;\n    context.fore = 0;\n    //context.motion = 0;\n    context.sunrise = 0;\n    context.sunset = 0;\n    context.timenow = 0;\n    \n    return msg;\n    \n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\ncontext.sentcommand = context.sentcommand || 0;\ncontext.pending = context.pending || 0;\n\ncontext.sentcommand = 0;\ncontext.pending = 0;",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "f3a64dc588827847",
        "type": "influxdb in",
        "z": "33b0151b3bde76ac",
        "influxdb": "56e8016bbfd59dd7",
        "name": "Read forecast_weather",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 570,
        "y": 180,
        "wires": [
            [
                "835c965781cffca7"
            ]
        ]
    },
    {
        "id": "f7462814b464ca9b",
        "type": "function",
        "z": "33b0151b3bde76ac",
        "name": "Query forecast_weather",
        "func": "\nmsg.query = 'select * from \"forecast_weather\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 180,
        "wires": [
            [
                "f3a64dc588827847"
            ]
        ]
    },
    {
        "id": "835c965781cffca7",
        "type": "change",
        "z": "33b0151b3bde76ac",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "fore",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 180,
        "wires": [
            [
                "b672c4b245733660"
            ]
        ]
    },
    {
        "id": "e53044901acf2038",
        "type": "influxdb in",
        "z": "33b0151b3bde76ac",
        "influxdb": "bc2ca31505293e84",
        "name": "Read motion_sensors",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 520,
        "y": 220,
        "wires": [
            [
                "73d03ea39710b972"
            ]
        ]
    },
    {
        "id": "cbbfbd02377ff1c2",
        "type": "function",
        "z": "33b0151b3bde76ac",
        "name": "Query MOTION1",
        "func": "\nmsg.query = 'select * from \"tele/9c3b5e/MOTION1\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 220,
        "wires": [
            [
                "e53044901acf2038"
            ]
        ]
    },
    {
        "id": "73d03ea39710b972",
        "type": "change",
        "z": "33b0151b3bde76ac",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "motion",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 220,
        "wires": [
            [
                "b672c4b245733660"
            ]
        ]
    },
    {
        "id": "10281cd0765da7af",
        "type": "comment",
        "z": "33b0151b3bde76ac",
        "name": "Window Algorithm",
        "info": "",
        "x": 190,
        "y": 60,
        "wires": []
    },
    {
        "id": "8eb8af6a6ee2a06c",
        "type": "function",
        "z": "33b0151b3bde76ac",
        "name": "Query WINDOW1",
        "func": "\nmsg.query = 'select * from \"tele/298512/WINDOW1\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 260,
        "wires": [
            [
                "bb99c0af570ad225"
            ]
        ]
    },
    {
        "id": "bb99c0af570ad225",
        "type": "influxdb in",
        "z": "33b0151b3bde76ac",
        "influxdb": "a679213909ea0180",
        "name": "Read window_sensors",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 520,
        "y": 260,
        "wires": [
            [
                "b7b99080bb65a0d5"
            ]
        ]
    },
    {
        "id": "b7b99080bb65a0d5",
        "type": "change",
        "z": "33b0151b3bde76ac",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "window1",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 260,
        "wires": [
            [
                "b672c4b245733660"
            ]
        ]
    },
    {
        "id": "0ac0685449102372",
        "type": "influxdb in",
        "z": "33b0151b3bde76ac",
        "influxdb": "0f055c5f74a251a8",
        "name": "Read sunrise",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 470,
        "y": 300,
        "wires": [
            [
                "9fe55fc92dc7a621"
            ]
        ]
    },
    {
        "id": "31a1f66a4f66e167",
        "type": "function",
        "z": "33b0151b3bde76ac",
        "name": "Query sunrise",
        "func": "\nmsg.query = 'select * from \"sunrise\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 300,
        "wires": [
            [
                "0ac0685449102372"
            ]
        ]
    },
    {
        "id": "9fe55fc92dc7a621",
        "type": "change",
        "z": "33b0151b3bde76ac",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "sunrise",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 300,
        "wires": [
            [
                "b672c4b245733660"
            ]
        ]
    },
    {
        "id": "88c4954399ce6971",
        "type": "influxdb in",
        "z": "33b0151b3bde76ac",
        "influxdb": "213fc452357b6b1d",
        "name": "Read sunset",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 450,
        "y": 340,
        "wires": [
            [
                "c996af39e75f6b47"
            ]
        ]
    },
    {
        "id": "eea1485f99ee3efb",
        "type": "function",
        "z": "33b0151b3bde76ac",
        "name": "Query sunset",
        "func": "\nmsg.query = 'select * from \"sunset\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 340,
        "wires": [
            [
                "88c4954399ce6971"
            ]
        ]
    },
    {
        "id": "c996af39e75f6b47",
        "type": "change",
        "z": "33b0151b3bde76ac",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "sunset",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 340,
        "wires": [
            [
                "b672c4b245733660"
            ]
        ]
    },
    {
        "id": "5a5b586f31cb432a",
        "type": "inject",
        "z": "33b0151b3bde76ac",
        "name": "msg.timenow",
        "props": [
            {
                "p": "timenow",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": "10",
        "topic": "",
        "x": 620,
        "y": 380,
        "wires": [
            [
                "b672c4b245733660"
            ]
        ]
    },
    {
        "id": "abd3603b5e0aa34f",
        "type": "inject",
        "z": "33b0151b3bde76ac",
        "name": "Fetch",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": "60",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 100,
        "wires": [
            [
                "385f32cede111abc"
            ]
        ]
    },
    {
        "id": "4738f3369e08343d",
        "type": "inject",
        "z": "33b0151b3bde76ac",
        "name": "Fetch",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": "60",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 140,
        "wires": [
            [
                "5acb275c28e1e7dc"
            ]
        ]
    },
    {
        "id": "8a224f9ef8d90d51",
        "type": "inject",
        "z": "33b0151b3bde76ac",
        "name": "Fetch",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": "60",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 180,
        "wires": [
            [
                "f7462814b464ca9b"
            ]
        ]
    },
    {
        "id": "bbf6059421c86750",
        "type": "inject",
        "z": "33b0151b3bde76ac",
        "name": "Fetch",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": "60",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 220,
        "wires": [
            [
                "cbbfbd02377ff1c2"
            ]
        ]
    },
    {
        "id": "a81a775c183b73f0",
        "type": "inject",
        "z": "33b0151b3bde76ac",
        "name": "Fetch",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": "60",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 260,
        "wires": [
            [
                "8eb8af6a6ee2a06c"
            ]
        ]
    },
    {
        "id": "22e177789fedab31",
        "type": "inject",
        "z": "33b0151b3bde76ac",
        "name": "Fetch",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": "60",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 300,
        "wires": [
            [
                "31a1f66a4f66e167"
            ]
        ]
    },
    {
        "id": "fb1020b6c7be057e",
        "type": "inject",
        "z": "33b0151b3bde76ac",
        "name": "Fetch",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": "60",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 340,
        "wires": [
            [
                "eea1485f99ee3efb"
            ]
        ]
    },
    {
        "id": "c20b42e5c55f73b4",
        "type": "comment",
        "z": "33b0151b3bde76ac",
        "name": "Curtain Algorithm",
        "info": "",
        "x": 180,
        "y": 440,
        "wires": []
    },
    {
        "id": "4b54ddfaea721b96",
        "type": "function",
        "z": "33b0151b3bde76ac",
        "name": "Curtain Logic",
        "func": "// 0 is closed\n// 1 is open\n// 2 is option\n\ncontext.temp1_bool = context.temp1_bool || false;\ncontext.temp1 = context.temp1 || 0;\ncontext.weath_bool = context.weath_bool || false;\ncontext.weath = context.weath || 0;\ncontext.motion_bool = context.motion_bool || false;\ncontext.motion = context.motion || 0;\ncontext.light_bool = context.light_bool || false;\ncontext.light = context.light || 0;\ncontext.sunrise_bool = context.sunrise_bool || false;\ncontext.sunrise = context.sunrise || 0;\ncontext.sunset_bool = context.sunset_bool || false;\ncontext.sunset = context.sunset || 0;\ncontext.timenow_bool = context.timenow_bool || false;\ncontext.timenow = context.timenow || 0;\n\nvar tmax_comfort = 24;              //max temp for too hot\nvar tmin_comfort = 21;               //min temp for too cold\nvar hour = new Date(context.timenow)\n\n\n// WAIT FOR ALL SIGNALS TO BE RECEIVED\nif (msg.temp1){\n    context.temp1 = msg.temp1;\n    context.temp1_bool = true;\n}\n\nif (msg.weath){\n    context.weath = msg.weath;\n    context.weath_bool = true;\n}\n\nif (msg.light){\n    context.light = msg.light;\n    context.light_bool = true;\n}\n\nif (msg.sunrise){\n    context.sunrise = msg.sunrise * 1000;\n    context.sunrise_bool = true;\n}\n\nif (msg.sunset){\n    context.sunset = msg.sunset * 1000;\n    context.sunset_bool = true;\n}\n\nif (msg.timenow){\n    context.timenow = msg.timenow;\n    context.timenow_bool = true;\n}\n\nif (msg.motion == 0 || msg.motion == 1){\n    if (msg.motion == 1){ //if motion detected, save time\n        context.lastmotion = context.timenow;\n        context.motion = msg.motion;\n        context.motion_bool = true;\n    }\n    \n    if(context.timenow > context.lastmotion + 300000){ //if more than 5 minutes with no motion\n        context.motion = msg.motion;\n        context.motion_bool = true;\n    } else{\n        context.motion = 1;\n        context.motion_bool = true;\n    }\n}\n\n//RUN ALGORITHM AFTER ALL SIGNALS RECEIVED\nif (context.motion_bool && context.light_bool && context.sunrise_bool && context.sunset_bool && context.timenow_bool){\n    \n    if (context.motion == 0 || context.timenow < context.sunrise || hour.getHours() > 22){           //if no one is around\n        msg.payload = 2;        //option\n    } else if (context.light > 800 || (context.weath > context.temp1 && context.weath > tmin_comfort)) {  //light outside\n        msg.payload = 1;         // open\n    } else if (context.light <800 || (context.weath < context.temp1 && context.weath < tmin_comfort)) {   //dark outside\n        msg.payload = 0;         // close\n    } else{\n        msg.payload = 2;\n    }\n\n    \n    context.temp1_bool = false;\n    context.weath_bool = false;\n    context.motion_bool = false;\n    context.light_bool = false;\n    context.sunrise_bool = false;\n    context.sunset_bool = false;\n    context.timenow_bool = false;\n    context.temp1 = 0;\n    context.weath = 0;\n    //context.motion = 0;\n    context.light = 0;\n    context.sunrise = 0;\n    context.sunset = 0;\n    context.timenow = 0;\n    \n    return msg;\n    \n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\ncontext.sentcommand = context.sentcommand || 0;\ncontext.pending = context.pending || 0;\n\ncontext.sentcommand = 0;\ncontext.pending = 0;",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "c3790ca4b969a55d",
        "type": "influxdb in",
        "z": "33b0151b3bde76ac",
        "influxdb": "bc2ca31505293e84",
        "name": "Read motion_sensors",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 540,
        "y": 560,
        "wires": [
            [
                "f490d9e8fa28e50e"
            ]
        ]
    },
    {
        "id": "6426da94e23495d9",
        "type": "function",
        "z": "33b0151b3bde76ac",
        "name": "Query MOTION1",
        "func": "\nmsg.query = 'select * from \"tele/9c3b5e/MOTION1\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 560,
        "wires": [
            [
                "c3790ca4b969a55d"
            ]
        ]
    },
    {
        "id": "f490d9e8fa28e50e",
        "type": "change",
        "z": "33b0151b3bde76ac",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "motion",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 560,
        "wires": [
            [
                "4b54ddfaea721b96"
            ]
        ]
    },
    {
        "id": "48ac993f4475a967",
        "type": "influxdb in",
        "z": "33b0151b3bde76ac",
        "influxdb": "1cbfd82388df1f9c",
        "name": "Read light_sensors",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 490,
        "y": 600,
        "wires": [
            [
                "ee09d4d972c242ae"
            ]
        ]
    },
    {
        "id": "0ceff1457ade2b51",
        "type": "function",
        "z": "33b0151b3bde76ac",
        "name": "Query LIGHT1",
        "func": "\nmsg.query = 'select * from \"tele/4fd36e/LIGHT1\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 600,
        "wires": [
            [
                "48ac993f4475a967"
            ]
        ]
    },
    {
        "id": "ee09d4d972c242ae",
        "type": "change",
        "z": "33b0151b3bde76ac",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "light",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 600,
        "wires": [
            [
                "4b54ddfaea721b96"
            ]
        ]
    },
    {
        "id": "a121960f19420971",
        "type": "influxdb in",
        "z": "33b0151b3bde76ac",
        "influxdb": "0f055c5f74a251a8",
        "name": "Read sunrise",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 470,
        "y": 640,
        "wires": [
            [
                "9bc2a8307fd32658"
            ]
        ]
    },
    {
        "id": "3fc78af240697a7d",
        "type": "function",
        "z": "33b0151b3bde76ac",
        "name": "Query sunrise",
        "func": "\nmsg.query = 'select * from \"sunrise\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 640,
        "wires": [
            [
                "a121960f19420971"
            ]
        ]
    },
    {
        "id": "9bc2a8307fd32658",
        "type": "change",
        "z": "33b0151b3bde76ac",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "sunrise",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 640,
        "wires": [
            [
                "4b54ddfaea721b96"
            ]
        ]
    },
    {
        "id": "4ce6bfb68e8de073",
        "type": "influxdb in",
        "z": "33b0151b3bde76ac",
        "influxdb": "213fc452357b6b1d",
        "name": "Read sunset",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 450,
        "y": 680,
        "wires": [
            [
                "54f131118ff2bed9"
            ]
        ]
    },
    {
        "id": "7ced7d9ee9ca8f38",
        "type": "function",
        "z": "33b0151b3bde76ac",
        "name": "Query sunset",
        "func": "\nmsg.query = 'select * from \"sunset\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 680,
        "wires": [
            [
                "4ce6bfb68e8de073"
            ]
        ]
    },
    {
        "id": "54f131118ff2bed9",
        "type": "change",
        "z": "33b0151b3bde76ac",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "sunset",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 680,
        "wires": [
            [
                "4b54ddfaea721b96"
            ]
        ]
    },
    {
        "id": "e2166262ed0e8f27",
        "type": "inject",
        "z": "33b0151b3bde76ac",
        "name": "msg.timenow",
        "props": [
            {
                "p": "timenow",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": "10",
        "topic": "",
        "x": 620,
        "y": 720,
        "wires": [
            [
                "4b54ddfaea721b96"
            ]
        ]
    },
    {
        "id": "706e87701369bde3",
        "type": "influxdb in",
        "z": "33b0151b3bde76ac",
        "influxdb": "8181f6d9dc076d46",
        "name": "Read TEMP1",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 480,
        "y": 480,
        "wires": [
            [
                "a71b8e309aa170fc"
            ]
        ]
    },
    {
        "id": "daaa8602c5e4b6fb",
        "type": "function",
        "z": "33b0151b3bde76ac",
        "name": "Query TEMP1",
        "func": "\nmsg.query = 'select * from \"tele/9c3fe8/TEMP1\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 480,
        "wires": [
            [
                "706e87701369bde3"
            ]
        ]
    },
    {
        "id": "369d87befbf63e9a",
        "type": "influxdb in",
        "z": "33b0151b3bde76ac",
        "influxdb": "cfe68d916a9a6da8",
        "name": "Read current_weather",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 540,
        "y": 520,
        "wires": [
            [
                "0dce815baa5a9d7d"
            ]
        ]
    },
    {
        "id": "af3b3836c77f2cd5",
        "type": "function",
        "z": "33b0151b3bde76ac",
        "name": "Query current_weather",
        "func": "\nmsg.query = 'select * from \"current_weather\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 520,
        "wires": [
            [
                "369d87befbf63e9a"
            ]
        ]
    },
    {
        "id": "a71b8e309aa170fc",
        "type": "change",
        "z": "33b0151b3bde76ac",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "temp1",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 480,
        "wires": [
            [
                "4b54ddfaea721b96"
            ]
        ]
    },
    {
        "id": "0dce815baa5a9d7d",
        "type": "change",
        "z": "33b0151b3bde76ac",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "weath",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 520,
        "wires": [
            [
                "4b54ddfaea721b96"
            ]
        ]
    },
    {
        "id": "3f29ec86bbb03770",
        "type": "inject",
        "z": "33b0151b3bde76ac",
        "name": "Fetch",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": "60",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 480,
        "wires": [
            [
                "daaa8602c5e4b6fb"
            ]
        ]
    },
    {
        "id": "25f9839093c9b581",
        "type": "inject",
        "z": "33b0151b3bde76ac",
        "name": "Fetch",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": "60",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 520,
        "wires": [
            [
                "af3b3836c77f2cd5"
            ]
        ]
    },
    {
        "id": "93d4840fa891e807",
        "type": "inject",
        "z": "33b0151b3bde76ac",
        "name": "Fetch",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": "60",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 560,
        "wires": [
            [
                "6426da94e23495d9"
            ]
        ]
    },
    {
        "id": "01167def02bf7f1f",
        "type": "inject",
        "z": "33b0151b3bde76ac",
        "name": "Fetch",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": "60",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 600,
        "wires": [
            [
                "0ceff1457ade2b51"
            ]
        ]
    },
    {
        "id": "8aabb996b7c6ba89",
        "type": "inject",
        "z": "33b0151b3bde76ac",
        "name": "Fetch",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": "60",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 640,
        "wires": [
            [
                "3fc78af240697a7d"
            ]
        ]
    },
    {
        "id": "be882851cc79f94b",
        "type": "inject",
        "z": "33b0151b3bde76ac",
        "name": "Fetch",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": "60",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 680,
        "wires": [
            [
                "7ced7d9ee9ca8f38"
            ]
        ]
    },
    {
        "id": "aaffe397022ae399",
        "type": "influxdb in",
        "z": "33b0151b3bde76ac",
        "influxdb": "8181f6d9dc076d46",
        "name": "Read TEMP1",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 460,
        "y": 820,
        "wires": [
            [
                "0f419705295bd368"
            ]
        ]
    },
    {
        "id": "ebef3534f143ce1e",
        "type": "inject",
        "z": "33b0151b3bde76ac",
        "name": "Fetch",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": "60",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 130,
        "y": 820,
        "wires": [
            [
                "736d9bc55dd3c4e1",
                "3a461187f583513a",
                "77762a7262f9b627",
                "c2285c30e7e147dc",
                "1d5aac5cd14e7460"
            ]
        ]
    },
    {
        "id": "736d9bc55dd3c4e1",
        "type": "function",
        "z": "33b0151b3bde76ac",
        "name": "Query TEMP1",
        "func": "\nmsg.query = 'select * from \"tele/9c3b5e/TEMP1\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 820,
        "wires": [
            [
                "aaffe397022ae399"
            ]
        ]
    },
    {
        "id": "61d34ab82aa86596",
        "type": "influxdb in",
        "z": "33b0151b3bde76ac",
        "influxdb": "cfe68d916a9a6da8",
        "name": "Read current_weather",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 520,
        "y": 860,
        "wires": [
            [
                "abf6f140608c42d5"
            ]
        ]
    },
    {
        "id": "3a461187f583513a",
        "type": "function",
        "z": "33b0151b3bde76ac",
        "name": "Query current_weather",
        "func": "\nmsg.query = 'select * from \"current_weather\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 860,
        "wires": [
            [
                "61d34ab82aa86596"
            ]
        ]
    },
    {
        "id": "0f419705295bd368",
        "type": "change",
        "z": "33b0151b3bde76ac",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "temp1",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 820,
        "wires": [
            [
                "939ac7c51b330d21",
                "827908a4d97adca5"
            ]
        ]
    },
    {
        "id": "abf6f140608c42d5",
        "type": "change",
        "z": "33b0151b3bde76ac",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "weath",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 860,
        "wires": [
            [
                "939ac7c51b330d21",
                "827908a4d97adca5"
            ]
        ]
    },
    {
        "id": "939ac7c51b330d21",
        "type": "function",
        "z": "33b0151b3bde76ac",
        "name": "Door Logic",
        "func": "// 0 is closed\n// 1 is open\n// 2 is option\n\ncontext.temp1_bool = context.temp1_bool || false;\ncontext.temp1 = context.temp1 || 0;\ncontext.weath_bool = context.weath_bool || false;\ncontext.weath = context.weath || 0;\ncontext.motion_bool = context.motion_bool || false;\ncontext.motion = context.motion || 0;\ncontext.sunrise_bool = context.sunrise_bool || false;\ncontext.sunrise = context.sunrise || 0;\ncontext.sunset_bool = context.sunset_bool || false;\ncontext.sunset = context.sunset || 0;\ncontext.timenow_bool = context.timenow_bool || false;\ncontext.timenow = context.timenow || 0;\n\nvar tmax_comfort = 24;              //max temp for too hot\nvar tmin_comfort = 21;               //min temp for too cold\nvar hour = new Date(context.timenow)\n\nif (msg.temp1){\n    context.temp1 = msg.temp1;\n    context.temp1_bool = true;\n}\n\nif (msg.weath){\n    context.weath = msg.weath;\n    context.weath_bool = true;\n}\n\n\nif (msg.sunrise){\n    context.sunrise = msg.sunrise * 1000;\n    context.sunrise_bool = true;\n}\n\nif (msg.sunset){\n    context.sunset = msg.sunset * 1000;\n    context.sunset_bool = true;\n}\n\nif (msg.timenow){\n    context.timenow = msg.timenow;\n    context.timenow_bool = true;\n}\n\nif (msg.motion == 0 || msg.motion == 1){\n    if (msg.motion == 1){ //if motion detected, save time\n        context.lastmotion = context.timenow;\n        context.motion = msg.motion;\n        context.motion_bool = true;\n    }\n    \n    if(context.timenow > context.lastmotion + 300000){ //if more than 5 minutes with no motion\n        context.motion = msg.motion;\n        context.motion_bool = true;\n    } else{\n        context.motion = 1;\n        context.motion_bool = true;\n    }\n}\n\n\nif (context.temp1_bool && context.weath_bool && context.motion_bool && context.sunrise_bool && context.sunset_bool && context.timenow_bool){\n    if (context.motion == 0 || context.timenow < context.sunrise || hour.getHours() > 22){           //if no one is around\n        msg.payload = 2;        //option\n    } \n    //...if motion is detected...\n    else if (context.temp1-context.weath > 5 || context.weath-context.temp1 > 5 || (context.temp1>tmin_comfort && context.temp1<tmax_comfort)) {\n        msg.payload = 0;    //close\n    } else {\n        msg.payload = 1;    //open\n    }\n    \n    context.temp1_bool = false;\n    context.weath_bool = false;\n    context.motion_bool = false;\n    context.sunrise_bool = false;\n    context.sunset_bool = false;\n    context.timenow_bool = false;\n    context.temp1 = 0;\n    context.weath = 0;\n    //context.motion = 0;\n    context.sunrise = 0;\n    context.sunset = 0;\n    context.timenow = 0;\n    \n    return msg;\n    \n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\ncontext.sentcommand = context.sentcommand || 0;\ncontext.pending = context.pending || 0;\n\ncontext.sentcommand = 0;\ncontext.pending = 0;",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "45f702c1477acc8c",
        "type": "influxdb in",
        "z": "33b0151b3bde76ac",
        "influxdb": "bc2ca31505293e84",
        "name": "Read motion_sensors",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 500,
        "y": 900,
        "wires": [
            [
                "d677e41d10b88a1e"
            ]
        ]
    },
    {
        "id": "77762a7262f9b627",
        "type": "function",
        "z": "33b0151b3bde76ac",
        "name": "Query MOTION1",
        "func": "\nmsg.query = 'select * from \"tele/9c3b5e/MOTION1\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 900,
        "wires": [
            [
                "45f702c1477acc8c"
            ]
        ]
    },
    {
        "id": "d677e41d10b88a1e",
        "type": "change",
        "z": "33b0151b3bde76ac",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "motion",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 900,
        "wires": [
            [
                "939ac7c51b330d21",
                "827908a4d97adca5"
            ]
        ]
    },
    {
        "id": "a369833b5b1a20f0",
        "type": "comment",
        "z": "33b0151b3bde76ac",
        "name": "Door Algorithm",
        "info": "",
        "x": 160,
        "y": 780,
        "wires": []
    },
    {
        "id": "f5184e856259ca1a",
        "type": "influxdb in",
        "z": "33b0151b3bde76ac",
        "influxdb": "0f055c5f74a251a8",
        "name": "Read sunrise",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 450,
        "y": 940,
        "wires": [
            [
                "53946704dd79779f"
            ]
        ]
    },
    {
        "id": "c2285c30e7e147dc",
        "type": "function",
        "z": "33b0151b3bde76ac",
        "name": "Query sunrise",
        "func": "\nmsg.query = 'select * from \"sunrise\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 940,
        "wires": [
            [
                "f5184e856259ca1a"
            ]
        ]
    },
    {
        "id": "53946704dd79779f",
        "type": "change",
        "z": "33b0151b3bde76ac",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "sunrise",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 940,
        "wires": [
            [
                "939ac7c51b330d21",
                "827908a4d97adca5"
            ]
        ]
    },
    {
        "id": "3a7507fd5e281e16",
        "type": "influxdb in",
        "z": "33b0151b3bde76ac",
        "influxdb": "213fc452357b6b1d",
        "name": "Read sunset",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 430,
        "y": 980,
        "wires": [
            [
                "98761ec42347d03e"
            ]
        ]
    },
    {
        "id": "1d5aac5cd14e7460",
        "type": "function",
        "z": "33b0151b3bde76ac",
        "name": "Query sunset",
        "func": "\nmsg.query = 'select * from \"sunset\" GROUP BY * ORDER BY DESC LIMIT 1';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 980,
        "wires": [
            [
                "3a7507fd5e281e16"
            ]
        ]
    },
    {
        "id": "98761ec42347d03e",
        "type": "change",
        "z": "33b0151b3bde76ac",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "sunset",
                "pt": "msg",
                "to": "payload[0].value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 980,
        "wires": [
            [
                "939ac7c51b330d21",
                "827908a4d97adca5"
            ]
        ]
    },
    {
        "id": "4474f91249ab3f9d",
        "type": "inject",
        "z": "33b0151b3bde76ac",
        "name": "msg.timenow",
        "props": [
            {
                "p": "timenow",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": "10",
        "topic": "",
        "x": 160,
        "y": 1020,
        "wires": [
            [
                "939ac7c51b330d21",
                "827908a4d97adca5"
            ]
        ]
    },
    {
        "id": "827908a4d97adca5",
        "type": "function",
        "z": "33b0151b3bde76ac",
        "name": "Door LED",
        "func": "// 0 is cold outside close\n// 1 is hot outside close\n// 2 is cold outside open\n// 3 is hot outside open\n// 4 is off\n\ncontext.temp1_bool = context.temp1_bool || false;\ncontext.temp1 = context.temp1 || 0;\ncontext.weath_bool = context.weath_bool || false;\ncontext.weath = context.weath || 0;\ncontext.motion_bool = context.motion_bool || false;\ncontext.motion = context.motion || 0;\ncontext.sunrise_bool = context.sunrise_bool || false;\ncontext.sunrise = context.sunrise || 0;\ncontext.sunset_bool = context.sunset_bool || false;\ncontext.sunset = context.sunset || 0;\ncontext.timenow_bool = context.timenow_bool || false;\ncontext.timenow = context.timenow || 0;\n\nvar tmax_comfort = 24;              //max temp for too hot\nvar tmin_comfort = 21;               //min temp for too cold\nvar hour = new Date(context.timenow)\n\nif (msg.temp1){\n    context.temp1 = msg.temp1;\n    context.temp1_bool = true;\n}\n\nif (msg.weath){\n    context.weath = msg.weath;\n    context.weath_bool = true;\n}\n\n\nif (msg.sunrise){\n    context.sunrise = msg.sunrise * 1000;\n    context.sunrise_bool = true;\n}\n\nif (msg.sunset){\n    context.sunset = msg.sunset * 1000;\n    context.sunset_bool = true;\n}\n\nif (msg.timenow){\n    context.timenow = msg.timenow;\n    context.timenow_bool = true;\n}\n\nif (msg.motion == 0 || msg.motion == 1){\n    if (msg.motion == 1){ //if motion detected, save time\n        context.lastmotion = context.timenow;\n        context.motion = msg.motion;\n        context.motion_bool = true;\n    }\n    \n    if(context.timenow > context.lastmotion + 300000){ //if more than 5 minutes with no motion\n        context.motion = msg.motion;\n        context.motion_bool = true;\n    } else{\n        context.motion = 1;\n        context.motion_bool = true;\n    }\n}\n\n\nif (context.temp1_bool && context.weath_bool && context.motion_bool && context.sunrise_bool && context.sunset_bool && context.timenow_bool){\n    if (context.motion == 0 || context.timenow < context.sunrise || hour.getHours() > 22){           //if no one is around\n        msg.payload = 4;        //option, off\n    } \n    //...if motion is detected...\n    else if (context.temp1-context.weath > 5) {\n        msg.payload = 0;    // 0 is cold outside close\n    } else if (context.weath-context.temp1 > 5) {\n        msg.payload = 1;    // 1 is hot outside close\n    } else if (context.temp1>tmin_comfort) {\n        msg.payload = 0;    // 0 is cold outside close\n    } else if (context.temp1<tmax_comfort) {\n        msg.payload = 1;    // 1 is hot outside close\n    } else {\n        msg.payload = 2;    // 2 is cold outside open\n    }\n    \n    context.temp1_bool = false;\n    context.weath_bool = false;\n    context.motion_bool = false;\n    context.sunrise_bool = false;\n    context.sunset_bool = false;\n    context.timenow_bool = false;\n    context.temp1 = 0;\n    context.weath = 0;\n    //context.motion = 0;\n    context.sunrise = 0;\n    context.sunset = 0;\n    context.timenow = 0;\n    \n    return msg;\n    \n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\ncontext.sentcommand = context.sentcommand || 0;\ncontext.pending = context.pending || 0;\n\ncontext.sentcommand = 0;\ncontext.pending = 0;",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "403cfde801e11da9",
        "type": "inject",
        "z": "33b0151b3bde76ac",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 950,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "01719fb45ffe154d",
        "type": "inject",
        "z": "33b0151b3bde76ac",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 950,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "2f9e131026cab31c",
        "type": "inject",
        "z": "33b0151b3bde76ac",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2",
        "payloadType": "num",
        "x": 950,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "40095e25ab6de18a",
        "type": "inject",
        "z": "33b0151b3bde76ac",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 950,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "e792c77c358835b6",
        "type": "inject",
        "z": "33b0151b3bde76ac",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 950,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "261f01887e308691",
        "type": "inject",
        "z": "33b0151b3bde76ac",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2",
        "payloadType": "num",
        "x": 950,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "f151a2bbfbd0963b",
        "type": "inject",
        "z": "33b0151b3bde76ac",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "3",
        "payloadType": "num",
        "x": 950,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "084cb387c8dd473d",
        "type": "inject",
        "z": "33b0151b3bde76ac",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "4",
        "payloadType": "num",
        "x": 950,
        "y": 1160,
        "wires": [
            []
        ]
    }
]